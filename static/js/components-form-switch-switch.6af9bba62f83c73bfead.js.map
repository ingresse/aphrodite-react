{"version":3,"sources":["/Users/udi/projects/front/aphrodite-react/src/components/Form/Switch/Switch.mdx"],"names":["name","layoutProps","MDXContent","components","props","mdxType","__position","__code","__scope","this","useState","Playground","Props","Switch","Card","Checkbox","Input","Placeholder","Segment","Row","Col","col","setCol","text","setText","disabled","setDisabled","textAlign","setTextAlign","textSmall","setTextSmall","toggleAlign","setToggleAlign","BreakPointToggle","block","as","type","height","styles","cursor","border","outline","title","size","onClick","padding","window","innerWidth","horizontal","xs","sm","md","label","placeholder","value","onChange","e","target","id","defaultChecked","checked","of","isMDXComponent"],"mappings":"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","file":"static/js/components-form-switch-switch.09451e60.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { useState } from 'react';\nimport { Playground, Props } from 'docz';\nimport {\n    Switch,\n    Card,\n    Checkbox,\n    Input,\n    Placeholder,\n    Segment,\n    Row,\n    Col,\n} from '../../';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\nconst BreakPointToggle = makeShortcode(\"BreakPointToggle\");\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"switch\"\n    }}>{`Switch`}</h1>\n    <h3 {...{\n      \"id\": \"form-checkbox-styled-like-a-switch-onoff\"\n    }}>{`Form checkbox styled like a switch on/off.`}</h3>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <Playground __position={0} __code={'() => {\\n  const [col, setCol] = useState(4)\\n  const [text, setText] = useState(\\'Switch Text\\')\\n  const [disabled, setDisabled] = useState(false)\\n  const [textAlign, setTextAlign] = useState(false)\\n  const [textSmall, setTextSmall] = useState(false)\\n  const [toggleAlign, setToggleAlign] = useState(false)\\n  const BreakPointToggle = props => (\\n    <Placeholder\\n      {...props}\\n      block\\n      as=\\\"button\\\"\\n      type=\\\"button\\\"\\n      height={20}\\n      styles={{\\n        cursor: \\'pointer\\',\\n        border: 0,\\n        outline: 0,\\n      }}\\n      title={`Toggle width to ${props.size} columns`}\\n      onClick={() => setCol(props.size)}\\n    />\\n  )\\n\\n  return (\\n    <Segment padding=\\\"0\\\">\\n      {window.innerWidth < 768 ? null : (\\n        <Segment padding=\\\"0 0 10px\\\">\\n          <Row horizontal=\\\"center\\\">\\n            <Col xs={12} sm={2}>\\n              <BreakPointToggle size={12} />\\n            </Col>\\n            <Col xs={12} sm={2}>\\n              <BreakPointToggle size={8} />\\n            </Col>\\n            <Col xs={12} sm={4}>\\n              <BreakPointToggle size={4} />\\n            </Col>\\n            <Col xs={12} sm={2}>\\n              <BreakPointToggle size={8} />\\n            </Col>\\n            <Col xs={12} sm={2}>\\n              <BreakPointToggle size={12} />\\n            </Col>\\n          </Row>\\n        </Segment>\\n      )}\\n\\n      <Segment padding=\\\"20px 0\\\">\\n        <Row horizontal=\\\"center\\\">\\n          <Col xs={12} sm={col}>\\n            <Card>\\n              <Switch\\n                disabled={disabled}\\n                textSmall={textSmall}\\n                textAlign={textAlign ? \\'right\\' : \\'left\\'}\\n                toggleAlign={toggleAlign ? \\'right\\' : \\'left\\'}\\n              >\\n                {text}\\n              </Switch>\\n            </Card>\\n          </Col>\\n        </Row>\\n\\n        <Segment padding=\\\"40px 0\\\">\\n          <Row horizontal=\\\"center\\\">\\n            <Col xs={12} sm={12} md={9}>\\n              <Segment padding=\\\"10px 0\\\">\\n                <Input\\n                  type=\\\"text\\\"\\n                  label=\\\"Switch Label Text\\\"\\n                  placeholder=\\\"Type something...\\\"\\n                  value={text}\\n                  onChange={e => setText(e.target.value)}\\n                />\\n              </Segment>\\n            </Col>\\n          </Row>\\n\\n          <Row horizontal=\\\"center\\\">\\n            <Col xs={6} sm={6} md={3}>\\n              <Segment padding=\\\"10px 0\\\">\\n                <Checkbox\\n                  id=\\\"switchToggleAlign\\\"\\n                  value={toggleAlign ? \\'right\\' : \\'left\\'}\\n                  defaultChecked={toggleAlign}\\n                  onChange={e =>\\n                    setToggleAlign(e.target.checked ? true : false)\\n                  }\\n                >\\n                  Align toggle at right\\n                </Checkbox>\\n              </Segment>\\n            </Col>\\n\\n            <Col xs={6} sm={6} md={3}>\\n              <Segment padding=\\\"10px 0\\\">\\n                <Checkbox\\n                  id=\\\"switchTextAlign\\\"\\n                  value={textAlign ? \\'right\\' : \\'left\\'}\\n                  defaultChecked={textAlign}\\n                  onChange={e =>\\n                    setTextAlign(e.target.checked ? true : false)\\n                  }\\n                >\\n                  Align text at right\\n                </Checkbox>\\n              </Segment>\\n            </Col>\\n\\n            <Col xs={6} sm={6} md={3}>\\n              <Segment padding=\\\"10px 0\\\">\\n                <Checkbox\\n                  id=\\\"switchTextSmall\\\"\\n                  value={textSmall ? true : false}\\n                  defaultChecked={textSmall}\\n                  onChange={e =>\\n                    setTextSmall(e.target.checked ? true : false)\\n                  }\\n                >\\n                  Text small\\n                </Checkbox>\\n              </Segment>\\n            </Col>\\n\\n            <Col xs={6} sm={6} md={3}>\\n              <Segment padding=\\\"10px 0\\\">\\n                <Checkbox\\n                  id=\\\"switchDisabled\\\"\\n                  value={disabled ? true : false}\\n                  defaultChecked={disabled}\\n                  onChange={e => setDisabled(e.target.checked ? true : false)}\\n                >\\n                  Disabled\\n                </Checkbox>\\n              </Segment>\\n            </Col>\\n          </Row>\\n        </Segment>\\n      </Segment>\\n    </Segment>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      Playground,\n      Props,\n      Switch,\n      Card,\n      Checkbox,\n      Input,\n      Placeholder,\n      Segment,\n      Row,\n      Col\n    }} mdxType=\"Playground\">\n    {() => {\n        const [col, setCol] = useState(4);\n        const [text, setText] = useState('Switch Text');\n        const [disabled, setDisabled] = useState(false);\n        const [textAlign, setTextAlign] = useState(false);\n        const [textSmall, setTextSmall] = useState(false);\n        const [toggleAlign, setToggleAlign] = useState(false);\n\n        const BreakPointToggle = props => <Placeholder {...props} block as=\"button\" type=\"button\" height={20} styles={{\n          cursor: 'pointer',\n          border: 0,\n          outline: 0\n        }} title={`Toggle width to ${props.size} columns`} onClick={() => setCol(props.size)} mdxType=\"Placeholder\" />;\n\n        return <Segment padding=\"0\" mdxType=\"Segment\">\n            {window.innerWidth < 768 ? null : <Segment padding=\"0 0 10px\" mdxType=\"Segment\">\n                    <Row horizontal=\"center\" mdxType=\"Row\">\n                        <Col xs={12} sm={2} mdxType=\"Col\">\n                            <BreakPointToggle size={12} mdxType=\"BreakPointToggle\" />\n                        </Col>\n                        <Col xs={12} sm={2} mdxType=\"Col\">\n                            <BreakPointToggle size={8} mdxType=\"BreakPointToggle\" />\n                        </Col>\n                        <Col xs={12} sm={4} mdxType=\"Col\">\n                            <BreakPointToggle size={4} mdxType=\"BreakPointToggle\" />\n                        </Col>\n                        <Col xs={12} sm={2} mdxType=\"Col\">\n                            <BreakPointToggle size={8} mdxType=\"BreakPointToggle\" />\n                        </Col>\n                        <Col xs={12} sm={2} mdxType=\"Col\">\n                            <BreakPointToggle size={12} mdxType=\"BreakPointToggle\" />\n                        </Col>\n                    </Row>\n                </Segment>}\n\n            <Segment padding=\"20px 0\" mdxType=\"Segment\">\n                <Row horizontal=\"center\" mdxType=\"Row\">\n                    <Col xs={12} sm={col} mdxType=\"Col\">\n                        <Card mdxType=\"Card\">\n                            <Switch disabled={disabled} textSmall={textSmall} textAlign={textAlign ? 'right' : 'left'} toggleAlign={toggleAlign ? 'right' : 'left'} mdxType=\"Switch\">\n                                {text}\n                            </Switch>\n                        </Card>\n                    </Col>\n                </Row>\n\n                <Segment padding=\"40px 0\" mdxType=\"Segment\">\n                    <Row horizontal=\"center\" mdxType=\"Row\">\n                        <Col xs={12} sm={12} md={9} mdxType=\"Col\">\n                            <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                                <Input type=\"text\" label=\"Switch Label Text\" placeholder=\"Type something...\" value={text} onChange={e => setText(e.target.value)} mdxType=\"Input\" />\n                            </Segment>\n                        </Col>\n                    </Row>\n\n                    <Row horizontal=\"center\" mdxType=\"Row\">\n                        <Col xs={6} sm={6} md={3} mdxType=\"Col\">\n                            <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                                <Checkbox id=\"switchToggleAlign\" value={toggleAlign ? 'right' : 'left'} defaultChecked={toggleAlign} onChange={e => setToggleAlign(e.target.checked ? true : false)} mdxType=\"Checkbox\">\n                                    Align toggle at right\n                                </Checkbox>\n                            </Segment>\n                        </Col>\n\n                        <Col xs={6} sm={6} md={3} mdxType=\"Col\">\n                            <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                                <Checkbox id=\"switchTextAlign\" value={textAlign ? 'right' : 'left'} defaultChecked={textAlign} onChange={e => setTextAlign(e.target.checked ? true : false)} mdxType=\"Checkbox\">\n                                    Align text at right\n                                </Checkbox>\n                            </Segment>\n                        </Col>\n\n                        <Col xs={6} sm={6} md={3} mdxType=\"Col\">\n                            <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                                <Checkbox id=\"switchTextSmall\" value={textSmall ? true : false} defaultChecked={textSmall} onChange={e => setTextSmall(e.target.checked ? true : false)} mdxType=\"Checkbox\">\n                                    Text small\n                                </Checkbox>\n                            </Segment>\n                        </Col>\n\n                        <Col xs={6} sm={6} md={3} mdxType=\"Col\">\n                            <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                                <Checkbox id=\"switchDisabled\" value={disabled ? true : false} defaultChecked={disabled} onChange={e => setDisabled(e.target.checked ? true : false)} mdxType=\"Checkbox\">\n                                    Disabled\n                                </Checkbox>\n                            </Segment>\n                        </Col>\n                    </Row>\n                </Segment>\n            </Segment>\n        </Segment>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={Switch} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
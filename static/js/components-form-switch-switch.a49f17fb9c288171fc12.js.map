{"version":3,"sources":["/home/udi/projects/aphrodite/src/components/Form/Switch/Switch.mdx"],"names":["name","layoutProps","MDXContent","components","props","mdxType","__position","__code","__scope","this","useState","Playground","Props","Switch","Card","Checkbox","Container","Input","Placeholder","Segment","Row","Col","Button","newsletter","email","formData","setFormData","handleChange","target","checked","value","fill","styles","maxWidth","noValidate","onSubmit","evt","preventDefault","alert","padding","type","label","id","onChange","block","disabled","col","setCol","text","setText","setDisabled","textAlign","setTextAlign","textSmall","setTextSmall","toggleAlign","setToggleAlign","setChecked","BreakPointToggle","as","height","cursor","border","outline","title","size","onClick","window","innerWidth","horizontal","xs","sm","md","placeholder","e","defaultChecked","of","isMDXComponent"],"mappings":"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","file":"static/js/components-form-switch-switch.69ea1ff6.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { useState } from 'react';\nimport { Playground, Props } from 'docz';\nimport {\n    Switch,\n    Card,\n    Checkbox,\n    Container,\n    Input,\n    Placeholder,\n    Segment,\n    Row,\n    Col,\n    Button,\n} from '../../';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst BreakPointToggle = makeShortcode(\"BreakPointToggle\");\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"switch\"\n    }}>{`Switch`}</h1>\n    <h3 {...{\n      \"id\": \"form-checkbox-styled-like-a-switch-onoff\"\n    }}>{`Form checkbox styled like a switch on/off.`}</h3>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <Playground __position={0} __code={'() => {\\n  // import React, { useState } from \\'react\\';\\n  // import { Switch, Input, Button, Container, Segment } from \\'@ingresse/aphrodite\\';\\n  const [formData, setFormData] = useState({\\n    newsletter: false,\\n    email: \\'\\',\\n  })\\n\\n  function handleChange({ target }) {\\n    const { name, checked, value } = target\\n    const fill = name === \\'newsletter\\' ? checked : value || \\'\\'\\n\\n    setFormData({\\n      ...formData,\\n      [name]: fill,\\n    })\\n  }\\n\\n  function handleSubmit(evt) {\\n    evt.preventDefault()\\n\\n    if (!formData.email) {\\n      return\\n    }\\n\\n    alert(\\n      formData.email +\\n        \\' \\' +\\n        (formData.newsletter ? \\'agree\\' : \\'disagree\\') +\\n        \\' to receive newsletters\\',\\n    )\\n  }\\n\\n  return (\\n    <Container styles={{ maxWidth: \\'320px\\' }}>\\n      <form noValidate onSubmit={handleSubmit}>\\n        <Segment padding=\\\"10px 0\\\">\\n          <Input\\n            name=\\\"email\\\"\\n            type=\\\"email\\\"\\n            label=\\\"Your Email\\\"\\n            id=\\\"ExampleSwitchEmail\\\"\\n            value={formData.email}\\n            onChange={handleChange}\\n          />\\n        </Segment>\\n        <Segment padding=\\\"10px 0\\\">\\n          <Switch\\n            name=\\\"newsletter\\\"\\n            id=\\\"ExampleSwitchNewsletter\\\" // REQUIRED\\n            checked={formData.newsletter}\\n            onChange={handleChange}\\n          >\\n            Like to receive our newsletter?\\n          </Switch>\\n        </Segment>\\n        <Segment padding=\\\"10px 0\\\">\\n          <Button block type=\\\"submit\\\" disabled={!formData.email}>\\n            Register\\n          </Button>\\n        </Segment>\\n      </form>\\n    </Container>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      Playground,\n      Props,\n      Switch,\n      Card,\n      Checkbox,\n      Container,\n      Input,\n      Placeholder,\n      Segment,\n      Row,\n      Col,\n      Button\n    }} mdxType=\"Playground\">\n    {() => {\n        // import React, { useState } from 'react';\n        // import { Switch, Input, Button, Container, Segment } from '@ingresse/aphrodite';\n        const [formData, setFormData] = useState({\n          newsletter: false,\n          email: ''\n        });\n\n        function handleChange({\n          target\n        }) {\n          const {\n            name,\n            checked,\n            value\n          } = target;\n          const fill = name === 'newsletter' ? checked : value || '';\n          setFormData({ ...formData,\n            [name]: fill\n          });\n        }\n\n        function handleSubmit(evt) {\n          evt.preventDefault();\n\n          if (!formData.email) {\n            return;\n          }\n\n          alert(formData.email + ' ' + (formData.newsletter ? 'agree' : 'disagree') + ' to receive newsletters');\n        }\n\n        return <Container styles={{\n          maxWidth: '320px'\n        }} mdxType=\"Container\">\n            <form noValidate onSubmit={handleSubmit}>\n                <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                    <Input name=\"email\" type=\"email\" label=\"Your Email\" id=\"ExampleSwitchEmail\" value={formData.email} onChange={handleChange} mdxType=\"Input\" />\n                </Segment>\n                <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                    <Switch name=\"newsletter\" id=\"ExampleSwitchNewsletter\" // REQUIRED\n              checked={formData.newsletter} onChange={handleChange} mdxType=\"Switch\">\n                        Like to receive our newsletter?\n                    </Switch>\n                </Segment>\n                <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                    <Button block type=\"submit\" disabled={!formData.email} mdxType=\"Button\">\n                        Register\n                    </Button>\n                </Segment>\n            </form>\n        </Container>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"advanced-example\"\n    }}>{`Advanced Example`}</h2>\n    <Playground __position={1} __code={'() => {\\n  const [col, setCol] = useState(4)\\n  const [text, setText] = useState(\\'Switch Text\\')\\n  const [disabled, setDisabled] = useState(false)\\n  const [textAlign, setTextAlign] = useState(false)\\n  const [textSmall, setTextSmall] = useState(false)\\n  const [toggleAlign, setToggleAlign] = useState(false)\\n  const [checked, setChecked] = useState(false)\\n  const BreakPointToggle = props => (\\n    <Placeholder\\n      {...props}\\n      block\\n      as=\\\"button\\\"\\n      type=\\\"button\\\"\\n      height={20}\\n      styles={{\\n        cursor: \\'pointer\\',\\n        border: 0,\\n        outline: 0,\\n      }}\\n      title={`Toggle width to ${props.size} columns`}\\n      onClick={() => setCol(props.size)}\\n    />\\n  )\\n\\n  return (\\n    <Segment padding=\\\"0\\\">\\n      {window.innerWidth < 768 ? null : (\\n        <Segment padding=\\\"0 0 10px\\\">\\n          <Row horizontal=\\\"center\\\">\\n            <Col xs={12} sm={2}>\\n              <BreakPointToggle size={12} />\\n            </Col>\\n            <Col xs={12} sm={2}>\\n              <BreakPointToggle size={8} />\\n            </Col>\\n            <Col xs={12} sm={4}>\\n              <BreakPointToggle size={4} />\\n            </Col>\\n            <Col xs={12} sm={2}>\\n              <BreakPointToggle size={8} />\\n            </Col>\\n            <Col xs={12} sm={2}>\\n              <BreakPointToggle size={12} />\\n            </Col>\\n          </Row>\\n        </Segment>\\n      )}\\n\\n      <Segment padding=\\\"20px 0\\\">\\n        <Row horizontal=\\\"center\\\">\\n          <Col xs={12} sm={col}>\\n            <Card>\\n              <Switch\\n                id=\\\"SwitchExample\\\"\\n                checked={checked}\\n                onChange={() => setChecked(!checked)}\\n                disabled={disabled}\\n                textSmall={textSmall}\\n                textAlign={textAlign ? \\'right\\' : \\'left\\'}\\n                toggleAlign={toggleAlign ? \\'right\\' : \\'left\\'}\\n              >\\n                {text}\\n              </Switch>\\n            </Card>\\n          </Col>\\n        </Row>\\n\\n        <Segment padding=\\\"40px 0\\\">\\n          <Row horizontal=\\\"center\\\">\\n            <Col xs={12} sm={12} md={9}>\\n              <Segment padding=\\\"10px 0\\\">\\n                <Input\\n                  type=\\\"text\\\"\\n                  label=\\\"Switch Label Text\\\"\\n                  placeholder=\\\"Type something...\\\"\\n                  value={text}\\n                  onChange={e => setText(e.target.value)}\\n                />\\n              </Segment>\\n            </Col>\\n          </Row>\\n\\n          <Row horizontal=\\\"center\\\">\\n            <Col xs={6} sm={6} md={3}>\\n              <Segment padding=\\\"10px 0\\\">\\n                <Checkbox\\n                  id=\\\"switchToggleAlign\\\"\\n                  value={toggleAlign ? \\'right\\' : \\'left\\'}\\n                  defaultChecked={toggleAlign}\\n                  onChange={e => setToggleAlign(!!e.target.checked)}\\n                >\\n                  Align toggle at right\\n                </Checkbox>\\n              </Segment>\\n            </Col>\\n\\n            <Col xs={6} sm={6} md={3}>\\n              <Segment padding=\\\"10px 0\\\">\\n                <Checkbox\\n                  id=\\\"switchTextAlign\\\"\\n                  value={textAlign ? \\'right\\' : \\'left\\'}\\n                  defaultChecked={textAlign}\\n                  onChange={e => setTextAlign(!!e.target.checked)}\\n                >\\n                  Align text at right\\n                </Checkbox>\\n              </Segment>\\n            </Col>\\n\\n            <Col xs={6} sm={6} md={3}>\\n              <Segment padding=\\\"10px 0\\\">\\n                <Checkbox\\n                  id=\\\"switchTextSmall\\\"\\n                  value={!!textSmall}\\n                  defaultChecked={textSmall}\\n                  onChange={e => setTextSmall(!!e.target.checked)}\\n                >\\n                  Text small\\n                </Checkbox>\\n              </Segment>\\n            </Col>\\n\\n            <Col xs={6} sm={6} md={3}>\\n              <Segment padding=\\\"10px 0\\\">\\n                <Checkbox\\n                  id=\\\"switchDisabled\\\"\\n                  value={disabled}\\n                  defaultChecked={disabled}\\n                  onChange={e => setDisabled(!!e.target.checked)}\\n                >\\n                  Disabled\\n                </Checkbox>\\n              </Segment>\\n            </Col>\\n          </Row>\\n        </Segment>\\n      </Segment>\\n    </Segment>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      Playground,\n      Props,\n      Switch,\n      Card,\n      Checkbox,\n      Container,\n      Input,\n      Placeholder,\n      Segment,\n      Row,\n      Col,\n      Button\n    }} mdxType=\"Playground\">\n    {() => {\n        const [col, setCol] = useState(4);\n        const [text, setText] = useState('Switch Text');\n        const [disabled, setDisabled] = useState(false);\n        const [textAlign, setTextAlign] = useState(false);\n        const [textSmall, setTextSmall] = useState(false);\n        const [toggleAlign, setToggleAlign] = useState(false);\n        const [checked, setChecked] = useState(false);\n\n        const BreakPointToggle = props => <Placeholder {...props} block as=\"button\" type=\"button\" height={20} styles={{\n          cursor: 'pointer',\n          border: 0,\n          outline: 0\n        }} title={`Toggle width to ${props.size} columns`} onClick={() => setCol(props.size)} mdxType=\"Placeholder\" />;\n\n        return <Segment padding=\"0\" mdxType=\"Segment\">\n            {window.innerWidth < 768 ? null : <Segment padding=\"0 0 10px\" mdxType=\"Segment\">\n                    <Row horizontal=\"center\" mdxType=\"Row\">\n                        <Col xs={12} sm={2} mdxType=\"Col\">\n                            <BreakPointToggle size={12} mdxType=\"BreakPointToggle\" />\n                        </Col>\n                        <Col xs={12} sm={2} mdxType=\"Col\">\n                            <BreakPointToggle size={8} mdxType=\"BreakPointToggle\" />\n                        </Col>\n                        <Col xs={12} sm={4} mdxType=\"Col\">\n                            <BreakPointToggle size={4} mdxType=\"BreakPointToggle\" />\n                        </Col>\n                        <Col xs={12} sm={2} mdxType=\"Col\">\n                            <BreakPointToggle size={8} mdxType=\"BreakPointToggle\" />\n                        </Col>\n                        <Col xs={12} sm={2} mdxType=\"Col\">\n                            <BreakPointToggle size={12} mdxType=\"BreakPointToggle\" />\n                        </Col>\n                    </Row>\n                </Segment>}\n\n            <Segment padding=\"20px 0\" mdxType=\"Segment\">\n                <Row horizontal=\"center\" mdxType=\"Row\">\n                    <Col xs={12} sm={col} mdxType=\"Col\">\n                        <Card mdxType=\"Card\">\n                            <Switch id=\"SwitchExample\" checked={checked} onChange={() => setChecked(!checked)} disabled={disabled} textSmall={textSmall} textAlign={textAlign ? 'right' : 'left'} toggleAlign={toggleAlign ? 'right' : 'left'} mdxType=\"Switch\">\n                                {text}\n                            </Switch>\n                        </Card>\n                    </Col>\n                </Row>\n\n                <Segment padding=\"40px 0\" mdxType=\"Segment\">\n                    <Row horizontal=\"center\" mdxType=\"Row\">\n                        <Col xs={12} sm={12} md={9} mdxType=\"Col\">\n                            <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                                <Input type=\"text\" label=\"Switch Label Text\" placeholder=\"Type something...\" value={text} onChange={e => setText(e.target.value)} mdxType=\"Input\" />\n                            </Segment>\n                        </Col>\n                    </Row>\n\n                    <Row horizontal=\"center\" mdxType=\"Row\">\n                        <Col xs={6} sm={6} md={3} mdxType=\"Col\">\n                            <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                                <Checkbox id=\"switchToggleAlign\" value={toggleAlign ? 'right' : 'left'} defaultChecked={toggleAlign} onChange={e => setToggleAlign(!!e.target.checked)} mdxType=\"Checkbox\">\n                                    Align toggle at right\n                                </Checkbox>\n                            </Segment>\n                        </Col>\n\n                        <Col xs={6} sm={6} md={3} mdxType=\"Col\">\n                            <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                                <Checkbox id=\"switchTextAlign\" value={textAlign ? 'right' : 'left'} defaultChecked={textAlign} onChange={e => setTextAlign(!!e.target.checked)} mdxType=\"Checkbox\">\n                                    Align text at right\n                                </Checkbox>\n                            </Segment>\n                        </Col>\n\n                        <Col xs={6} sm={6} md={3} mdxType=\"Col\">\n                            <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                                <Checkbox id=\"switchTextSmall\" value={!!textSmall} defaultChecked={textSmall} onChange={e => setTextSmall(!!e.target.checked)} mdxType=\"Checkbox\">\n                                    Text small\n                                </Checkbox>\n                            </Segment>\n                        </Col>\n\n                        <Col xs={6} sm={6} md={3} mdxType=\"Col\">\n                            <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                                <Checkbox id=\"switchDisabled\" value={disabled} defaultChecked={disabled} onChange={e => setDisabled(!!e.target.checked)} mdxType=\"Checkbox\">\n                                    Disabled\n                                </Checkbox>\n                            </Segment>\n                        </Col>\n                    </Row>\n                </Segment>\n            </Segment>\n        </Segment>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={Switch} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
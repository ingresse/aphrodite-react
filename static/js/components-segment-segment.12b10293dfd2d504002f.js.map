{"version":3,"sources":["/Users/udi/ingresse/aphrodite-react/src/components/Segment/Segment.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","this","useState","Playground","Props","Segment","Container","Row","Col","Card","Switch","hasCustomStyles","setHasCustomStyles","sm","color","textUpper","radius","background","padding","id","checked","onChange","of","isMDXComponent"],"mappings":"0iBAWMA,EAAc,GAIL,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,kBACE,GAAM,WADR,WAGA,kBACE,GAAM,qDADR,4CAEgD,0BAAYC,WAAW,MAAvB,aAFhD,KAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,gGAUL,kBACE,GAAM,YADR,YAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,k5BAA25BC,QAAS,CACr8BL,MAAOM,KAAOA,KAAKN,MAAQA,EAC3BO,oBACAC,eACAC,UACAC,aACAC,cACAC,SACAC,QACAC,SACAC,aACCd,QAAQ,eACV,WAAO,IAAD,EAC2CM,oBAAS,GADpD,mBACIS,EADJ,KACqBC,EADrB,KAEH,OAAO,YAAC,IAAD,CAAWC,IAAE,EAACjB,QAAQ,aACzB,YAAC,KAAD,CAASA,QAAQ,WAAjB,oBAIA,YAAC,KAAD,CAASkB,MAAM,YAAYlB,QAAQ,WAAnC,mCAIA,YAAC,KAAD,CAASmB,UAAWJ,EAAiBK,OAAQL,EAAkB,GAAK,EAAGG,MAAOH,EAAkB,UAAY,GAAIM,WAAYN,EAAkB,UAAY,GAAIf,QAAQ,WAClK,+CADJ,gDAOA,YAAC,KAAD,CAASsB,QAAQ,cAActB,QAAQ,WACnC,YAAC,IAAD,CAAMA,QAAQ,QACV,YAAC,KAAD,CAAQuB,GAAG,uBAAuBC,QAAST,EAAiBU,SAAU,kBAAMT,GAAoBD,IAAkBf,QAAQ,UAA1H,qCAQhB,kBACE,GAAM,cADR,cAGA,YAAC,IAAD,CAAO0B,GAAIjB,KAAST,QAAQ,W,wLAKhCH,EAAW8B,gBAAiB","file":"static/js/components-segment-segment.c07cc7cc.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { useState } from 'react';\nimport { Playground, Props } from 'docz';\nimport { Segment, Container, Row, Col, Card, Switch } from '../';\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"segment\"\n    }}>{`Segment`}</h1>\n    <h3 {...{\n      \"id\": \"a-simple-block-with-default-paddings-of-20px-10px\"\n    }}>{`A simple block, with default paddings of `}<inlineCode parentName=\"h3\">{`20px 10px`}</inlineCode>{`.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { Segment } from '@ingresse/aphrodite';\n\n...\n\n<Segment>\n    Hello\n</Segment>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <Playground __position={0} __code={'() => {\\n  const [hasCustomStyles, setHasCustomStyles] = useState(true)\\n  return (\\n    <Container sm>\\n      <Segment>Default Segment.</Segment>\\n\\n      <Segment color=\\\"supernova\\\">Segment with custom color prop.</Segment>\\n\\n      <Segment\\n        textUpper={hasCustomStyles}\\n        radius={hasCustomStyles ? 10 : 0}\\n        color={hasCustomStyles ? \\'inverse\\' : \\'\\'}\\n        background={hasCustomStyles ? \\'success\\' : \\'\\'}\\n      >\\n        <div>This is a `Segment`.</div>A simple block to segmentate all the\\n        things.\\n      </Segment>\\n\\n      <Segment padding=\\\"40px 0 10px\\\">\\n        <Card>\\n          <Switch\\n            id=\\\"SegmentSwitchExample\\\"\\n            checked={hasCustomStyles}\\n            onChange={() => setHasCustomStyles(!hasCustomStyles)}\\n          >\\n            Display with custom styles.\\n          </Switch>\\n        </Card>\\n      </Segment>\\n    </Container>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      Playground,\n      Props,\n      Segment,\n      Container,\n      Row,\n      Col,\n      Card,\n      Switch\n    }} mdxType=\"Playground\">\n    {() => {\n        const [hasCustomStyles, setHasCustomStyles] = useState(true);\n        return <Container sm mdxType=\"Container\">\n            <Segment mdxType=\"Segment\">\n                Default Segment.\n            </Segment>\n\n            <Segment color=\"supernova\" mdxType=\"Segment\">\n                Segment with custom color prop.\n            </Segment>\n\n            <Segment textUpper={hasCustomStyles} radius={hasCustomStyles ? 10 : 0} color={hasCustomStyles ? 'inverse' : ''} background={hasCustomStyles ? 'success' : ''} mdxType=\"Segment\">\n                <div>\n                    This is a `Segment`.\n                </div>\n                A simple block to segmentate all the things.\n            </Segment>\n\n            <Segment padding=\"40px 0 10px\" mdxType=\"Segment\">\n                <Card mdxType=\"Card\">\n                    <Switch id=\"SegmentSwitchExample\" checked={hasCustomStyles} onChange={() => setHasCustomStyles(!hasCustomStyles)} mdxType=\"Switch\">\n                        Display with custom styles.\n                    </Switch>\n                </Card>\n            </Segment>\n        </Container>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={Segment} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
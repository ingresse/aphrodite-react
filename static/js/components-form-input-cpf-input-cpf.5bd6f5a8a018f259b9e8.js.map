{"version":3,"sources":["/home/udi/front/@aphrodite/src/components/Form/InputCpf/InputCpf.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","__position","__code","__scope","this","useState","Playground","Props","InputCpf","Container","Segment","value","setValue","xs","padding","id","label","onChange","target","of","isMDXComponent"],"mappings":"ijBAaA,MAKMA,EAAc,GAIL,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,iBAAQ,CACN,GAAM,mBADR,oBAGA,iBAAQ,CACN,GAAM,2DADR,6DAGA,iBAAQ,CACN,GAAM,WADR,WAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,2aAAkbC,QAAS,CAC5dJ,MAAOK,KAAOA,KAAKL,MAAQA,EAC3BM,oBACAC,eACAC,UACAC,aACAC,cACAC,aACCV,QAAQ,cACV,KAAO,MAAD,EACuBK,mBAAS,IADhC,mBACIM,EADJ,KACWC,EADX,KAYH,OAAO,YAAC,IAAD,CAAWC,IAAE,EAACb,QAAQ,aACzB,YAAC,IAAD,CAASc,QAAQ,SAASd,QAAQ,WAC9B,YAAC,IAAD,CAAUe,GAAG,kBAAkBC,MAAM,kBAAkBC,SAX/D,UAAsB,OACpBC,IACE,MAEAP,GACEO,GAAU,IADZP,MAEFC,EAASD,IAK4EA,MAAOA,EAAOX,QAAQ,iBAKjH,iBAAQ,CACN,GAAM,cADR,cAGA,YAAC,IAAD,CAAOmB,GAAIX,IAAUR,QAAQ,W,+LAKjCH,EAAWuB,gBAAiB","file":"static/js/components-form-input-cpf-input-cpf.c65b4232.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { useState } from 'react';\nimport { Playground, Props } from 'docz';\nimport {\n    InputCpf,\n    Container,\n    Segment,\n} from '../../';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"from--input-cpf\"\n    }}>{`From | Input CPF`}</h1>\n    <h3 {...{\n      \"id\": \"brazilian-document-type-with-simple-mask-and-validation\"\n    }}>{`Brazilian document type, with simple mask and validation.`}</h3>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <Playground __position={0} __code={'() => {\\n  const [value, setValue] = useState(\\'\\')\\n  function handleChange({ target }) {\\n    const { value } = target || {}\\n\\n    setValue(value)\\n  }\\n\\n  return (\\n    <Container xs>\\n      <Segment padding=\\\"10px 0\\\">\\n        <InputCpf\\n          id=\\\"ExampleInputCpf\\\"\\n          label=\\\"Document Number\\\"\\n          onChange={handleChange}\\n          value={value}\\n        />\\n      </Segment>\\n    </Container>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      Playground,\n      Props,\n      InputCpf,\n      Container,\n      Segment\n    }} mdxType=\"Playground\">\n    {() => {\n        const [value, setValue] = useState('');\n\n        function handleChange({\n          target\n        }) {\n          const {\n            value\n          } = target || {};\n          setValue(value);\n        }\n\n        return <Container xs mdxType=\"Container\">\n            <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                <InputCpf id=\"ExampleInputCpf\" label=\"Document Number\" onChange={handleChange} value={value} mdxType=\"InputCpf\" />\n            </Segment>\n        </Container>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={InputCpf} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
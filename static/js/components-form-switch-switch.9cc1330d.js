(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{"./src/components/Form/Switch/Switch.mdx":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return g}));var o=n("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js"),a=n("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js"),l=n("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),i=n("./node_modules/react/index.js"),c=n("./node_modules/@mdx-js/react/dist/esm.js"),d=n("./node_modules/docz/dist/index.esm.js"),s=n("./src/components/index.js");m="BreakPointToggle";var m;const r={};function g(e){let t=e.components,n=Object(l.a)(e,["components"]);return Object(c.b)("wrapper",Object.assign({},r,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h1",{id:"switch"},"Switch"),Object(c.b)("h3",{id:"form-checkbox-styled-like-a-switch-onoff"},"Form checkbox styled like a switch on/off."),Object(c.b)("h2",{id:"example"},"Example"),Object(c.b)(d.c,{__position:0,__code:"() => {\n  // import React, { useState } from 'react';\n  // import { Switch, Input, Button, Container, Segment } from '@ingresse/aphrodite';\n  const [formData, setFormData] = useState({\n    newsletter: false,\n    email: '',\n  })\n\n  function handleChange({ target }) {\n    const { name, checked, value } = target\n    const fill = name === 'newsletter' ? checked : value || ''\n\n    setFormData({\n      ...formData,\n      [name]: fill,\n    })\n  }\n\n  function handleSubmit(evt) {\n    evt.preventDefault()\n\n    if (!formData.email) {\n      return\n    }\n\n    alert(\n      formData.email +\n        ' ' +\n        (formData.newsletter ? 'agree' : 'disagree') +\n        ' to receive newsletters',\n    )\n  }\n\n  return (\n    <Container styles={{ maxWidth: '320px' }}>\n      <form noValidate onSubmit={handleSubmit}>\n        <Segment padding=\"10px 0\">\n          <Input\n            name=\"email\"\n            type=\"email\"\n            label=\"Your Email\"\n            id=\"ExampleSwitchEmail\"\n            value={formData.email}\n            onChange={handleChange}\n          />\n        </Segment>\n        <Segment padding=\"10px 0\">\n          <Switch\n            name=\"newsletter\"\n            id=\"ExampleSwitchNewsletter\" // REQUIRED\n            checked={formData.newsletter}\n            onChange={handleChange}\n          >\n            Like to receive our newsletter?\n          </Switch>\n        </Segment>\n        <Segment padding=\"10px 0\">\n          <Button block type=\"submit\" disabled={!formData.email}>\n            Register\n          </Button>\n        </Segment>\n      </form>\n    </Container>\n  )\n}",__scope:{props:this?this.props:n,useState:i.useState,Playground:d.c,Props:d.d,Switch:s.U,Card:s.g,Checkbox:s.h,Container:s.l,Input:s.y,Placeholder:s.O,Segment:s.S,Row:s.R,Col:s.j,Button:s.f},mdxType:"Playground"},()=>{const e=Object(i.useState)({newsletter:!1,email:""}),t=Object(a.a)(e,2),n=t[0],l=t[1];function d({target:e}){const t=e.name,a=e.checked,i=e.value,c="newsletter"===t?a:i||"";l(Object(o.a)(Object(o.a)({},n),{},{[t]:c}))}return Object(c.b)(s.l,{styles:{maxWidth:"320px"},mdxType:"Container"},Object(c.b)("form",{noValidate:!0,onSubmit:function(e){e.preventDefault(),n.email&&alert(n.email+" "+(n.newsletter?"agree":"disagree")+" to receive newsletters")}},Object(c.b)(s.S,{padding:"10px 0",mdxType:"Segment"},Object(c.b)(s.y,{name:"email",type:"email",label:"Your Email",id:"ExampleSwitchEmail",value:n.email,onChange:d,mdxType:"Input"})),Object(c.b)(s.S,{padding:"10px 0",mdxType:"Segment"},Object(c.b)(s.U,{name:"newsletter",id:"ExampleSwitchNewsletter",checked:n.newsletter,onChange:d,mdxType:"Switch"},"Like to receive our newsletter?")),Object(c.b)(s.S,{padding:"10px 0",mdxType:"Segment"},Object(c.b)(s.f,{block:!0,type:"submit",disabled:!n.email,mdxType:"Button"},"Register"))))}),Object(c.b)("h2",{id:"advanced-example"},"Advanced Example"),Object(c.b)(d.c,{__position:1,__code:'() => {\n  const [col, setCol] = useState(4)\n  const [text, setText] = useState(\'Switch Text\')\n  const [disabled, setDisabled] = useState(false)\n  const [textAlign, setTextAlign] = useState(false)\n  const [textSmall, setTextSmall] = useState(false)\n  const [toggleAlign, setToggleAlign] = useState(false)\n  const [checked, setChecked] = useState(false)\n  const BreakPointToggle = props => (\n    <Placeholder\n      {...props}\n      block\n      as="button"\n      type="button"\n      height={20}\n      styles={{\n        cursor: \'pointer\',\n        border: 0,\n        outline: 0,\n      }}\n      title={`Toggle width to ${props.size} columns`}\n      onClick={() => setCol(props.size)}\n    />\n  )\n\n  return (\n    <Segment padding="0">\n      {window.innerWidth < 768 ? null : (\n        <Segment padding="0 0 10px">\n          <Row horizontal="center">\n            <Col xs={12} sm={2}>\n              <BreakPointToggle size={12} />\n            </Col>\n            <Col xs={12} sm={2}>\n              <BreakPointToggle size={8} />\n            </Col>\n            <Col xs={12} sm={4}>\n              <BreakPointToggle size={4} />\n            </Col>\n            <Col xs={12} sm={2}>\n              <BreakPointToggle size={8} />\n            </Col>\n            <Col xs={12} sm={2}>\n              <BreakPointToggle size={12} />\n            </Col>\n          </Row>\n        </Segment>\n      )}\n\n      <Segment padding="20px 0">\n        <Row horizontal="center">\n          <Col xs={12} sm={col}>\n            <Card>\n              <Switch\n                id="SwitchExample"\n                checked={checked}\n                onChange={() => setChecked(!checked)}\n                disabled={disabled}\n                textSmall={textSmall}\n                textAlign={textAlign ? \'right\' : \'left\'}\n                toggleAlign={toggleAlign ? \'right\' : \'left\'}\n              >\n                {text}\n              </Switch>\n            </Card>\n          </Col>\n        </Row>\n\n        <Segment padding="40px 0">\n          <Row horizontal="center">\n            <Col xs={12} sm={12} md={9}>\n              <Segment padding="10px 0">\n                <Input\n                  type="text"\n                  label="Switch Label Text"\n                  placeholder="Type something..."\n                  value={text}\n                  onChange={e => setText(e.target.value)}\n                />\n              </Segment>\n            </Col>\n          </Row>\n\n          <Row horizontal="center">\n            <Col xs={6} sm={6} md={3}>\n              <Segment padding="10px 0">\n                <Checkbox\n                  id="switchToggleAlign"\n                  value={toggleAlign ? \'right\' : \'left\'}\n                  defaultChecked={toggleAlign}\n                  onChange={e => setToggleAlign(!!e.target.checked)}\n                >\n                  Align toggle at right\n                </Checkbox>\n              </Segment>\n            </Col>\n\n            <Col xs={6} sm={6} md={3}>\n              <Segment padding="10px 0">\n                <Checkbox\n                  id="switchTextAlign"\n                  value={textAlign ? \'right\' : \'left\'}\n                  defaultChecked={textAlign}\n                  onChange={e => setTextAlign(!!e.target.checked)}\n                >\n                  Align text at right\n                </Checkbox>\n              </Segment>\n            </Col>\n\n            <Col xs={6} sm={6} md={3}>\n              <Segment padding="10px 0">\n                <Checkbox\n                  id="switchTextSmall"\n                  value={!!textSmall}\n                  defaultChecked={textSmall}\n                  onChange={e => setTextSmall(!!e.target.checked)}\n                >\n                  Text small\n                </Checkbox>\n              </Segment>\n            </Col>\n\n            <Col xs={6} sm={6} md={3}>\n              <Segment padding="10px 0">\n                <Checkbox\n                  id="switchDisabled"\n                  value={disabled}\n                  defaultChecked={disabled}\n                  onChange={e => setDisabled(!!e.target.checked)}\n                >\n                  Disabled\n                </Checkbox>\n              </Segment>\n            </Col>\n          </Row>\n        </Segment>\n      </Segment>\n    </Segment>\n  )\n}',__scope:{props:this?this.props:n,useState:i.useState,Playground:d.c,Props:d.d,Switch:s.U,Card:s.g,Checkbox:s.h,Container:s.l,Input:s.y,Placeholder:s.O,Segment:s.S,Row:s.R,Col:s.j,Button:s.f},mdxType:"Playground"},()=>{const e=Object(i.useState)(4),t=Object(a.a)(e,2),n=t[0],o=t[1],l=Object(i.useState)("Switch Text"),d=Object(a.a)(l,2),m=d[0],r=d[1],g=Object(i.useState)(!1),b=Object(a.a)(g,2),p=b[0],x=b[1],h=Object(i.useState)(!1),u=Object(a.a)(h,2),S=u[0],j=u[1],C=Object(i.useState)(!1),T=Object(a.a)(C,2),O=T[0],w=T[1],y=Object(i.useState)(!1),k=Object(a.a)(y,2),f=k[0],v=k[1],A=Object(i.useState)(!1),P=Object(a.a)(A,2),R=P[0],z=P[1],_=e=>Object(c.b)(s.O,Object.assign({},e,{block:!0,as:"button",type:"button",height:20,styles:{cursor:"pointer",border:0,outline:0},title:"Toggle width to ".concat(e.size," columns"),onClick:()=>o(e.size),mdxType:"Placeholder"}));return Object(c.b)(s.S,{padding:"0",mdxType:"Segment"},window.innerWidth<768?null:Object(c.b)(s.S,{padding:"0 0 10px",mdxType:"Segment"},Object(c.b)(s.R,{horizontal:"center",mdxType:"Row"},Object(c.b)(s.j,{xs:12,sm:2,mdxType:"Col"},Object(c.b)(_,{size:12,mdxType:"BreakPointToggle"})),Object(c.b)(s.j,{xs:12,sm:2,mdxType:"Col"},Object(c.b)(_,{size:8,mdxType:"BreakPointToggle"})),Object(c.b)(s.j,{xs:12,sm:4,mdxType:"Col"},Object(c.b)(_,{size:4,mdxType:"BreakPointToggle"})),Object(c.b)(s.j,{xs:12,sm:2,mdxType:"Col"},Object(c.b)(_,{size:8,mdxType:"BreakPointToggle"})),Object(c.b)(s.j,{xs:12,sm:2,mdxType:"Col"},Object(c.b)(_,{size:12,mdxType:"BreakPointToggle"})))),Object(c.b)(s.S,{padding:"20px 0",mdxType:"Segment"},Object(c.b)(s.R,{horizontal:"center",mdxType:"Row"},Object(c.b)(s.j,{xs:12,sm:n,mdxType:"Col"},Object(c.b)(s.g,{mdxType:"Card"},Object(c.b)(s.U,{id:"SwitchExample",checked:R,onChange:()=>z(!R),disabled:p,textSmall:O,textAlign:S?"right":"left",toggleAlign:f?"right":"left",mdxType:"Switch"},m)))),Object(c.b)(s.S,{padding:"40px 0",mdxType:"Segment"},Object(c.b)(s.R,{horizontal:"center",mdxType:"Row"},Object(c.b)(s.j,{xs:12,sm:12,md:9,mdxType:"Col"},Object(c.b)(s.S,{padding:"10px 0",mdxType:"Segment"},Object(c.b)(s.y,{type:"text",label:"Switch Label Text",placeholder:"Type something...",value:m,onChange:e=>r(e.target.value),mdxType:"Input"})))),Object(c.b)(s.R,{horizontal:"center",mdxType:"Row"},Object(c.b)(s.j,{xs:6,sm:6,md:3,mdxType:"Col"},Object(c.b)(s.S,{padding:"10px 0",mdxType:"Segment"},Object(c.b)(s.h,{id:"switchToggleAlign",value:f?"right":"left",defaultChecked:f,onChange:e=>v(!!e.target.checked),mdxType:"Checkbox"},"Align toggle at right"))),Object(c.b)(s.j,{xs:6,sm:6,md:3,mdxType:"Col"},Object(c.b)(s.S,{padding:"10px 0",mdxType:"Segment"},Object(c.b)(s.h,{id:"switchTextAlign",value:S?"right":"left",defaultChecked:S,onChange:e=>j(!!e.target.checked),mdxType:"Checkbox"},"Align text at right"))),Object(c.b)(s.j,{xs:6,sm:6,md:3,mdxType:"Col"},Object(c.b)(s.S,{padding:"10px 0",mdxType:"Segment"},Object(c.b)(s.h,{id:"switchTextSmall",value:!!O,defaultChecked:O,onChange:e=>w(!!e.target.checked),mdxType:"Checkbox"},"Text small"))),Object(c.b)(s.j,{xs:6,sm:6,md:3,mdxType:"Col"},Object(c.b)(s.S,{padding:"10px 0",mdxType:"Segment"},Object(c.b)(s.h,{id:"switchDisabled",value:p,defaultChecked:p,onChange:e=>x(!!e.target.checked),mdxType:"Checkbox"},"Disabled")))))))}),Object(c.b)("h2",{id:"properties"},"Properties"),Object(c.b)(d.d,{of:s.U,mdxType:"Props"}))}g&&g===Object(g)&&Object.isExtensible(g)&&Object.defineProperty(g,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/components/Form/Switch/Switch.mdx"}}),g.isMDXComponent=!0}}]);
//# sourceMappingURL=components-form-switch-switch.fa05da86aaf45a840a0f.js.map
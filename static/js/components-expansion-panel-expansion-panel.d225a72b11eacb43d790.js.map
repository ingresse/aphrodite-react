{"version":3,"sources":["/home/udi/front/@aphrodite/src/components/ExpansionPanel/ExpansionPanel.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","__position","__code","__scope","this","useState","Fragment","Playground","Props","ExpansionPanel","Segment","Row","Col","Button","colors","header","margin","padding","headerStyles","borderRadius","background","get","color","styles","items","id","openedPanels","setOpenedPanels","horizontal","sm","block","onClick","length","map","item","i","key","expanded","includes","expandedCallback","openedItems","filter","panel","handleHasOpened","marginBottom","of","isMDXComponent"],"mappings":"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","file":"static/js/components-expansion-panel-expansion-panel.b5a106fb.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { useState, Fragment } from 'react';\nimport { Playground, Props } from 'docz';\nimport {\n    ExpansionPanel,\n    Segment,\n    Row,\n    Col,\n    Button,\n} from '../';\nimport { colors } from '../../utils';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"expansion-panel\"\n    }}>{`Expansion Panel`}</h1>\n    <h3 {...{\n      \"id\": \"a-simple-component-to-help-out-with-expansion-panel-stuffs\"\n    }}>{`A simple component to help out with Expansion Panel stuffs.`}</h3>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <Playground __position={0} __code={'() => {\\n  // import { ExpansionPanel } from \\'@ingresse/aphrodite\\';\\n  return (\\n    <ExpansionPanel\\n      header={\\n        <Segment margin=\\\"0\\\" padding=\\\"0\\\">\\n          Expansion panel 1\\n        </Segment>\\n      }\\n    >\\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse\\n      malesuada lacus ex, sit amet blandit leo lobortis eget.\\n    </ExpansionPanel>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      Fragment,\n      Playground,\n      Props,\n      ExpansionPanel,\n      Segment,\n      Row,\n      Col,\n      Button,\n      colors\n    }} mdxType=\"Playground\">\n    {() => {\n        // import { ExpansionPanel } from '@ingresse/aphrodite';\n        return <ExpansionPanel header={<Segment margin=\"0\" padding=\"0\" mdxType=\"Segment\">\n                    Expansion panel 1\n                </Segment>} mdxType=\"ExpansionPanel\">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n        </ExpansionPanel>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"example-with-custom-styles\"\n    }}>{`Example with custom styles`}</h2>\n    <Playground __position={1} __code={'() => {\\n  const headerStyles = {\\n    borderRadius: \\'10px\\',\\n    background: colors.get(\\'bamboo\\', \\'original\\'),\\n    color: \\'#fff\\',\\n    \\'&:hover\\': {\\n      background: colors.get(\\'bamboo\\'),\\n    },\\n  }\\n  const styles = {\\n    borderRadius: \\'10px\\',\\n    background: colors.get(\\'primary\\'),\\n  }\\n\\n  return (\\n    <ExpansionPanel\\n      styles={styles}\\n      headerStyles={headerStyles}\\n      header={\\n        <Segment margin=\\\"0\\\" padding=\\\"0 20px\\\">\\n          with custom styles\\n        </Segment>\\n      }\\n    >\\n      <Segment margin=\\\"0\\\" padding=\\\"20px\\\">\\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse\\n        malesuada lacus ex, sit amet blandit leo lobortis eget.\\n      </Segment>\\n    </ExpansionPanel>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      Fragment,\n      Playground,\n      Props,\n      ExpansionPanel,\n      Segment,\n      Row,\n      Col,\n      Button,\n      colors\n    }} mdxType=\"Playground\">\n    {() => {\n        const headerStyles = {\n          borderRadius: '10px',\n          background: colors.get('bamboo', 'original'),\n          color: '#fff',\n          '&:hover': {\n            background: colors.get('bamboo')\n          }\n        };\n        const styles = {\n          borderRadius: '10px',\n          background: colors.get('primary')\n        };\n        return <ExpansionPanel styles={styles} headerStyles={headerStyles} header={<Segment margin=\"0\" padding=\"0 20px\" mdxType=\"Segment\">\n                    with custom styles\n                </Segment>} mdxType=\"ExpansionPanel\">\n            <Segment margin=\"0\" padding=\"20px\" mdxType=\"Segment\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n            </Segment>\n        </ExpansionPanel>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"with-a-advanced-state-managament\"\n    }}>{`With a advanced state managament`}</h2>\n    <Playground __position={2} __code={'() => {\\n  const items = [{ id: 1 }, { id: 2 }, { id: 3 }, { id: 4 }, { id: 5 }]\\n  const [openedPanels, setOpenedPanels] = useState([])\\n\\n  /**\\n   * Change opened status of all panels\\n   */\\n  function handleExpandedAll() {\\n    if (openedPanels.length) {\\n      setOpenedPanels([])\\n\\n      return\\n    }\\n\\n    setOpenedPanels(items.map(item => item.id))\\n  }\\n\\n  /**\\n   * Validate if has any expanded panel item\\n   *\\n   * @param {any} item\\n   */\\n  function handleHasOpened(item) {\\n    if (openedPanels.includes(item)) {\\n      const openedItems = openedPanels.filter(panel => panel !== item)\\n\\n      setOpenedPanels(openedItems)\\n\\n      return\\n    }\\n\\n    setOpenedPanels([...openedPanels, item])\\n  }\\n\\n  return (\\n    <Fragment>\\n      <Row horizontal=\\\"center\\\">\\n        <Col sm={4}>\\n          <Button block onClick={handleExpandedAll}>\\n            {`${openedPanels.length ? \\'Close\\' : \\'Open\\'} all`}\\n          </Button>\\n        </Col>\\n      </Row>\\n      <Row>\\n        {items.map((item, i) => (\\n          <ExpansionPanel\\n            key={i}\\n            expanded={openedPanels.includes(item.id)}\\n            expandedCallback={() => handleHasOpened(item.id)}\\n            styles={{ marginBottom: \\'15px\\' }}\\n            header={\\n              <Segment margin=\\\"0\\\" padding=\\\"0\\\">\\n                Expansion panel {item.id}\\n              </Segment>\\n            }\\n          >\\n            <Segment margin=\\\"0\\\" padding=\\\"0\\\">\\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n              Suspendisse malesuada lacus ex, sit amet blandit leo lobortis\\n              eget.\\n            </Segment>\\n          </ExpansionPanel>\\n        ))}\\n      </Row>\\n    </Fragment>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      Fragment,\n      Playground,\n      Props,\n      ExpansionPanel,\n      Segment,\n      Row,\n      Col,\n      Button,\n      colors\n    }} mdxType=\"Playground\">\n    {() => {\n        const items = [{\n          id: 1\n        }, {\n          id: 2\n        }, {\n          id: 3\n        }, {\n          id: 4\n        }, {\n          id: 5\n        }];\n        const [openedPanels, setOpenedPanels] = useState([]);\n        /**\n        * Change opened status of all panels\n        */\n\n        function handleExpandedAll() {\n          if (openedPanels.length) {\n            setOpenedPanels([]);\n            return;\n          }\n\n          setOpenedPanels(items.map(item => item.id));\n        }\n        /**\n        * Validate if has any expanded panel item\n        *\n        * @param {any} item\n        */\n\n\n        function handleHasOpened(item) {\n          if (openedPanels.includes(item)) {\n            const openedItems = openedPanels.filter(panel => panel !== item);\n            setOpenedPanels(openedItems);\n            return;\n          }\n\n          setOpenedPanels([...openedPanels, item]);\n        }\n\n        return <Fragment mdxType=\"Fragment\">\n            <Row horizontal=\"center\" mdxType=\"Row\">\n                <Col sm={4} mdxType=\"Col\">\n                    <Button block onClick={handleExpandedAll} mdxType=\"Button\">\n                         {`${openedPanels.length ? 'Close' : 'Open'} all`}\n                    </Button>\n                </Col>\n            </Row>\n            <Row mdxType=\"Row\">\n                {items.map((item, i) => <ExpansionPanel key={i} expanded={openedPanels.includes(item.id)} expandedCallback={() => handleHasOpened(item.id)} styles={{\n              marginBottom: '15px'\n            }} header={<Segment margin=\"0\" padding=\"0\" mdxType=\"Segment\">\n                                Expansion panel {item.id}\n                            </Segment>} mdxType=\"ExpansionPanel\">\n                        <Segment margin=\"0\" padding=\"0\" mdxType=\"Segment\">\n                            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n                        </Segment>\n                    </ExpansionPanel>)}\n            </Row>\n        </Fragment>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={ExpansionPanel} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
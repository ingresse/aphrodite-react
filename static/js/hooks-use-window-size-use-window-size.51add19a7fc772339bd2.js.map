{"version":3,"sources":["/home/udi/projects/aphrodite/src/hooks/use-window-size/useWindowSize.mdx"],"names":["name","layoutProps","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","this","Fragment","Playground","SCREEN_SIZES","Container","H1","H3","Row","Col","Segment","colors","useWindowSize","sizes","xs","Title","radius","margin","padding","background","textColor","JSON","stringify","replace","as","isMDXComponent"],"mappings":"0LAasBA,E,oYAKhBC,GALgBD,EAIM,QACR,IAIL,SAASE,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,kBACE,GAAM,uBADR,wBAGA,kBACE,GAAM,iDADR,iDAGA,uBAAK,oBAAMC,WAAW,MAClB,UAAa,gBADZ,2mBAqCL,kBACE,GAAM,WADR,WAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,qsBAAstBC,QAAS,CAChwBL,MAAOM,KAAOA,KAAKN,MAAQA,EAC3BO,oBACAC,eACAC,iBACAC,cACAC,OACAC,OACAC,QACAC,QACAC,aACAC,WACAC,mBACChB,QAAQ,eACV,WACG,IAAMiB,EAAQD,cAEZE,EACED,EADFC,GAEIC,EAAQD,EAAKP,IAAKD,IACxB,OAAO,YAAC,WAAD,CAAUV,QAAQ,YACrB,YAAC,KAAD,CAASoB,OAAQ,EAAGC,OAAO,WAAWC,QAAQ,YAAYC,WAAW,QAAQC,UAAU,QAAQxB,QAAQ,WACnG,wBACKyB,KAAKC,UAAUT,GAAOU,QAAQ,KAAM,SAI7C,YAAC,KAAD,CAASC,GAAG,SAASR,OAAQ,EAAGI,UAAU,UAAUD,WAAW,YAAYD,QAASJ,EAAK,SAAW,SAAUlB,QAAQ,WAClH,YAAC,IAAD,CAAWA,QAAQ,aACf,YAACmB,EAAD,CAAOE,OAAO,IAAIrB,QAAQ,SAA1B,kD,iMAYpBH,EAAWgC,gBAAiB","file":"static/js/hooks-use-window-size-use-window-size.c504f8f9.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Fragment } from 'react';\nimport { Playground } from 'docz';\nimport { SCREEN_SIZES } from '../../constants';\nimport { Container, H1, H3, Row, Col, Segment } from '../../components';\nimport { colors } from '../../utils';\nimport useWindowSize from './useWindowSize';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst Title = makeShortcode(\"Title\");\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"hook--usewindowsize\"\n    }}>{`Hook | useWindowSize`}</h1>\n    <h3 {...{\n      \"id\": \"simple-hook-to-return-window-width-and-height\"\n    }}>{`Simple hook to return window width and height`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import {\n    useWindowSize,\n    H1,\n    H3,\n    Container,\n    Segment,\n} from '@ingresse/aphrodite';\n\nfunction Header() {\n    const {\n        xs,\n        sm,\n        md,\n        lg,\n        xl,\n        width,\n        height,\n    } = useWindowSize();\n\n    const Title = (xs ? H3 : H1);\n\n    return (\n        <Segment\n            as=\"header\"\n            padding={xs ? '20px 0' : '40px 0'}>\n            <Container>\n                <Title\n                    as=\"h1\">\n                    Sales Report\n                </Title>\n            </Container>\n        </Segment>\n    );\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <Playground __position={0} __code={'() => {\\n  const sizes = useWindowSize()\\n  const { xs } = sizes\\n  const Title = xs ? H3 : H1\\n  return (\\n    <Fragment>\\n      <Segment\\n        radius={5}\\n        margin=\\\"0 0 20px\\\"\\n        padding=\\\"15px 20px\\\"\\n        background=\\\"smoke\\\"\\n        textColor=\\\"black\\\"\\n      >\\n        <code>{JSON.stringify(sizes).replace(/,/g, \\',\\\\n\\')}</code>\\n      </Segment>\\n\\n      <Segment\\n        as=\\\"header\\\"\\n        radius={5}\\n        textColor=\\\"inverse\\\"\\n        background=\\\"supernova\\\"\\n        padding={xs ? \\'20px 0\\' : \\'40px 0\\'}\\n      >\\n        <Container>\\n          <Title margin=\\\"0\\\">Component rendered based on hook values</Title>\\n        </Container>\\n      </Segment>\\n    </Fragment>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      Fragment,\n      Playground,\n      SCREEN_SIZES,\n      Container,\n      H1,\n      H3,\n      Row,\n      Col,\n      Segment,\n      colors,\n      useWindowSize\n    }} mdxType=\"Playground\">\n    {() => {\n        const sizes = useWindowSize();\n        const {\n          xs\n        } = sizes;\n        const Title = xs ? H3 : H1;\n        return <Fragment mdxType=\"Fragment\">\n            <Segment radius={5} margin=\"0 0 20px\" padding=\"15px 20px\" background=\"smoke\" textColor=\"black\" mdxType=\"Segment\">\n                <code>\n                    {JSON.stringify(sizes).replace(/,/g, ',\\n')}\n                </code>\n            </Segment>\n\n            <Segment as=\"header\" radius={5} textColor=\"inverse\" background=\"supernova\" padding={xs ? '20px 0' : '40px 0'} mdxType=\"Segment\">\n                <Container mdxType=\"Container\">\n                    <Title margin=\"0\" mdxType=\"Title\">\n                        Component rendered based on hook values\n                    </Title>\n                </Container>\n            </Segment>\n        </Fragment>;\n      }}\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
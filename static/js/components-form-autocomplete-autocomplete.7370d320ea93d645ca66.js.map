{"version":3,"sources":["/home/udi/front/@aphrodite/src/components/Form/Autocomplete/Autocomplete.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","this","useState","Playground","Props","Autocomplete","Container","Segment","Row","Col","selected","setSelected","xs","padding","id","className","placeholder","onChange","value","options","label","error","isDisabled","input","setInput","selectOptions","isAsync","loadOptions","inputValue","Promise","resolve","setTimeout","filter","i","toLowerCase","includes","filterColors","defaultOptions","onInputChange","newValue","replace","isMulti","of","isMDXComponent"],"mappings":"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","file":"static/js/components-form-autocomplete-autocomplete.fe3ddfe5.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { useState } from 'react';\nimport { Playground, Props } from 'docz';\nimport {\n    Autocomplete,\n    Container,\n    Segment,\n    Row,\n    Col,\n} from '../../';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"form--autocomplete\"\n    }}>{`Form | Autocomplete`}</h1>\n    <h3 {...{\n      \"id\": \"a-simple-style-customization-of-awesome-library-react-select\"\n    }}>{`A simple style customization of awesome library `}<a parentName=\"h3\" {...{\n        \"href\": \"https://npmjs.com/package/react-select\"\n      }}>{`react-select`}</a>{`.`}</h3>\n    <h2 {...{\n      \"id\": \"sync\"\n    }}>{`Sync`}</h2>\n    <Playground __position={0} __code={'() => {\\n  const [selected, setSelected] = useState(null)\\n  const selectOptions = [\\n    { value: \\'chocolate\\', label: \\'Chocolate\\' },\\n    { value: \\'strawberry\\', label: \\'Strawberry\\' },\\n    { value: \\'vanilla\\', label: \\'Vanilla\\' },\\n  ]\\n  /**\\n   * Handle Selected option\\n   *\\n   * @param {object} evt\\n   */\\n  function handleSelected(selected) {\\n    setSelected(selected.value)\\n  }\\n\\n  return (\\n    <Container xs>\\n      <Segment padding=\\\"10px 0\\\">Selected {selected}</Segment>\\n\\n      <Segment padding=\\\"10px 0\\\">\\n        <Autocomplete\\n          id=\\\"aph-autoselect1\\\"\\n          className=\\\"aph aph-autoselect\\\"\\n          placeholder=\\\"Custom placeholder\\\"\\n          onChange={handleSelected}\\n          options={selectOptions}\\n          error={selected === \\'vanilla\\' ? \\'Erro aqui\\' : false}\\n        />\\n      </Segment>\\n    </Container>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      Playground,\n      Props,\n      Autocomplete,\n      Container,\n      Segment,\n      Row,\n      Col\n    }} mdxType=\"Playground\">\n    {() => {\n        const [selected, setSelected] = useState(null);\n        const selectOptions = [{\n          value: \"chocolate\",\n          label: \"Chocolate\"\n        }, {\n          value: \"strawberry\",\n          label: \"Strawberry\"\n        }, {\n          value: \"vanilla\",\n          label: \"Vanilla\"\n        }];\n        /**\n         * Handle Selected option\n         *\n         * @param {object} evt\n         */\n\n        function handleSelected(selected) {\n          setSelected(selected.value);\n        }\n\n        return <Container xs mdxType=\"Container\">\n            <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                Selected {selected}\n            </Segment>\n\n            <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                <Autocomplete id=\"aph-autoselect1\" className=\"aph aph-autoselect\" placeholder=\"Custom placeholder\" onChange={handleSelected} options={selectOptions} error={selected === \"vanilla\" ? \"Erro aqui\" : false} mdxType=\"Autocomplete\" />\n            </Segment>\n        </Container>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"disabled\"\n    }}>{`Disabled`}</h2>\n    <Playground __position={1} __code={'<Container xs>\\n  <Segment padding=\\\"10px 0\\\">\\n    <Autocomplete isDisabled />\\n  </Segment>\\n</Container>'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      Playground,\n      Props,\n      Autocomplete,\n      Container,\n      Segment,\n      Row,\n      Col\n    }} mdxType=\"Playground\">\n    <Container xs mdxType=\"Container\">\n        <Segment padding=\"10px 0\" mdxType=\"Segment\">\n            <Autocomplete isDisabled mdxType=\"Autocomplete\" />\n        </Segment>\n    </Container>\n    </Playground>\n    <h2 {...{\n      \"id\": \"async\"\n    }}>{`Async`}</h2>\n    <Playground __position={2} __code={'() => {\\n  const [input, setInput] = useState(\\'\\')\\n  const [selected, setSelected] = useState(null)\\n  const selectOptions = [\\n    { value: \\'chocolate\\', label: \\'Chocolate\\' },\\n    { value: \\'strawberry\\', label: \\'Strawberry\\' },\\n    { value: \\'vanilla\\', label: \\'Vanilla\\' },\\n  ]\\n  const filterColors = inputValue => {\\n    return selectOptions.filter(i =>\\n      i.label.toLowerCase().includes(inputValue.toLowerCase()),\\n    )\\n  }\\n\\n  const promiseOptions = inputValue =>\\n    new Promise(resolve => {\\n      setTimeout(() => {\\n        resolve(filterColors(inputValue))\\n      }, 1000)\\n    })\\n\\n  /**\\n   * Handle Selected option\\n   *\\n   * @param {object} evt\\n   */\\n  function handleSelected(selected) {\\n    setSelected(selected.value)\\n  }\\n\\n  /**\\n   * Handle Input Value\\n   *\\n   * @param {string} newValue\\n   */\\n  function handleInput(newValue) {\\n    const inputValue = newValue.replace(/\\\\W/g, \\'\\')\\n    setInput(inputValue)\\n\\n    return inputValue\\n  }\\n\\n  return (\\n    <Container xs>\\n      <Segment padding=\\\"10px 0\\\">Input value: {input}</Segment>\\n      <Segment padding=\\\"10px 0\\\">Selected: {selected}</Segment>\\n      <Segment padding=\\\"10px 0\\\">\\n        <Autocomplete\\n          isAsync\\n          loadOptions={promiseOptions}\\n          defaultOptions={selectOptions}\\n          onInputChange={handleInput}\\n          onChange={handleSelected}\\n          error={selected === \\'vanilla\\' ? \\'Erro aqui\\' : false}\\n        />\\n      </Segment>\\n    </Container>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      Playground,\n      Props,\n      Autocomplete,\n      Container,\n      Segment,\n      Row,\n      Col\n    }} mdxType=\"Playground\">\n    {() => {\n        const [input, setInput] = useState(\"\");\n        const [selected, setSelected] = useState(null);\n        const selectOptions = [{\n          value: \"chocolate\",\n          label: \"Chocolate\"\n        }, {\n          value: \"strawberry\",\n          label: \"Strawberry\"\n        }, {\n          value: \"vanilla\",\n          label: \"Vanilla\"\n        }];\n\n        const filterColors = inputValue => {\n          return selectOptions.filter(i => i.label.toLowerCase().includes(inputValue.toLowerCase()));\n        };\n\n        const promiseOptions = inputValue => new Promise(resolve => {\n          setTimeout(() => {\n            resolve(filterColors(inputValue));\n          }, 1000);\n        });\n        /**\n         * Handle Selected option\n         *\n         * @param {object} evt\n         */\n\n\n        function handleSelected(selected) {\n          setSelected(selected.value);\n        }\n        /**\n         * Handle Input Value\n         *\n         * @param {string} newValue\n         */\n\n\n        function handleInput(newValue) {\n          const inputValue = newValue.replace(/\\W/g, \"\");\n          setInput(inputValue);\n          return inputValue;\n        }\n\n        return <Container xs mdxType=\"Container\">\n            <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                Input value: {input}\n            </Segment>\n            <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                Selected: {selected}\n            </Segment>\n            <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                <Autocomplete isAsync loadOptions={promiseOptions} defaultOptions={selectOptions} onInputChange={handleInput} onChange={handleSelected} error={selected === \"vanilla\" ? \"Erro aqui\" : false} mdxType=\"Autocomplete\" />\n            </Segment>\n        </Container>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"multiselect\"\n    }}>{`Multiselect`}</h2>\n    <Playground __position={3} __code={'() => {\\n  const [input, setInput] = useState(\\'\\')\\n  const [selected, setSelected] = useState(null)\\n  const selectOptions = [\\n    { value: \\'chocolate\\', label: \\'Chocolate\\' },\\n    { value: \\'strawberry\\', label: \\'Strawberry\\' },\\n    { value: \\'vanilla\\', label: \\'Vanilla\\' },\\n  ]\\n  const filterColors = inputValue => {\\n    return selectOptions.filter(i =>\\n      i.label.toLowerCase().includes(inputValue.toLowerCase()),\\n    )\\n  }\\n\\n  const promiseOptions = inputValue =>\\n    new Promise(resolve => {\\n      setTimeout(() => {\\n        resolve(filterColors(inputValue))\\n      }, 1000)\\n    })\\n\\n  /**\\n   * Handle Selected option\\n   *\\n   * @param {object} evt\\n   */\\n  function handleSelected({ value }) {\\n    setSelected(value)\\n  }\\n\\n  /**\\n   * Handle Input Value\\n   *\\n   * @param {string} newValue\\n   */\\n  function handleInput(newValue) {\\n    const inputValue = newValue.replace(/\\\\W/g, \\'\\')\\n\\n    setInput(inputValue)\\n\\n    return inputValue\\n  }\\n\\n  return (\\n    <Container xs>\\n      <Segment padding=\\\"10px 0\\\">Input value: {input}</Segment>\\n      <Segment padding=\\\"10px 0\\\">Selected: {selected}</Segment>\\n      <Segment padding=\\\"10px 0\\\">\\n        <Autocomplete\\n          isAsync\\n          isMulti\\n          loadOptions={promiseOptions}\\n          defaultOptions={selectOptions}\\n          onInputChange={handleInput}\\n          onChange={handleSelected}\\n          error={selected === \\'vanilla\\' ? \\'Error\\' : false}\\n        />\\n      </Segment>\\n    </Container>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      Playground,\n      Props,\n      Autocomplete,\n      Container,\n      Segment,\n      Row,\n      Col\n    }} mdxType=\"Playground\">\n    {() => {\n        const [input, setInput] = useState('');\n        const [selected, setSelected] = useState(null);\n        const selectOptions = [{\n          value: \"chocolate\",\n          label: \"Chocolate\"\n        }, {\n          value: \"strawberry\",\n          label: \"Strawberry\"\n        }, {\n          value: \"vanilla\",\n          label: \"Vanilla\"\n        }];\n\n        const filterColors = inputValue => {\n          return selectOptions.filter(i => i.label.toLowerCase().includes(inputValue.toLowerCase()));\n        };\n\n        const promiseOptions = inputValue => new Promise(resolve => {\n          setTimeout(() => {\n            resolve(filterColors(inputValue));\n          }, 1000);\n        });\n        /**\n         * Handle Selected option\n         *\n         * @param {object} evt\n         */\n\n\n        function handleSelected({\n          value\n        }) {\n          setSelected(value);\n        }\n        /**\n         * Handle Input Value\n         *\n         * @param {string} newValue\n         */\n\n\n        function handleInput(newValue) {\n          const inputValue = newValue.replace(/\\W/g, \"\");\n          setInput(inputValue);\n          return inputValue;\n        }\n\n        return <Container xs mdxType=\"Container\">\n            <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                Input value: {input}\n            </Segment>\n            <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                Selected: {selected}\n            </Segment>\n            <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                <Autocomplete isAsync isMulti loadOptions={promiseOptions} defaultOptions={selectOptions} onInputChange={handleInput} onChange={handleSelected} error={selected === 'vanilla' ? 'Error' : false} mdxType=\"Autocomplete\" />\n            </Segment>\n        </Container>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={Autocomplete} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
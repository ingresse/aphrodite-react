{"version":3,"sources":["/Users/udi/ingresse/aphrodite-react/src/components/Toast/Toast.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","this","Playground","Props","Container","Row","Col","Segment","Button","ToastsContainer","toast","SCREEN_SIZES","hideProgressBar","autoClose","styles","top","right","vertical","horizontal","xs","sm","padding","block","color","onClick","inverse","success","info","warning","error","isMDXComponent"],"mappings":"geAWMA,EAAc,GAIL,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,kBACE,GAAM,UADR,UAGA,kBACE,GAAM,wFADR,6CAEiD,iBAAGC,WAAW,KAC3D,KAAQ,6CACP,sBAAQA,WAAW,KAAnB,mBAJL,mCAKA,kBACE,GAAM,8CADR,eAEmB,iBAAGA,WAAW,KAC7B,KAAQ,6CADO,iBAFnB,sBAKA,kBACE,GAAM,WADR,WAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,k0EAAu2EC,QAAS,CACj5EL,MAAOM,KAAOA,KAAKN,MAAQA,EAC3BO,eACAC,UACAC,cACAC,SACAC,QACAC,aACAC,WACAC,qBACAC,WACAC,kBACCf,QAAQ,eACV,WAyBG,OAAO,YAAC,IAAD,CAAWA,QAAQ,aACtB,YAAC,KAAD,CAAiBgB,iBAAiB,EAAMC,WAAW,EAAOC,OAAQ,CAClEC,IAAK,OACLC,MAAO,QACNpB,QAAQ,oBACT,YAAC,KAAD,CAAKqB,SAAS,SAASC,WAAW,SAAStB,QAAQ,OAC/C,YAAC,IAAD,CAAKuB,GAAI,EAAGC,GAAI,EAAGxB,QAAQ,OACvB,YAAC,KAAD,CAASyB,QAAQ,SAASzB,QAAQ,WAC9B,YAAC,IAAD,CAAQ0B,OAAK,EAACC,MAAM,OAAOC,QAhC3C,WACEd,aAAM,+BA+B0Dd,QAAQ,UAA1D,aAKR,YAAC,IAAD,CAAKuB,GAAI,EAAGC,GAAI,EAAGxB,QAAQ,OACvB,YAAC,KAAD,CAASyB,QAAQ,SAASzB,QAAQ,WAC9B,YAAC,IAAD,CAAQ0B,OAAK,EAACC,MAAM,QAAQC,QAnC5C,WACEd,KAAMe,QAAQ,+BAkCmD7B,QAAQ,UAA3D,cAOZ,YAAC,KAAD,CAAKqB,SAAS,SAASC,WAAW,SAAStB,QAAQ,OAC/C,YAAC,IAAD,CAAKuB,GAAI,EAAGC,GAAI,EAAGxB,QAAQ,OACvB,YAAC,KAAD,CAASyB,QAAQ,SAASzB,QAAQ,WAC9B,YAAC,IAAD,CAAQ0B,OAAK,EAACC,MAAM,UAAUC,QAzC9C,WACEd,KAAMgB,QAAQ,4FAwCqD9B,QAAQ,UAA7D,aAKR,YAAC,IAAD,CAAKuB,GAAI,EAAGC,GAAI,EAAGxB,QAAQ,OACvB,YAAC,KAAD,CAASyB,QAAQ,SAASzB,QAAQ,WAC9B,YAAC,IAAD,CAAQ0B,OAAK,EAACC,MAAM,YAAYC,QA5ChD,WACEd,KAAMiB,KAAK,qDA2CuD/B,QAAQ,UAA5D,UAKR,YAAC,IAAD,CAAKuB,GAAI,EAAGC,GAAI,EAAGxB,QAAQ,OACvB,YAAC,KAAD,CAASyB,QAAQ,SAASzB,QAAQ,WAC9B,YAAC,IAAD,CAAQ0B,OAAK,EAACC,MAAM,UAAUC,QA/C9C,WACEd,KAAMkB,QAAQ,mDA8CqDhC,QAAQ,UAA7D,aAKR,YAAC,IAAD,CAAKuB,GAAI,EAAGC,GAAI,EAAGxB,QAAQ,OACvB,YAAC,KAAD,CAASyB,QAAQ,SAASzB,QAAQ,WAC9B,YAAC,IAAD,CAAQ0B,OAAK,EAACC,MAAM,QAAQC,QAlD5C,WACEd,KAAMmB,MAAM,oGAiDmDjC,QAAQ,UAAzD,iB,oLAaxBH,EAAWqC,gBAAiB","file":"static/js/components-toast-toast.0b63f1c2.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Container, Row, Col, Segment, Button, ToastsContainer, toast } from '../';\nimport { SCREEN_SIZES } from '../../constants';\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"toasts\"\n    }}>{`Toasts`}</h1>\n    <h3 {...{\n      \"id\": \"just-an-implementation-of-awesome-library-react-toastify-with-aphrodites-definitions\"\n    }}>{`Just an implementation of awesome library `}<a parentName=\"h3\" {...{\n        \"href\": \"https://github.com/fkhadra/react-toastify\"\n      }}><strong parentName=\"a\">{`React Toastify`}</strong></a>{`, with Aphrodite's definitions.`}</h3>\n    <h3 {...{\n      \"id\": \"consult-the-documentation-for-more-options\"\n    }}>{`Consult the `}<a parentName=\"h3\" {...{\n        \"href\": \"https://github.com/fkhadra/react-toastify\"\n      }}>{`documentation`}</a>{` for more options.`}</h3>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <Playground __position={0} __code={'() => {\\n  function toastDefault() {\\n    toast(\\'Hello from Aphrodite React\\')\\n  }\\n  function toastInverse() {\\n    toast.inverse(\\'Hello from Aphrodite React\\')\\n  }\\n\\n  function toastSuccess() {\\n    toast.success(\\n      \\'We are using React Toastify, an awesome library, customized with our styles definitions\\',\\n    )\\n  }\\n\\n  function toastInfo() {\\n    toast.info(\\'You can use React Toastify directly, if you want\\')\\n  }\\n\\n  function toastWarning() {\\n    toast.warning(\\\"But, isn\\'t have our style, if you use directly\\\")\\n  }\\n\\n  function toastError() {\\n    toast.error(\\n      \\\"And maybe doesn\\'t make sense use our library, if you want to use React Toastify directly - haha\\\",\\n    )\\n  }\\n\\n  return (\\n    <Container>\\n      <ToastsContainer\\n        hideProgressBar={true}\\n        autoClose={false}\\n        styles={{\\n          top: \\'45px\\',\\n          right: \\'45px\\',\\n        }}\\n      />\\n      <Row vertical=\\\"center\\\" horizontal=\\\"center\\\">\\n        <Col xs={6} sm={3}>\\n          <Segment padding=\\\"10px 0\\\">\\n            <Button block color=\\\"grey\\\" onClick={toastDefault}>\\n              Default\\n            </Button>\\n          </Segment>\\n        </Col>\\n        <Col xs={6} sm={3}>\\n          <Segment padding=\\\"10px 0\\\">\\n            <Button block color=\\\"black\\\" onClick={toastInverse}>\\n              Inverse\\n            </Button>\\n          </Segment>\\n        </Col>\\n      </Row>\\n\\n      <Row vertical=\\\"center\\\" horizontal=\\\"center\\\">\\n        <Col xs={6} sm={3}>\\n          <Segment padding=\\\"10px 0\\\">\\n            <Button block color=\\\"success\\\" onClick={toastSuccess}>\\n              Success\\n            </Button>\\n          </Segment>\\n        </Col>\\n        <Col xs={6} sm={3}>\\n          <Segment padding=\\\"10px 0\\\">\\n            <Button block color=\\\"secondary\\\" onClick={toastInfo}>\\n              Info\\n            </Button>\\n          </Segment>\\n        </Col>\\n        <Col xs={6} sm={3}>\\n          <Segment padding=\\\"10px 0\\\">\\n            <Button block color=\\\"warning\\\" onClick={toastWarning}>\\n              Warning\\n            </Button>\\n          </Segment>\\n        </Col>\\n        <Col xs={6} sm={3}>\\n          <Segment padding=\\\"10px 0\\\">\\n            <Button block color=\\\"error\\\" onClick={toastError}>\\n              Error\\n            </Button>\\n          </Segment>\\n        </Col>\\n      </Row>\\n    </Container>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Container,\n      Row,\n      Col,\n      Segment,\n      Button,\n      ToastsContainer,\n      toast,\n      SCREEN_SIZES\n    }} mdxType=\"Playground\">\n    {() => {\n        function toastDefault() {\n          toast(\"Hello from Aphrodite React\");\n        }\n\n        function toastInverse() {\n          toast.inverse(\"Hello from Aphrodite React\");\n        }\n\n        function toastSuccess() {\n          toast.success(\"We are using React Toastify, an awesome library, customized with our styles definitions\");\n        }\n\n        function toastInfo() {\n          toast.info(\"You can use React Toastify directly, if you want\");\n        }\n\n        function toastWarning() {\n          toast.warning(\"But, isn't have our style, if you use directly\");\n        }\n\n        function toastError() {\n          toast.error(\"And maybe doesn't make sense use our library, if you want to use React Toastify directly - haha\");\n        }\n\n        return <Container mdxType=\"Container\">\n            <ToastsContainer hideProgressBar={true} autoClose={false} styles={{\n            top: '45px',\n            right: '45px'\n          }} mdxType=\"ToastsContainer\" />\n            <Row vertical=\"center\" horizontal=\"center\" mdxType=\"Row\">\n                <Col xs={6} sm={3} mdxType=\"Col\">\n                    <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                        <Button block color=\"grey\" onClick={toastDefault} mdxType=\"Button\">\n                            Default\n                        </Button>\n                    </Segment>\n                </Col>\n                <Col xs={6} sm={3} mdxType=\"Col\">\n                    <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                        <Button block color=\"black\" onClick={toastInverse} mdxType=\"Button\">\n                            Inverse\n                        </Button>\n                    </Segment>\n                </Col>\n            </Row>\n\n            <Row vertical=\"center\" horizontal=\"center\" mdxType=\"Row\">\n                <Col xs={6} sm={3} mdxType=\"Col\">\n                    <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                        <Button block color=\"success\" onClick={toastSuccess} mdxType=\"Button\">\n                            Success\n                        </Button>\n                    </Segment>\n                </Col>\n                <Col xs={6} sm={3} mdxType=\"Col\">\n                    <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                        <Button block color=\"secondary\" onClick={toastInfo} mdxType=\"Button\">\n                            Info\n                        </Button>\n                    </Segment>\n                </Col>\n                <Col xs={6} sm={3} mdxType=\"Col\">\n                    <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                        <Button block color=\"warning\" onClick={toastWarning} mdxType=\"Button\">\n                            Warning\n                        </Button>\n                    </Segment>\n                </Col>\n                <Col xs={6} sm={3} mdxType=\"Col\">\n                    <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                        <Button block color=\"error\" onClick={toastError} mdxType=\"Button\">\n                            Error\n                        </Button>\n                    </Segment>\n                </Col>\n            </Row>\n        </Container>;\n      }}\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
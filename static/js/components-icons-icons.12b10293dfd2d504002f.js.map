{"version":3,"sources":["/Users/udi/ingresse/aphrodite-react/src/components/Icons/IconExample.jsx","/Users/udi/ingresse/aphrodite-react/src/components/Icons/Icons.mdx"],"names":["IconExample","props","color","slug","markup","children","styled","styles","display","width","actions","data-clipboard-text","hover","boxShadow","margin","backgroundColor","colors","get","vertical","horizontal","xs","sm","lg","textAlign","bold","small","center","layoutProps","MDXContent","components","mdxType","parentName","__position","__code","__scope","this","useState","Fragment","Playground","Props","Icon","Input","Select","Card","Row","Col","Segment","ICONS","size","setSize","setColor","term","setTerm","onSubmit","evt","preventDefault","padding","first","last","id","type","autoComplete","label","length","value","onChange","Object","keys","shades","map","colorKey","key","ICON_SLUG","INDEX","toLowerCase","includes","iconMarkup","md","lineHeight","parseInt","height","of","isMDXComponent"],"mappings":"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","file":"static/js/components-icons-icons.49aeb4b3.js","sourcesContent":["/* Core Packages */\nimport React, { Fragment } from 'react';\n\n/* Utilites */\nimport { colors } from '../../utils';\n\n/* Helper Components */\nimport { Card, Row, Col, Text, HoverActions, Clipboard } from '../';\n\n/* Component Itself */\nfunction IconExample (props) {\n    const {\n        color,\n        slug,\n        markup,\n        children,\n    } = props;\n\n    return (\n        <HoverActions\n            styled\n            styles={{ display: 'block', width: 'auto' }}\n            actions={(\n                <Fragment>\n                    {(!slug) ? (null) : (\n                        <Clipboard\n                            styled\n                            data-clipboard-text={slug}>\n                            Copy Slug\n                        </Clipboard>\n                    )}\n                    <Clipboard\n                        styled\n                        data-clipboard-text={markup}>\n                        Copy Markup\n                    </Clipboard>\n                </Fragment>\n            )}>\n            <Card\n                hover\n                boxShadow\n                styles={{\n                    margin: '0 0 20px',\n                    backgroundColor: ((color === 'translucid') ? colors.get('oil') : null),\n                }}>\n                <Row vertical=\"middle\" horizontal=\"center\">\n                    <Col xs={!slug ? 12 : 4} sm={!slug ? 12 : 4} lg={!slug ? 12 : 3} styles={{ textAlign: 'center', color: colors.get(color) }}>\n                        {children}\n                    </Col>\n                    {(!slug) ? (null) : (\n                        <Col xs={8} sm={8} lg={9}>\n                            <Text bold small center color=\"mercury\">\n                                {slug}\n                            </Text>\n                        </Col>\n                    )}\n                </Row>\n            </Card>\n        </HoverActions>\n    );\n}\n\nexport default IconExample;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { useState, Fragment } from 'react';\nimport { Playground, Props } from 'docz';\nimport { Icon, Input, Select, Card, Row, Col, Segment } from '../';\nimport { ICONS } from '../../constants';\nimport { colors } from '../../utils';\nimport IconExample from './IconExample';\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"icon\"\n    }}>{`Icon`}</h1>\n    <h4 {...{\n      \"id\": \"simple-svg-icons\"\n    }}>{`Simple SVG icons`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { Icon } from '@ingresse/aphrodite';\n...\n<Icon\n    slug=\"arrow-up\"\n    size={30}\n    color=\"ruby\"\n/>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"list\"\n    }}>{`List`}</h2>\n    <Playground __position={0} __code={'() => {\\n  /**\\n   * Local values\\n   */\\n  const [size, setSize] = useState(30)\\n  const [color, setColor] = useState(\\'supernova\\')\\n  const [term, setTerm] = useState(\\'\\')\\n  return (\\n    <Fragment>\\n      <form onSubmit={evt => evt.preventDefault()}>\\n        <Segment padding=\\\"0\\\">\\n          <Row vertical=\\\"middle\\\" horizontal=\\\"center\\\">\\n            <Col xs={12} sm={6} first=\\\"sm\\\" last=\\\"xs\\\">\\n              <Segment padding=\\\"0 0 20px\\\">\\n                <Input\\n                  id=\\\"aph_icons_search\\\"\\n                  type=\\\"search\\\"\\n                  autoComplete=\\\"off\\\"\\n                  label={`Search over ${ICONS.length} icons`}\\n                  value={term}\\n                  onChange={(evt, value) => setTerm(value)}\\n                />\\n              </Segment>\\n            </Col>\\n            <Col xs={6} sm={3}>\\n              <Segment padding=\\\"0 0 20px\\\">\\n                <Select\\n                  id=\\\"aph_icons_size\\\"\\n                  label=\\\"Size\\\"\\n                  value={size}\\n                  onChange={(evt, value) => setSize(value)}\\n                >\\n                  <option value={20}>20</option>\\n                  <option value={30}>30</option>\\n                  <option value={40}>40</option>\\n                </Select>\\n              </Segment>\\n            </Col>\\n            <Col xs={6} sm={3}>\\n              <Segment padding=\\\"0 0 20px\\\">\\n                <Select\\n                  id=\\\"aph_icons_color\\\"\\n                  label=\\\"Color\\\"\\n                  value={color}\\n                  onChange={(evt, value) => setColor(value)}\\n                >\\n                  {Object.keys(colors.shades).map(colorKey => (\\n                    <option\\n                      key={`aph_icons_color_${colorKey}`}\\n                      value={colorKey}\\n                    >\\n                      {colorKey}\\n                    </option>\\n                  ))}\\n                </Select>\\n              </Segment>\\n            </Col>\\n          </Row>\\n        </Segment>\\n\\n        <Row vertical=\\\"middle\\\" horizontal=\\\"center\\\">\\n          {ICONS.map((ICON_SLUG, INDEX) => {\\n            if (\\n              term &&\\n              !ICON_SLUG.toLowerCase().includes(term.toLowerCase())\\n            ) {\\n              return null\\n            }\\n\\n            const iconMarkup = `<Icon slug=\\\"${ICON_SLUG}\\\" size={${size}} color=\\\"${color}\\\" />`\\n            return (\\n              <Col\\n                xs={12}\\n                sm={4}\\n                md={3}\\n                key={`aph_icon_${INDEX}`}\\n                styles={{ lineHeight: 0 }}\\n              >\\n                <IconExample\\n                  id={`aph_icon_${INDEX}`}\\n                  color={color}\\n                  slug={ICON_SLUG}\\n                  markup={iconMarkup}\\n                >\\n                  <Icon\\n                    slug={ICON_SLUG}\\n                    size={parseInt(size, 10)}\\n                    color={color}\\n                    {...props}\\n                  />\\n                </IconExample>\\n              </Col>\\n            )\\n          })}\\n        </Row>\\n      </form>\\n    </Fragment>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      Fragment,\n      Playground,\n      Props,\n      Icon,\n      Input,\n      Select,\n      Card,\n      Row,\n      Col,\n      Segment,\n      ICONS,\n      colors,\n      IconExample\n    }} mdxType=\"Playground\">\n    {() => {\n        /**\n         * Local values\n         */\n        const [size, setSize] = useState(30);\n        const [color, setColor] = useState('supernova');\n        const [term, setTerm] = useState('');\n        return <Fragment mdxType=\"Fragment\">\n            <form onSubmit={evt => evt.preventDefault()}>\n                <Segment padding=\"0\" mdxType=\"Segment\">\n                    <Row vertical=\"middle\" horizontal=\"center\" mdxType=\"Row\">\n                        <Col xs={12} sm={6} first=\"sm\" last=\"xs\" mdxType=\"Col\">\n                            <Segment padding=\"0 0 20px\" mdxType=\"Segment\">\n                                <Input id=\"aph_icons_search\" type=\"search\" autoComplete=\"off\" label={`Search over ${ICONS.length} icons`} value={term} onChange={(evt, value) => setTerm(value)} mdxType=\"Input\" />\n                            </Segment>\n                        </Col>\n                        <Col xs={6} sm={3} mdxType=\"Col\">\n                            <Segment padding=\"0 0 20px\" mdxType=\"Segment\">\n                                <Select id=\"aph_icons_size\" label=\"Size\" value={size} onChange={(evt, value) => setSize(value)} mdxType=\"Select\">\n                                    <option value={20}>\n                                        20\n                                    </option>\n                                    <option value={30}>\n                                        30\n                                    </option>\n                                    <option value={40}>\n                                        40\n                                    </option>\n                                </Select>\n                            </Segment>\n                        </Col>\n                        <Col xs={6} sm={3} mdxType=\"Col\">\n                            <Segment padding=\"0 0 20px\" mdxType=\"Segment\">\n                                <Select id=\"aph_icons_color\" label=\"Color\" value={color} onChange={(evt, value) => setColor(value)} mdxType=\"Select\">\n                                    {Object.keys(colors.shades).map(colorKey => <option key={`aph_icons_color_${colorKey}`} value={colorKey}>\n                                            {colorKey}\n                                        </option>)}\n                                </Select>\n                            </Segment>\n                        </Col>\n                    </Row>\n                </Segment>\n\n                <Row vertical=\"middle\" horizontal=\"center\" mdxType=\"Row\">\n                    {ICONS.map((ICON_SLUG, INDEX) => {\n                if (term && !ICON_SLUG.toLowerCase().includes(term.toLowerCase())) {\n                  return null;\n                }\n\n                const iconMarkup = `<Icon slug=\"${ICON_SLUG}\" size={${size}} color=\"${color}\" />`;\n                return <Col xs={12} sm={4} md={3} key={`aph_icon_${INDEX}`} styles={{\n                  lineHeight: 0\n                }} mdxType=\"Col\">\n                                <IconExample id={`aph_icon_${INDEX}`} color={color} slug={ICON_SLUG} markup={iconMarkup} mdxType=\"IconExample\">\n                                    <Icon slug={ICON_SLUG} size={parseInt(size, 10)} color={color} {...props} mdxType=\"Icon\" />\n                                </IconExample>\n                            </Col>;\n              })}\n                </Row>\n            </form>\n        </Fragment>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"width--height\"\n    }}>{`Width & Height`}</h2>\n    <Playground __position={1} __code={'<Segment padding=\\\"20px 0 0\\\">\\n  <Row vertical=\\\"middle\\\" horizontal=\\\"center\\\">\\n    <Col xs={12} sm={6} md={3} styles={{ lineHeight: 0 }}>\\n      <IconExample\\n        markup={`<Icon slug=\\\"loading\\\" width={20} height={5} color=\\\"primary\\\" />`}\\n      >\\n        <Icon slug=\\\"loading\\\" width={20} height={5} color=\\\"primary\\\" />\\n      </IconExample>\\n    </Col>\\n    <Col xs={12} sm={6} md={3} styles={{ lineHeight: 0 }}>\\n      <IconExample markup={`<Icon slug=\\\"loading\\\" width={40} height={10} />`}>\\n        <Icon slug=\\\"loading\\\" width={40} height={10} />\\n      </IconExample>\\n    </Col>\\n    <Col xs={12} sm={6} md={3} styles={{ lineHeight: 0 }}>\\n      <IconExample\\n        markup={`<Icon slug=\\\"loading\\\" width={80} height={20} color=\\\"primary\\\" />`}\\n      >\\n        <Icon slug=\\\"loading\\\" width={80} height={20} color=\\\"primary\\\" />\\n      </IconExample>\\n    </Col>\\n    <Col xs={12} sm={6} md={3} styles={{ lineHeight: 0 }}>\\n      <IconExample markup={`<Icon slug=\\\"loading\\\" width={120} height={30} />`}>\\n        <Icon slug=\\\"loading\\\" width={120} height={30} />\\n      </IconExample>\\n    </Col>\\n  </Row>\\n</Segment>'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      Fragment,\n      Playground,\n      Props,\n      Icon,\n      Input,\n      Select,\n      Card,\n      Row,\n      Col,\n      Segment,\n      ICONS,\n      colors,\n      IconExample\n    }} mdxType=\"Playground\">\n    <Segment padding=\"20px 0 0\" mdxType=\"Segment\">\n        <Row vertical=\"middle\" horizontal=\"center\" mdxType=\"Row\">\n            <Col xs={12} sm={6} md={3} styles={{\n            lineHeight: 0\n          }} mdxType=\"Col\">\n                <IconExample markup={`<Icon slug=\"loading\" width={20} height={5} color=\"primary\" />`} mdxType=\"IconExample\">\n                    <Icon slug=\"loading\" width={20} height={5} color=\"primary\" mdxType=\"Icon\" />\n                </IconExample>\n            </Col>\n            <Col xs={12} sm={6} md={3} styles={{\n            lineHeight: 0\n          }} mdxType=\"Col\">\n                <IconExample markup={`<Icon slug=\"loading\" width={40} height={10} />`} mdxType=\"IconExample\">\n                    <Icon slug=\"loading\" width={40} height={10} mdxType=\"Icon\" />\n                </IconExample>\n            </Col>\n            <Col xs={12} sm={6} md={3} styles={{\n            lineHeight: 0\n          }} mdxType=\"Col\">\n                <IconExample markup={`<Icon slug=\"loading\" width={80} height={20} color=\"primary\" />`} mdxType=\"IconExample\">\n                    <Icon slug=\"loading\" width={80} height={20} color=\"primary\" mdxType=\"Icon\" />\n                </IconExample>\n            </Col>\n            <Col xs={12} sm={6} md={3} styles={{\n            lineHeight: 0\n          }} mdxType=\"Col\">\n                <IconExample markup={`<Icon slug=\"loading\" width={120} height={30} />`} mdxType=\"IconExample\">\n                    <Icon slug=\"loading\" width={120} height={30} mdxType=\"Icon\" />\n                </IconExample>\n            </Col>\n        </Row>\n    </Segment>\n    </Playground>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={Icon} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
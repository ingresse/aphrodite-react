{"version":3,"sources":["/Users/udi/ingresse/aphrodite-react/src/components/Countdown/Countdown.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","this","useState","Playground","Props","Countdown","Container","Segment","Button","Card","InputNumeric","Select","Row","Col","colors","counting","setCounting","seconds","setSeconds","color","setColor","size","setSize","btnColor","padding","xs","textAlign","onFinishCallback","console","log","link","onClick","horizontal","sm","label","value","onChange","evt","n","parseInt","target","Object","keys","shades","map","colorKey","key","of","isMDXComponent"],"mappings":"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","file":"static/js/components-countdown-countdown.080ceda1.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { useState } from 'react';\nimport { Playground, Props } from 'docz';\nimport {\n    Countdown,\n    Container,\n    Segment,\n    Button,\n    Card,\n    InputNumeric,\n    Select,\n    Row,\n    Col,\n} from '../';\nimport { colors } from '../../utils';\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"countdown\"\n    }}>{`Countdown`}</h1>\n    <h3 {...{\n      \"id\": \"regressive-seconds-visual-timer\"\n    }}>{`Regressive seconds visual timer`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { Countdown } from '@ingresse/aphrodite';\n\n...\n\nfunction countdownFinished() {\n    alert('finished');\n}\n\n...\n\n<Countdown\n    size={120}\n    seconds={30}\n    onFinishCallback={countdownFinished}\n/>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <Playground __position={0} __code={'() => {\\n  const [counting, setCounting] = useState(false)\\n  const [seconds, setSeconds] = useState(5)\\n  const [color, setColor] = useState(\\'helper\\')\\n  const [size, setSize] = useState(120)\\n  const btnColor = color !== \\'helper\\' ? color : \\'secondary\\'\\n  function countdownFinished() {\\n    console.log(\\'countdown finished\\')\\n    setCounting(false)\\n  }\\n\\n  return (\\n    <Segment padding=\\\"45px 0\\\">\\n      <Container xs>\\n        <Card padding=\\\"10px 20px\\\">\\n          {counting ? (\\n            <Segment padding=\\\"10px 0\\\" textAlign=\\\"center\\\">\\n              <Countdown\\n                size={size}\\n                seconds={seconds}\\n                color={color}\\n                onFinishCallback={countdownFinished}\\n              />\\n              <Segment padding=\\\"20px 0 0\\\">\\n                <Button\\n                  link\\n                  color={btnColor}\\n                  onClick={() => setCounting(false)}\\n                >\\n                  Cancel\\n                </Button>\\n              </Segment>\\n            </Segment>\\n          ) : (\\n            <Segment padding=\\\"0\\\">\\n              <Row horizontal=\\\"center\\\">\\n                <Col xs={6} sm={6}>\\n                  <Segment padding=\\\"10px 0\\\">\\n                    <InputNumeric\\n                      label=\\\"Size\\\"\\n                      value={size}\\n                      onChange={(evt, n) => setSize(parseInt(n, 10))}\\n                    />\\n                  </Segment>\\n                </Col>\\n                <Col xs={6} sm={6}>\\n                  <Segment padding=\\\"10px 0\\\">\\n                    <InputNumeric\\n                      label=\\\"Seconds\\\"\\n                      value={seconds}\\n                      onChange={(evt, n) => setSeconds(parseInt(n, 10))}\\n                    />\\n                  </Segment>\\n                </Col>\\n                <Col xs={10} sm={6}>\\n                  <Segment padding=\\\"10px 0\\\">\\n                    <Select\\n                      label=\\\"Color\\\"\\n                      value={color}\\n                      onChange={({ target }) => setColor(target.value)}\\n                    >\\n                      <option value={Countdown.color}>default</option>\\n                      {Object.keys(colors.shades).map(colorKey => (\\n                        <option\\n                          key={`aph-color-${colorKey}`}\\n                          value={colorKey}\\n                        >\\n                          {colorKey}\\n                        </option>\\n                      ))}\\n                    </Select>\\n                  </Segment>\\n                </Col>\\n              </Row>\\n              <Segment padding=\\\"10px 0\\\" textAlign=\\\"center\\\">\\n                <Button\\n                  link\\n                  color={btnColor}\\n                  onClick={() => setCounting(true)}\\n                >\\n                  Start\\n                </Button>\\n              </Segment>\\n            </Segment>\\n          )}\\n        </Card>\\n      </Container>\\n    </Segment>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      Playground,\n      Props,\n      Countdown,\n      Container,\n      Segment,\n      Button,\n      Card,\n      InputNumeric,\n      Select,\n      Row,\n      Col,\n      colors\n    }} mdxType=\"Playground\">\n    {() => {\n        const [counting, setCounting] = useState(false);\n        const [seconds, setSeconds] = useState(5);\n        const [color, setColor] = useState('helper');\n        const [size, setSize] = useState(120);\n        const btnColor = color !== 'helper' ? color : 'secondary';\n\n        function countdownFinished() {\n          console.log('countdown finished');\n          setCounting(false);\n        }\n\n        return <Segment padding=\"45px 0\" mdxType=\"Segment\">\n            <Container xs mdxType=\"Container\">\n                <Card padding=\"10px 20px\" mdxType=\"Card\">\n                    {counting ? <Segment padding=\"10px 0\" textAlign=\"center\" mdxType=\"Segment\">\n                            <Countdown size={size} seconds={seconds} color={color} onFinishCallback={countdownFinished} mdxType=\"Countdown\" />\n                            <Segment padding=\"20px 0 0\" mdxType=\"Segment\">\n                                <Button link color={btnColor} onClick={() => setCounting(false)} mdxType=\"Button\">\n                                    Cancel\n                                </Button>\n                            </Segment>\n                        </Segment> : <Segment padding=\"0\" mdxType=\"Segment\">\n                            <Row horizontal=\"center\" mdxType=\"Row\">\n                                <Col xs={6} sm={6} mdxType=\"Col\">\n                                    <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                                        <InputNumeric label=\"Size\" value={size} onChange={(evt, n) => setSize(parseInt(n, 10))} mdxType=\"InputNumeric\" />\n                                    </Segment>\n                                </Col>\n                                <Col xs={6} sm={6} mdxType=\"Col\">\n                                    <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                                        <InputNumeric label=\"Seconds\" value={seconds} onChange={(evt, n) => setSeconds(parseInt(n, 10))} mdxType=\"InputNumeric\" />\n                                    </Segment>\n                                </Col>\n                                <Col xs={10} sm={6} mdxType=\"Col\">\n                                    <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                                        <Select label=\"Color\" value={color} onChange={({\n                        target\n                      }) => setColor(target.value)} mdxType=\"Select\">\n                                            <option value={Countdown.color}>\n                                                default\n                                            </option>\n                                            {Object.keys(colors.shades).map(colorKey => <option key={`aph-color-${colorKey}`} value={colorKey}>\n                                                    {colorKey}\n                                                </option>)}\n                                        </Select>\n                                    </Segment>\n                                </Col>\n                            </Row>\n                            <Segment padding=\"10px 0\" textAlign=\"center\" mdxType=\"Segment\">\n                                <Button link color={btnColor} onClick={() => setCounting(true)} mdxType=\"Button\">\n                                    Start\n                                </Button>\n                            </Segment>\n                        </Segment>}\n                </Card>\n            </Container>\n        </Segment>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={Countdown} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
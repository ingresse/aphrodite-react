{"version":3,"sources":["/home/udi/front/@aphrodite/src/components/Modal/Modal.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","__position","__code","__scope","this","useState","Modal","Button","Segment","Container","Placeholder","Row","Col","Input","Select","Switch","Playground","Props","style","margin","padding","opened","setOpened","title","setTitle","header","setHeader","closeOnEscape","setCloseOnEscape","unblockScrolling","setUnblockScrolling","contentJustify","setContentJustify","styles","position","overflow","height","textAlign","horizontal","xs","sm","id","toggleAlign","checked","onChange","evt","target","type","value","label","autoComplete","placeholder","color","onClick","openedCallback","overlayProps","footerProps","footer","width","src","frameBorder","allow","allowFullScreen","of","isMDXComponent"],"mappings":"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","file":"static/js/components-modal-modal.384dcfbe.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { useState } from 'react';\nimport {\n    Modal,\n    Button,\n    Segment,\n    Container,\n    Placeholder,\n    Row,\n    Col,\n    Input,\n    Select,\n    Switch,\n} from '../';\nimport { Playground, Props } from 'docz';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"modal\"\n    }}>{`Modal`}</h1>\n    <h3 {...{\n      \"id\": \"a-simple-dialog-implementation\"\n    }}>{`A simple dialog implementation`}</h3>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <Playground __position={0} __code={'() => {\\n  // import { Modal, Segment, Button, Placeholder } from \\'@ingresse/aphrodite\\';\\n  const [opened, setOpened] = useState(false)\\n  const [title, setTitle] = useState(\\'Oi, eu sou o Goku\\')\\n  const [header, setHeader] = useState(\\'\\')\\n  const [closeOnEscape, setCloseOnEscape] = useState(true)\\n  const [unblockScrolling, setUnblockScrolling] = useState(false)\\n  const [contentJustify, setContentJustify] = useState(\\'center\\')\\n\\n  /** All the `styles` in Modal was only customized to this example */\\n  return (\\n    <Segment\\n      padding=\\\"0\\\"\\n      styles={{\\n        position: \\'relative\\',\\n        overflow: \\'hidden\\',\\n        height: \\'720px\\',\\n      }}\\n    >\\n      <Container>\\n        <Segment padding=\\\"20px 0\\\" styles={{ textAlign: \\'center\\' }}>\\n          <Segment padding=\\\"10px 0\\\">\\n            <Row horizontal=\\\"center\\\">\\n              <Col xs={6} sm={4}>\\n                <Segment padding=\\\"10px 0\\\">\\n                  <Switch\\n                    id=\\\"modal_unblock_scrolling\\\"\\n                    textAlign=\\\"right\\\"\\n                    toggleAlign=\\\"right\\\"\\n                    checked={unblockScrolling}\\n                    onChange={evt => setUnblockScrolling(evt.target.checked)}\\n                  >\\n                    Unblock Scrolling\\n                  </Switch>\\n                </Segment>\\n              </Col>\\n              <Col xs={6} sm={4}>\\n                <Segment padding=\\\"10px 0\\\">\\n                  <Switch\\n                    id=\\\"modal_close_on_escape\\\"\\n                    checked={closeOnEscape}\\n                    onChange={evt => setCloseOnEscape(evt.target.checked)}\\n                  >\\n                    Close On Escape\\n                  </Switch>\\n                </Segment>\\n              </Col>\\n            </Row>\\n          </Segment>\\n          <Segment padding=\\\"10px 0\\\">\\n            <Row horizontal=\\\"center\\\">\\n              <Col xs={12} sm={4}>\\n                <Segment padding=\\\"10px 0\\\">\\n                  <Input\\n                    type=\\\"text\\\"\\n                    value={title}\\n                    label=\\\"Title\\\"\\n                    autoComplete=\\\"off\\\"\\n                    onChange={(evt, value) => setTitle(value)}\\n                  />\\n                </Segment>\\n              </Col>\\n              <Col xs={12} sm={4}>\\n                <Segment padding=\\\"10px 0\\\">\\n                  <Input\\n                    type=\\\"text\\\"\\n                    value={header}\\n                    label=\\\"Header\\\"\\n                    autoComplete=\\\"off\\\"\\n                    placeholder=\\\"Components, such as in footer\\\"\\n                    onChange={(evt, value) => setHeader(value)}\\n                  />\\n                </Segment>\\n              </Col>\\n              <Col xs={12} sm={4}>\\n                <Segment padding=\\\"10px 0\\\">\\n                  <Select\\n                    value={contentJustify}\\n                    label=\\\"Content Justify\\\"\\n                    onChange={(evt, value) => setContentJustify(value)}\\n                  >\\n                    <option value=\\\"flex-start\\\">flex-start</option>\\n                    <option value=\\\"center\\\">center</option>\\n                    <option value=\\\"flex-end\\\">flex-end</option>\\n                  </Select>\\n                </Segment>\\n              </Col>\\n            </Row>\\n          </Segment>\\n          <Segment padding=\\\"20px 0\\\">\\n            <Button color=\\\"primary\\\" onClick={() => setOpened(true)}>\\n              Open Modal\\n            </Button>\\n          </Segment>\\n        </Segment>\\n      </Container>\\n\\n      <Modal\\n        title={title}\\n        header={header}\\n        opened={opened}\\n        openedCallback={setOpened}\\n        closeOnEscape={closeOnEscape}\\n        contentJustify={contentJustify}\\n        unblockScrolling={unblockScrolling}\\n        styles={{\\n          position: \\'absolute\\',\\n        }}\\n        overlayProps={{\\n          styles: {\\n            position: \\'absolute\\',\\n          },\\n        }}\\n        footerProps={{\\n          styles: {\\n            position: \\'absolute\\',\\n            textAlign: \\'center\\',\\n          },\\n        }}\\n        footer={<Button onClick={() => setOpened(false)}>Close Modal</Button>}\\n      >\\n        <Container sm>\\n          <Placeholder>\\n            <iframe\\n              width=\\\"100%\\\"\\n              height=\\\"325\\\"\\n              src=\\\"https://www.youtube-nocookie.com/embed/oyTZ267Xg70?autoplay=true&volume=0.3&start=4\\\"\\n              frameBorder=\\\"0\\\"\\n              allow=\\\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\\\"\\n              allowFullScreen\\n            />\\n          </Placeholder>\\n        </Container>\\n      </Modal>\\n    </Segment>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      Modal,\n      Button,\n      Segment,\n      Container,\n      Placeholder,\n      Row,\n      Col,\n      Input,\n      Select,\n      Switch,\n      Playground,\n      Props\n    }} style={{\n      margin: '-20px',\n      padding: '0 !important'\n    }} mdxType=\"Playground\">\n    {() => {\n        // import { Modal, Segment, Button, Placeholder } from '@ingresse/aphrodite';\n        const [opened, setOpened] = useState(false);\n        const [title, setTitle] = useState('Oi, eu sou o Goku');\n        const [header, setHeader] = useState('');\n        const [closeOnEscape, setCloseOnEscape] = useState(true);\n        const [unblockScrolling, setUnblockScrolling] = useState(false);\n        const [contentJustify, setContentJustify] = useState('center');\n        /** All the `styles` in Modal was only customized to this example */\n\n        return <Segment padding=\"0\" styles={{\n          position: 'relative',\n          overflow: 'hidden',\n          height: '720px'\n        }} mdxType=\"Segment\">\n\n            <Container mdxType=\"Container\">\n                <Segment padding=\"20px 0\" styles={{\n              textAlign: 'center'\n            }} mdxType=\"Segment\">\n                    <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                        <Row horizontal=\"center\" mdxType=\"Row\">\n                            <Col xs={6} sm={4} mdxType=\"Col\">\n                                <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                                    <Switch id=\"modal_unblock_scrolling\" textAlign=\"right\" toggleAlign=\"right\" checked={unblockScrolling} onChange={evt => setUnblockScrolling(evt.target.checked)} mdxType=\"Switch\">\n                                        Unblock Scrolling\n                                    </Switch>\n                                </Segment>\n                            </Col>\n                            <Col xs={6} sm={4} mdxType=\"Col\">\n                                <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                                    <Switch id=\"modal_close_on_escape\" checked={closeOnEscape} onChange={evt => setCloseOnEscape(evt.target.checked)} mdxType=\"Switch\">\n                                        Close On Escape\n                                    </Switch>\n                                </Segment>\n                            </Col>\n                        </Row>\n                    </Segment>\n                    <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                        <Row horizontal=\"center\" mdxType=\"Row\">\n                            <Col xs={12} sm={4} mdxType=\"Col\">\n                                <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                                    <Input type=\"text\" value={title} label=\"Title\" autoComplete=\"off\" onChange={(evt, value) => setTitle(value)} mdxType=\"Input\" />\n                                </Segment>\n                            </Col>\n                            <Col xs={12} sm={4} mdxType=\"Col\">\n                                <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                                    <Input type=\"text\" value={header} label=\"Header\" autoComplete=\"off\" placeholder=\"Components, such as in footer\" onChange={(evt, value) => setHeader(value)} mdxType=\"Input\" />\n                                </Segment>\n                            </Col>\n                            <Col xs={12} sm={4} mdxType=\"Col\">\n                                <Segment padding=\"10px 0\" mdxType=\"Segment\">\n                                    <Select value={contentJustify} label=\"Content Justify\" onChange={(evt, value) => setContentJustify(value)} mdxType=\"Select\">\n                                        <option value=\"flex-start\">flex-start</option>\n                                        <option value=\"center\">center</option>\n                                        <option value=\"flex-end\">flex-end</option>\n                                    </Select>\n                                </Segment>\n                            </Col>\n                        </Row>\n                    </Segment>\n                    <Segment padding=\"20px 0\" mdxType=\"Segment\">\n                        <Button color=\"primary\" onClick={() => setOpened(true)} mdxType=\"Button\">\n                            Open Modal\n                        </Button>\n                    </Segment>\n                </Segment>\n            </Container>\n\n            <Modal title={title} header={header} opened={opened} openedCallback={setOpened} closeOnEscape={closeOnEscape} contentJustify={contentJustify} unblockScrolling={unblockScrolling} styles={{\n            position: 'absolute'\n          }} overlayProps={{\n            styles: {\n              position: 'absolute'\n            }\n          }} footerProps={{\n            styles: {\n              position: 'absolute',\n              textAlign: 'center'\n            }\n          }} footer={<Button onClick={() => setOpened(false)} mdxType=\"Button\">\n                        Close Modal\n                    </Button>} mdxType=\"Modal\">\n                <Container sm mdxType=\"Container\">\n                    <Placeholder mdxType=\"Placeholder\">\n                        <iframe width=\"100%\" height=\"325\" src=\"https://www.youtube-nocookie.com/embed/oyTZ267Xg70?autoplay=true&volume=0.3&start=4\" frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen />\n                    </Placeholder>\n                </Container>\n            </Modal>\n        </Segment>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={Modal} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
{"version":3,"sources":["/Users/udi/ingresse/aphrodite-react/src/components/Dialog/Dialog.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","this","useState","Playground","Props","Dialog","Row","Col","Segment","Container","Button","H1","opened","setOpened","xs","onClick","onClose","padding","closeArea","background","align","justify","textAlign","color","sm","margin","block","alert","of","isMDXComponent"],"mappings":"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","file":"static/js/components-dialog-dialog.c81f777d.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { useState } from 'react';\nimport { Playground, Props } from 'docz';\nimport {\n    Dialog,\n    Row,\n    Col,\n    Segment,\n    Container,\n    Button,\n    H1,\n} from '../';\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"dialog\"\n    }}>{`Dialog`}</h1>\n    <h3 {...{\n      \"id\": \"dialog-boxes-tell-users-about-a-task-and-can-contain-critical-information-require-decisions-or-involve-multiple-tasks\"\n    }}>{`Dialog boxes tell users about a task and can contain critical information, require decisions, or involve multiple tasks.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { Dialog } from '@ingresse/aphrodite';\n\n...\n\n<Dialog\n    opened={opened}\n    onClose={() => setOpened(false)}>\n    <Button\n        onClick={() => setOpened(false)}>\n        Close\n    </Button>\n</Dialog>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <Playground __position={0} __code={'() => {\\n  const [opened, setOpened] = useState(false)\\n  function handleDialog() {\\n    setOpened(!opened)\\n  }\\n\\n  return (\\n    <Row>\\n      <Col xs={12}>\\n        <Button onClick={handleDialog}>Open a simple Dialog</Button>\\n        <Dialog opened={opened} onClose={() => setOpened(false)}>\\n          <Button onClick={() => setOpened(false)}>Close</Button>\\n        </Dialog>\\n      </Col>\\n    </Row>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      Playground,\n      Props,\n      Dialog,\n      Row,\n      Col,\n      Segment,\n      Container,\n      Button,\n      H1\n    }} mdxType=\"Playground\">\n    {() => {\n        const [opened, setOpened] = useState(false);\n\n        function handleDialog() {\n          setOpened(!opened);\n        }\n\n        return <Row mdxType=\"Row\">\n            <Col xs={12} mdxType=\"Col\">\n                <Button onClick={handleDialog} mdxType=\"Button\">\n                    Open a simple Dialog\n                </Button>\n                <Dialog opened={opened} onClose={() => setOpened(false)} mdxType=\"Dialog\">\n                    <Button onClick={() => setOpened(false)} mdxType=\"Button\">\n                        Close\n                    </Button>\n                </Dialog>\n            </Col>\n        </Row>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"without-close-area\"\n    }}>{`Without close area`}</h2>\n    <Playground __position={1} __code={'() => {\\n  const [opened, setOpened] = useState(false)\\n  function handleDialog() {\\n    setOpened(!opened)\\n  }\\n\\n  return (\\n    <Segment padding=\\\"0\\\">\\n      <Button onClick={handleDialog}>Without close area</Button>\\n      <Dialog\\n        opened={opened}\\n        onClose={() => setOpened(false)}\\n        closeArea={false}\\n      >\\n        <Segment background=\\\"white\\\">\\n          <Button onClick={() => setOpened(false)}>Close</Button>\\n        </Segment>\\n      </Dialog>\\n    </Segment>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      Playground,\n      Props,\n      Dialog,\n      Row,\n      Col,\n      Segment,\n      Container,\n      Button,\n      H1\n    }} mdxType=\"Playground\">\n    {() => {\n        const [opened, setOpened] = useState(false);\n\n        function handleDialog() {\n          setOpened(!opened);\n        }\n\n        return <Segment padding=\"0\" mdxType=\"Segment\">\n            <Button onClick={handleDialog} mdxType=\"Button\">\n                Without close area\n            </Button>\n            <Dialog opened={opened} onClose={() => setOpened(false)} closeArea={false} mdxType=\"Dialog\">\n                <Segment background=\"white\" mdxType=\"Segment\">\n                    <Button onClick={() => setOpened(false)} mdxType=\"Button\">\n                        Close\n                    </Button>\n                </Segment>\n            </Dialog>\n        </Segment>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"position-usage\"\n    }}>{`Position Usage`}</h2>\n    <Playground __position={2} __code={'() => {\\n  const [opened, setOpened] = useState(false)\\n  function handleDialog() {\\n    setOpened(!opened)\\n  }\\n\\n  return (\\n    <Segment padding=\\\"0\\\">\\n      <Button onClick={handleDialog}>Position Usage</Button>\\n      <Dialog\\n        align=\\\"flex-start\\\"\\n        justify=\\\"flex-end\\\"\\n        padding=\\\"30px 0\\\"\\n        closeArea={false}\\n        opened={opened}\\n        onClose={() => setOpened(false)}\\n      >\\n        <Segment padding=\\\"0\\\" textAlign=\\\"center\\\" background=\\\"primary\\\">\\n          <Button color=\\\"success\\\" onClick={() => setOpened(false)}>\\n            Close\\n          </Button>\\n        </Segment>\\n      </Dialog>\\n    </Segment>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      Playground,\n      Props,\n      Dialog,\n      Row,\n      Col,\n      Segment,\n      Container,\n      Button,\n      H1\n    }} mdxType=\"Playground\">\n    {() => {\n        const [opened, setOpened] = useState(false);\n\n        function handleDialog() {\n          setOpened(!opened);\n        }\n\n        return <Segment padding=\"0\" mdxType=\"Segment\">\n            <Button onClick={handleDialog} mdxType=\"Button\">\n                Position Usage\n            </Button>\n            <Dialog align=\"flex-start\" justify=\"flex-end\" padding=\"30px 0\" closeArea={false} opened={opened} onClose={() => setOpened(false)} mdxType=\"Dialog\">\n                <Segment padding=\"0\" textAlign=\"center\" background=\"primary\" mdxType=\"Segment\">\n                    <Button color=\"success\" onClick={() => setOpened(false)} mdxType=\"Button\">\n                        Close\n                    </Button>\n                </Segment>\n            </Dialog>\n        </Segment>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"advanced-usage\"\n    }}>{`Advanced Usage`}</h2>\n    <Playground __position={3} __code={'() => {\\n  const [opened, setOpened] = useState(false)\\n  function handleDialog() {\\n    setOpened(!opened)\\n  }\\n\\n  return (\\n    <Segment padding=\\\"0\\\">\\n      <Button onClick={handleDialog}>Advanced Usage</Button>\\n      <Dialog opened={opened} onClose={() => setOpened(false)}>\\n        <Container sm>\\n          <Segment padding=\\\"40px\\\" textAlign=\\\"center\\\" background=\\\"white\\\">\\n            <H1 margin=\\\"0 0 20px\\\">Update Success</H1>\\n            <Segment padding=\\\"0 0 40px\\\">\\n              Want to continue to the next transaction or go back to the\\n              entire list?\\n            </Segment>\\n            <Row>\\n              <Col xs={6}>\\n                <Button\\n                  block\\n                  color=\\\"success\\\"\\n                  onClick={() => alert(\\'confirm\\')}\\n                >\\n                  Continue\\n                </Button>\\n              </Col>\\n              <Col xs={6}>\\n                <Button block onClick={() => setOpened(false)}>\\n                  Close\\n                </Button>\\n              </Col>\\n            </Row>\\n          </Segment>\\n        </Container>\\n      </Dialog>\\n    </Segment>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      Playground,\n      Props,\n      Dialog,\n      Row,\n      Col,\n      Segment,\n      Container,\n      Button,\n      H1\n    }} mdxType=\"Playground\">\n    {() => {\n        const [opened, setOpened] = useState(false);\n\n        function handleDialog() {\n          setOpened(!opened);\n        }\n\n        return <Segment padding=\"0\" mdxType=\"Segment\">\n            <Button onClick={handleDialog} mdxType=\"Button\">\n                Advanced Usage\n            </Button>\n            <Dialog opened={opened} onClose={() => setOpened(false)} mdxType=\"Dialog\">\n                <Container sm mdxType=\"Container\">\n                    <Segment padding=\"40px\" textAlign=\"center\" background=\"white\" mdxType=\"Segment\">\n                        <H1 margin=\"0 0 20px\" mdxType=\"H1\">\n                            Update Success\n                        </H1>\n                        <Segment padding=\"0 0 40px\" mdxType=\"Segment\">\n                            Want to continue to the next transaction or go back to the entire list?\n                        </Segment>\n                        <Row mdxType=\"Row\">\n                            <Col xs={6} mdxType=\"Col\">\n                                <Button block color=\"success\" onClick={() => alert('confirm')} mdxType=\"Button\">\n                                    Continue\n                                </Button>\n                            </Col>\n                            <Col xs={6} mdxType=\"Col\">\n                                <Button block onClick={() => setOpened(false)} mdxType=\"Button\">\n                                    Close\n                                </Button>\n                            </Col>\n                        </Row>\n                    </Segment>\n                </Container>\n            </Dialog>\n        </Segment>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={Dialog} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
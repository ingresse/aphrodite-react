"use strict";

exports.__esModule = true;
exports.default = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _constants = require("../../constants");

var _ = require("../");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { keys.push.apply(keys, Object.getOwnPropertySymbols(object)); } if (enumerableOnly) keys = keys.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* Component Styles */
var _iconSize = window.innerWidth > _constants.SCREEN_SIZES.SM ? 22 : 30;

var iconColumn = _iconSize + _constants.GRID.CONTAINER_PADDING / 2 + _constants.GRID.UNIT;
/* Component Styles */

var AphAccordion = (
/*#__PURE__*/
0, _styledBase.default)('div', {
  target: "e869uf0"
})(function (props) {
  return _objectSpread({
    boxSizing: 'border-box',
    display: 'block',
    fontSize: _constants.SIZES.MD.FONT_SIZE,
    lineHeight: _constants.SIZES.MD.LINE_HEIGHT
  }, props.styles);
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0FjY29yZGlvbi9BY2NvcmRpb24uanN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWdCcUIiLCJmaWxlIjoiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvQWNjb3JkaW9uL0FjY29yZGlvbi5qc3giLCJzb3VyY2VzQ29udGVudCI6WyIvKiBQYWNrYWdlcyAqL1xuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgcHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuXG4vKiBIZWxwZXIgQ29uc3RhbnRzICovXG5pbXBvcnQgeyBHUklELCBNRURJQV9RVUVSSUVTLCBTQ1JFRU5fU0laRVMsIFNJWkVTIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzJztcblxuLyogSGVscGVyIENvbXBvbmVudHMgKi9cbmltcG9ydCB7IExpc3RJdGVtLCBJY29uIH0gZnJvbSAnLi4vJztcblxuLyogQ29tcG9uZW50IFN0eWxlcyAqL1xuY29uc3QgX2ljb25TaXplICAgPSAod2luZG93LmlubmVyV2lkdGggPiBTQ1JFRU5fU0laRVMuU00gPyAyMiA6IDMwKTtcbmNvbnN0IGljb25Db2x1bW4gID0gKF9pY29uU2l6ZSArIChHUklELkNPTlRBSU5FUl9QQURESU5HICAvIDIpICsgR1JJRC5VTklUKTtcblxuLyogQ29tcG9uZW50IFN0eWxlcyAqL1xuY29uc3QgQXBoQWNjb3JkaW9uID0gc3R5bGVkKCdkaXYnKShwcm9wcyA9PiAoe1xuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgIGRpc3BsYXkgIDogJ2Jsb2NrJyxcblxuICAgIGZvbnRTaXplICA6IFNJWkVTLk1ELkZPTlRfU0laRSxcbiAgICBsaW5lSGVpZ2h0OiBTSVpFUy5NRC5MSU5FX0hFSUdIVCxcblxuICAgIC4uLnByb3BzLnN0eWxlcyxcbn0pKTtcblxuLyogQ29tcG9uZW50IEhlYWRlciBTdHlsZXMgKi9cbmNvbnN0IEhlYWRlciA9IHN0eWxlZCgnZGl2JykocHJvcHMgPT4gKHtcbiAgICBib3hTaXppbmcgOiAnYm9yZGVyLWJveCcsXG4gICAgZGlzcGxheSAgIDogJ2Jsb2NrJyxcbiAgICBsaW5lSGVpZ2h0OiAwLFxufSkpO1xuXG4vKiBDb21wb25lbnQgSGVhZGVyIENvbHVtbiBTdHlsZXMgKi9cbmNvbnN0IGNvbHVtblN0eWxlcyA9IHtcbiAgICBib3hTaXppbmcgICAgOiAnYm9yZGVyLWJveCcsXG4gICAgZGlzcGxheSAgICAgIDogJ2lubGluZS1ibG9jaycsXG4gICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG59O1xuXG4vKiBDb21wb25lbnQgSGVhZGVyIEljb24gQ29sdW1uIFN0eWxlcyAqL1xuY29uc3QgSWNvbkNvbHVtbiA9IHN0eWxlZCgnZGl2JykocHJvcHMgPT4gKHtcbiAgICAuLi5jb2x1bW5TdHlsZXMsXG4gICAgd2lkdGg6IGljb25Db2x1bW4sXG4gICAgbGluZUhlaWdodDogMCxcbiAgICBtYXJnaW46ICctMnB4IDAnLFxuXG4gICAgW01FRElBX1FVRVJJRVMuTFQuU01dOiB7XG4gICAgICAgIG1hcmdpbjogMCxcbiAgICB9LFxufSkpO1xuXG4vKiBDb21wb25lbnQgSGVhZGVyIENvbnRlbnQgQ29sdW1uIFN0eWxlcyAqL1xuY29uc3QgQ29udGVudENvbHVtbiA9IHN0eWxlZCgnZGl2JykocHJvcHMgPT4gKHtcbiAgICAuLi5jb2x1bW5TdHlsZXMsXG4gICAgd2lkdGg6IGBjYWxjKDEwMCUgLSAke2ljb25Db2x1bW59KWAsXG4gICAgbGluZUhlaWdodDogJzIwcHgnLFxufSkpO1xuXG4vKiBDb21wb25lbnQgSXRzZWxmICovXG5mdW5jdGlvbiBBY2NvcmRpb24ocHJvcHMpIHtcbiAgICAvKipcbiAgICAgKiBJbmhlcml0IHByb3BzXG4gICAgICovXG4gICAgY29uc3Qge1xuICAgICAgICBoZWFkZXIsXG4gICAgICAgIGhlYWRlckRhcmssXG4gICAgICAgIGhlYWRlclByb3BzLFxuICAgICAgICBoZWFkZXJTdHlsZXMsXG5cbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGVzLFxuXG4gICAgICAgIHdpdGhJY29uLFxuICAgICAgICBpY29uU2l6ZSxcbiAgICAgICAgaWNvblByb3BzLFxuICAgICAgICBpY29uU3R5bGVzLFxuICAgIH0gPSBwcm9wcztcblxuICAgIC8qKlxuICAgICAqIExvY2FsIHZhbHVlc1xuICAgICAqL1xuICAgIGNvbnN0IFsgb3BlbmVkLCBzZXRPcGVuZWQgXSA9IHVzZVN0YXRlKHByb3BzLm9wZW5lZCB8fCBmYWxzZSk7XG5cbiAgICAvKipcbiAgICAgKiBUb2dnbGUgY2hpbGRyZW5zIHZpc2liaWxpdHlcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b2dnbGUoKSB7XG4gICAgICAgIGNvbnN0IHRvZ2dsZUNhbGxiYWNrID0gKHByb3BzLnRvZ2dsZUNhbGxiYWNrIHx8IHByb3BzLm9wZW5lZENhbGxiYWNrKTtcbiAgICAgICAgY29uc3QgaXNPcGVuZWQgICAgICAgPSAhb3BlbmVkO1xuXG4gICAgICAgIHNldE9wZW5lZChpc09wZW5lZCk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiB0b2dnbGVDYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdG9nZ2xlQ2FsbGJhY2soaXNPcGVuZWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExpc3RlbiBmb3IgY2hhbmdlc1xuICAgICAqL1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHNldE9wZW5lZChwcm9wcy5vcGVuZWQpO1xuICAgIH0sIFsgcHJvcHMub3BlbmVkIF0pO1xuXG4gICAgLyoqXG4gICAgICogUmVuZGVyXG4gICAgICovXG4gICAgcmV0dXJuIChcbiAgICAgICAgPEFwaEFjY29yZGlvblxuICAgICAgICAgICAgc3R5bGVzPXtzdHlsZXN9XG4gICAgICAgICAgICBjbGFzc05hbWU9e2BhcGgtYWNjb3JkaW9uICR7Y2xhc3NOYW1lfWB9PlxuICAgICAgICAgICAgPExpc3RJdGVtXG4gICAgICAgICAgICAgICAgey4uLmhlYWRlclByb3BzfVxuICAgICAgICAgICAgICAgIGhlYWRlcj17aGVhZGVyRGFyayA/IHRydWUgOiBmYWxzZX1cbiAgICAgICAgICAgICAgICBzdHlsZXM9e3sgY3Vyc29yOiAncG9pbnRlcicsIHBhZGRpbmdSaWdodDogJzE1cHgnLCBwYWRkaW5nTGVmdDogJzE1cHgnLCAuLi5oZWFkZXJTdHlsZXMgfX1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXt0b2dnbGV9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYXBoLWFjY29yZGlvbl9faGVhZGVyXCI+XG4gICAgICAgICAgICAgICAge2NoaWxkcmVuID8gKFxuICAgICAgICAgICAgICAgICAgICA8SGVhZGVyIGNsYXNzTmFtZT1cImFwaC1hY2NvcmRpb25fX2hlYWRlci1yb3dcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt3aXRoSWNvbiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgPEljb25Db2x1bW4gY2xhc3NOYW1lPVwiYXBoLWFjY29yZGlvbl9faGVhZGVyX19jb2wtaWNvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJY29uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU9e2ljb25TaXplIHx8IF9pY29uU2l6ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2x1Zz17YGFycm93LSR7b3BlbmVkID8gJ3VwJyA6ICdkb3duJ30tY2lyY2xlYH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVzPXtpY29uU3R5bGVzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Li4uaWNvblByb3BzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0ljb25Db2x1bW4+fVxuICAgICAgICAgICAgICAgICAgICAgICAgPENvbnRlbnRDb2x1bW4gY2xhc3NOYW1lPVwiYXBoLWFjY29yZGlvbl9faGVhZGVyX19jb2wtY29udGVudFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtoZWFkZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0NvbnRlbnRDb2x1bW4+XG4gICAgICAgICAgICAgICAgICAgIDwvSGVhZGVyPlxuICAgICAgICAgICAgICAgICkgOiBoZWFkZXJ9XG4gICAgICAgICAgICA8L0xpc3RJdGVtPlxuICAgICAgICAgICAge29wZW5lZCAmJiBjaGlsZHJlbn1cbiAgICAgICAgPC9BcGhBY2NvcmRpb24+XG4gICAgKTtcbn07XG5cbi8qIERlZmF1bHQgUHJvcHMgKi9cbkFjY29yZGlvbi5kZWZhdWx0UHJvcHMgPSB7XG4gICAgb3BlbmVkICAgOiBmYWxzZSxcbiAgICBoZWFkZXIgICA6ICcnLFxuICAgIGNsYXNzTmFtZTogJycsXG5cbiAgICB3aXRoSWNvbiA6IHRydWUsXG59O1xuXG4vKiBQcm9wZXJ0aWVzIFR5cGVzICovXG5BY2NvcmRpb24ucHJvcFR5cGVzID0ge1xuICAgIG9wZW5lZCAgICAgICAgOiBwcm9wVHlwZXMuYm9vbCxcbiAgICBvcGVuZWRDYWxsYmFjazogcHJvcFR5cGVzLmZ1bmMsXG5cbiAgICBoZWFkZXIgICAgICA6IHByb3BUeXBlcy5hbnksXG4gICAgaGVhZGVyRGFyayAgOiBwcm9wVHlwZXMuYm9vbCxcbiAgICBoZWFkZXJTdHlsZXM6IHByb3BUeXBlcy5vYmplY3QsXG5cbiAgICBjaGlsZHJlbiA6IHByb3BUeXBlcy5hbnksXG4gICAgY2xhc3NOYW1lOiBwcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgc3R5bGVzICAgIDogcHJvcFR5cGVzLm9iamVjdCxcblxuICAgIHdpdGhJY29uICA6IHByb3BUeXBlcy5ib29sLFxuICAgIGljb25TaXplICA6IHByb3BUeXBlcy5udW1iZXIsXG4gICAgaWNvblN0eWxlczogcHJvcFR5cGVzLm9iamVjdCxcblxuICAgIHRvZ2dsZUNhbGxiYWNrOiBwcm9wVHlwZXMuZnVuYyxcbn07XG5cbi8qIEV4cG9ydGluZyAqL1xuZXhwb3J0IGRlZmF1bHQgQWNjb3JkaW9uO1xuIl19 */");
/* Component Header Styles */

var Header = (
/*#__PURE__*/
0, _styledBase.default)('div', {
  target: "e869uf1"
})(function (props) {
  return {
    boxSizing: 'border-box',
    display: 'block',
    lineHeight: 0
  };
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0FjY29yZGlvbi9BY2NvcmRpb24uanN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJCZSIsImZpbGUiOiIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9BY2NvcmRpb24vQWNjb3JkaW9uLmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qIFBhY2thZ2VzICovXG5pbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBwcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5cbi8qIEhlbHBlciBDb25zdGFudHMgKi9cbmltcG9ydCB7IEdSSUQsIE1FRElBX1FVRVJJRVMsIFNDUkVFTl9TSVpFUywgU0laRVMgfSBmcm9tICcuLi8uLi9jb25zdGFudHMnO1xuXG4vKiBIZWxwZXIgQ29tcG9uZW50cyAqL1xuaW1wb3J0IHsgTGlzdEl0ZW0sIEljb24gfSBmcm9tICcuLi8nO1xuXG4vKiBDb21wb25lbnQgU3R5bGVzICovXG5jb25zdCBfaWNvblNpemUgICA9ICh3aW5kb3cuaW5uZXJXaWR0aCA+IFNDUkVFTl9TSVpFUy5TTSA/IDIyIDogMzApO1xuY29uc3QgaWNvbkNvbHVtbiAgPSAoX2ljb25TaXplICsgKEdSSUQuQ09OVEFJTkVSX1BBRERJTkcgIC8gMikgKyBHUklELlVOSVQpO1xuXG4vKiBDb21wb25lbnQgU3R5bGVzICovXG5jb25zdCBBcGhBY2NvcmRpb24gPSBzdHlsZWQoJ2RpdicpKHByb3BzID0+ICh7XG4gICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgZGlzcGxheSAgOiAnYmxvY2snLFxuXG4gICAgZm9udFNpemUgIDogU0laRVMuTUQuRk9OVF9TSVpFLFxuICAgIGxpbmVIZWlnaHQ6IFNJWkVTLk1ELkxJTkVfSEVJR0hULFxuXG4gICAgLi4ucHJvcHMuc3R5bGVzLFxufSkpO1xuXG4vKiBDb21wb25lbnQgSGVhZGVyIFN0eWxlcyAqL1xuY29uc3QgSGVhZGVyID0gc3R5bGVkKCdkaXYnKShwcm9wcyA9PiAoe1xuICAgIGJveFNpemluZyA6ICdib3JkZXItYm94JyxcbiAgICBkaXNwbGF5ICAgOiAnYmxvY2snLFxuICAgIGxpbmVIZWlnaHQ6IDAsXG59KSk7XG5cbi8qIENvbXBvbmVudCBIZWFkZXIgQ29sdW1uIFN0eWxlcyAqL1xuY29uc3QgY29sdW1uU3R5bGVzID0ge1xuICAgIGJveFNpemluZyAgICA6ICdib3JkZXItYm94JyxcbiAgICBkaXNwbGF5ICAgICAgOiAnaW5saW5lLWJsb2NrJyxcbiAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbn07XG5cbi8qIENvbXBvbmVudCBIZWFkZXIgSWNvbiBDb2x1bW4gU3R5bGVzICovXG5jb25zdCBJY29uQ29sdW1uID0gc3R5bGVkKCdkaXYnKShwcm9wcyA9PiAoe1xuICAgIC4uLmNvbHVtblN0eWxlcyxcbiAgICB3aWR0aDogaWNvbkNvbHVtbixcbiAgICBsaW5lSGVpZ2h0OiAwLFxuICAgIG1hcmdpbjogJy0ycHggMCcsXG5cbiAgICBbTUVESUFfUVVFUklFUy5MVC5TTV06IHtcbiAgICAgICAgbWFyZ2luOiAwLFxuICAgIH0sXG59KSk7XG5cbi8qIENvbXBvbmVudCBIZWFkZXIgQ29udGVudCBDb2x1bW4gU3R5bGVzICovXG5jb25zdCBDb250ZW50Q29sdW1uID0gc3R5bGVkKCdkaXYnKShwcm9wcyA9PiAoe1xuICAgIC4uLmNvbHVtblN0eWxlcyxcbiAgICB3aWR0aDogYGNhbGMoMTAwJSAtICR7aWNvbkNvbHVtbn0pYCxcbiAgICBsaW5lSGVpZ2h0OiAnMjBweCcsXG59KSk7XG5cbi8qIENvbXBvbmVudCBJdHNlbGYgKi9cbmZ1bmN0aW9uIEFjY29yZGlvbihwcm9wcykge1xuICAgIC8qKlxuICAgICAqIEluaGVyaXQgcHJvcHNcbiAgICAgKi9cbiAgICBjb25zdCB7XG4gICAgICAgIGhlYWRlcixcbiAgICAgICAgaGVhZGVyRGFyayxcbiAgICAgICAgaGVhZGVyUHJvcHMsXG4gICAgICAgIGhlYWRlclN0eWxlcyxcblxuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICBzdHlsZXMsXG5cbiAgICAgICAgd2l0aEljb24sXG4gICAgICAgIGljb25TaXplLFxuICAgICAgICBpY29uUHJvcHMsXG4gICAgICAgIGljb25TdHlsZXMsXG4gICAgfSA9IHByb3BzO1xuXG4gICAgLyoqXG4gICAgICogTG9jYWwgdmFsdWVzXG4gICAgICovXG4gICAgY29uc3QgWyBvcGVuZWQsIHNldE9wZW5lZCBdID0gdXNlU3RhdGUocHJvcHMub3BlbmVkIHx8IGZhbHNlKTtcblxuICAgIC8qKlxuICAgICAqIFRvZ2dsZSBjaGlsZHJlbnMgdmlzaWJpbGl0eVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvZ2dsZSgpIHtcbiAgICAgICAgY29uc3QgdG9nZ2xlQ2FsbGJhY2sgPSAocHJvcHMudG9nZ2xlQ2FsbGJhY2sgfHwgcHJvcHMub3BlbmVkQ2FsbGJhY2spO1xuICAgICAgICBjb25zdCBpc09wZW5lZCAgICAgICA9ICFvcGVuZWQ7XG5cbiAgICAgICAgc2V0T3BlbmVkKGlzT3BlbmVkKTtcblxuICAgICAgICBpZiAodHlwZW9mIHRvZ2dsZUNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0b2dnbGVDYWxsYmFjayhpc09wZW5lZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTGlzdGVuIGZvciBjaGFuZ2VzXG4gICAgICovXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgc2V0T3BlbmVkKHByb3BzLm9wZW5lZCk7XG4gICAgfSwgWyBwcm9wcy5vcGVuZWQgXSk7XG5cbiAgICAvKipcbiAgICAgKiBSZW5kZXJcbiAgICAgKi9cbiAgICByZXR1cm4gKFxuICAgICAgICA8QXBoQWNjb3JkaW9uXG4gICAgICAgICAgICBzdHlsZXM9e3N0eWxlc31cbiAgICAgICAgICAgIGNsYXNzTmFtZT17YGFwaC1hY2NvcmRpb24gJHtjbGFzc05hbWV9YH0+XG4gICAgICAgICAgICA8TGlzdEl0ZW1cbiAgICAgICAgICAgICAgICB7Li4uaGVhZGVyUHJvcHN9XG4gICAgICAgICAgICAgICAgaGVhZGVyPXtoZWFkZXJEYXJrID8gdHJ1ZSA6IGZhbHNlfVxuICAgICAgICAgICAgICAgIHN0eWxlcz17eyBjdXJzb3I6ICdwb2ludGVyJywgcGFkZGluZ1JpZ2h0OiAnMTVweCcsIHBhZGRpbmdMZWZ0OiAnMTVweCcsIC4uLmhlYWRlclN0eWxlcyB9fVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RvZ2dsZX1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJhcGgtYWNjb3JkaW9uX19oZWFkZXJcIj5cbiAgICAgICAgICAgICAgICB7Y2hpbGRyZW4gPyAoXG4gICAgICAgICAgICAgICAgICAgIDxIZWFkZXIgY2xhc3NOYW1lPVwiYXBoLWFjY29yZGlvbl9faGVhZGVyLXJvd1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAge3dpdGhJY29uICYmXG4gICAgICAgICAgICAgICAgICAgICAgICA8SWNvbkNvbHVtbiBjbGFzc05hbWU9XCJhcGgtYWNjb3JkaW9uX19oZWFkZXJfX2NvbC1pY29uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEljb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZT17aWNvblNpemUgfHwgX2ljb25TaXplfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbHVnPXtgYXJyb3ctJHtvcGVuZWQgPyAndXAnIDogJ2Rvd24nfS1jaXJjbGVgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZXM9e2ljb25TdHlsZXN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsuLi5pY29uUHJvcHN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvSWNvbkNvbHVtbj59XG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29udGVudENvbHVtbiBjbGFzc05hbWU9XCJhcGgtYWNjb3JkaW9uX19oZWFkZXJfX2NvbC1jb250ZW50XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2hlYWRlcn1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29udGVudENvbHVtbj5cbiAgICAgICAgICAgICAgICAgICAgPC9IZWFkZXI+XG4gICAgICAgICAgICAgICAgKSA6IGhlYWRlcn1cbiAgICAgICAgICAgIDwvTGlzdEl0ZW0+XG4gICAgICAgICAgICB7b3BlbmVkICYmIGNoaWxkcmVufVxuICAgICAgICA8L0FwaEFjY29yZGlvbj5cbiAgICApO1xufTtcblxuLyogRGVmYXVsdCBQcm9wcyAqL1xuQWNjb3JkaW9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBvcGVuZWQgICA6IGZhbHNlLFxuICAgIGhlYWRlciAgIDogJycsXG4gICAgY2xhc3NOYW1lOiAnJyxcblxuICAgIHdpdGhJY29uIDogdHJ1ZSxcbn07XG5cbi8qIFByb3BlcnRpZXMgVHlwZXMgKi9cbkFjY29yZGlvbi5wcm9wVHlwZXMgPSB7XG4gICAgb3BlbmVkICAgICAgICA6IHByb3BUeXBlcy5ib29sLFxuICAgIG9wZW5lZENhbGxiYWNrOiBwcm9wVHlwZXMuZnVuYyxcblxuICAgIGhlYWRlciAgICAgIDogcHJvcFR5cGVzLmFueSxcbiAgICBoZWFkZXJEYXJrICA6IHByb3BUeXBlcy5ib29sLFxuICAgIGhlYWRlclN0eWxlczogcHJvcFR5cGVzLm9iamVjdCxcblxuICAgIGNoaWxkcmVuIDogcHJvcFR5cGVzLmFueSxcbiAgICBjbGFzc05hbWU6IHByb3BUeXBlcy5zdHJpbmcsXG5cbiAgICBzdHlsZXMgICAgOiBwcm9wVHlwZXMub2JqZWN0LFxuXG4gICAgd2l0aEljb24gIDogcHJvcFR5cGVzLmJvb2wsXG4gICAgaWNvblNpemUgIDogcHJvcFR5cGVzLm51bWJlcixcbiAgICBpY29uU3R5bGVzOiBwcm9wVHlwZXMub2JqZWN0LFxuXG4gICAgdG9nZ2xlQ2FsbGJhY2s6IHByb3BUeXBlcy5mdW5jLFxufTtcblxuLyogRXhwb3J0aW5nICovXG5leHBvcnQgZGVmYXVsdCBBY2NvcmRpb247XG4iXX0= */");
/* Component Header Column Styles */

var columnStyles = {
  boxSizing: 'border-box',
  display: 'inline-block',
  verticalAlign: 'middle'
};
/* Component Header Icon Column Styles */

var IconColumn = (
/*#__PURE__*/
0, _styledBase.default)('div', {
  target: "e869uf2"
})(function (props) {
  var _objectSpread2;

  return _objectSpread({}, columnStyles, (_objectSpread2 = {
    width: iconColumn,
    lineHeight: 0,
    margin: '-2px 0'
  }, _objectSpread2[_constants.MEDIA_QUERIES.LT.SM] = {
    margin: 0
  }, _objectSpread2));
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0FjY29yZGlvbi9BY2NvcmRpb24uanN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlDbUIiLCJmaWxlIjoiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvQWNjb3JkaW9uL0FjY29yZGlvbi5qc3giLCJzb3VyY2VzQ29udGVudCI6WyIvKiBQYWNrYWdlcyAqL1xuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgcHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuXG4vKiBIZWxwZXIgQ29uc3RhbnRzICovXG5pbXBvcnQgeyBHUklELCBNRURJQV9RVUVSSUVTLCBTQ1JFRU5fU0laRVMsIFNJWkVTIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzJztcblxuLyogSGVscGVyIENvbXBvbmVudHMgKi9cbmltcG9ydCB7IExpc3RJdGVtLCBJY29uIH0gZnJvbSAnLi4vJztcblxuLyogQ29tcG9uZW50IFN0eWxlcyAqL1xuY29uc3QgX2ljb25TaXplICAgPSAod2luZG93LmlubmVyV2lkdGggPiBTQ1JFRU5fU0laRVMuU00gPyAyMiA6IDMwKTtcbmNvbnN0IGljb25Db2x1bW4gID0gKF9pY29uU2l6ZSArIChHUklELkNPTlRBSU5FUl9QQURESU5HICAvIDIpICsgR1JJRC5VTklUKTtcblxuLyogQ29tcG9uZW50IFN0eWxlcyAqL1xuY29uc3QgQXBoQWNjb3JkaW9uID0gc3R5bGVkKCdkaXYnKShwcm9wcyA9PiAoe1xuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgIGRpc3BsYXkgIDogJ2Jsb2NrJyxcblxuICAgIGZvbnRTaXplICA6IFNJWkVTLk1ELkZPTlRfU0laRSxcbiAgICBsaW5lSGVpZ2h0OiBTSVpFUy5NRC5MSU5FX0hFSUdIVCxcblxuICAgIC4uLnByb3BzLnN0eWxlcyxcbn0pKTtcblxuLyogQ29tcG9uZW50IEhlYWRlciBTdHlsZXMgKi9cbmNvbnN0IEhlYWRlciA9IHN0eWxlZCgnZGl2JykocHJvcHMgPT4gKHtcbiAgICBib3hTaXppbmcgOiAnYm9yZGVyLWJveCcsXG4gICAgZGlzcGxheSAgIDogJ2Jsb2NrJyxcbiAgICBsaW5lSGVpZ2h0OiAwLFxufSkpO1xuXG4vKiBDb21wb25lbnQgSGVhZGVyIENvbHVtbiBTdHlsZXMgKi9cbmNvbnN0IGNvbHVtblN0eWxlcyA9IHtcbiAgICBib3hTaXppbmcgICAgOiAnYm9yZGVyLWJveCcsXG4gICAgZGlzcGxheSAgICAgIDogJ2lubGluZS1ibG9jaycsXG4gICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG59O1xuXG4vKiBDb21wb25lbnQgSGVhZGVyIEljb24gQ29sdW1uIFN0eWxlcyAqL1xuY29uc3QgSWNvbkNvbHVtbiA9IHN0eWxlZCgnZGl2JykocHJvcHMgPT4gKHtcbiAgICAuLi5jb2x1bW5TdHlsZXMsXG4gICAgd2lkdGg6IGljb25Db2x1bW4sXG4gICAgbGluZUhlaWdodDogMCxcbiAgICBtYXJnaW46ICctMnB4IDAnLFxuXG4gICAgW01FRElBX1FVRVJJRVMuTFQuU01dOiB7XG4gICAgICAgIG1hcmdpbjogMCxcbiAgICB9LFxufSkpO1xuXG4vKiBDb21wb25lbnQgSGVhZGVyIENvbnRlbnQgQ29sdW1uIFN0eWxlcyAqL1xuY29uc3QgQ29udGVudENvbHVtbiA9IHN0eWxlZCgnZGl2JykocHJvcHMgPT4gKHtcbiAgICAuLi5jb2x1bW5TdHlsZXMsXG4gICAgd2lkdGg6IGBjYWxjKDEwMCUgLSAke2ljb25Db2x1bW59KWAsXG4gICAgbGluZUhlaWdodDogJzIwcHgnLFxufSkpO1xuXG4vKiBDb21wb25lbnQgSXRzZWxmICovXG5mdW5jdGlvbiBBY2NvcmRpb24ocHJvcHMpIHtcbiAgICAvKipcbiAgICAgKiBJbmhlcml0IHByb3BzXG4gICAgICovXG4gICAgY29uc3Qge1xuICAgICAgICBoZWFkZXIsXG4gICAgICAgIGhlYWRlckRhcmssXG4gICAgICAgIGhlYWRlclByb3BzLFxuICAgICAgICBoZWFkZXJTdHlsZXMsXG5cbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGVzLFxuXG4gICAgICAgIHdpdGhJY29uLFxuICAgICAgICBpY29uU2l6ZSxcbiAgICAgICAgaWNvblByb3BzLFxuICAgICAgICBpY29uU3R5bGVzLFxuICAgIH0gPSBwcm9wcztcblxuICAgIC8qKlxuICAgICAqIExvY2FsIHZhbHVlc1xuICAgICAqL1xuICAgIGNvbnN0IFsgb3BlbmVkLCBzZXRPcGVuZWQgXSA9IHVzZVN0YXRlKHByb3BzLm9wZW5lZCB8fCBmYWxzZSk7XG5cbiAgICAvKipcbiAgICAgKiBUb2dnbGUgY2hpbGRyZW5zIHZpc2liaWxpdHlcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b2dnbGUoKSB7XG4gICAgICAgIGNvbnN0IHRvZ2dsZUNhbGxiYWNrID0gKHByb3BzLnRvZ2dsZUNhbGxiYWNrIHx8IHByb3BzLm9wZW5lZENhbGxiYWNrKTtcbiAgICAgICAgY29uc3QgaXNPcGVuZWQgICAgICAgPSAhb3BlbmVkO1xuXG4gICAgICAgIHNldE9wZW5lZChpc09wZW5lZCk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiB0b2dnbGVDYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdG9nZ2xlQ2FsbGJhY2soaXNPcGVuZWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExpc3RlbiBmb3IgY2hhbmdlc1xuICAgICAqL1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHNldE9wZW5lZChwcm9wcy5vcGVuZWQpO1xuICAgIH0sIFsgcHJvcHMub3BlbmVkIF0pO1xuXG4gICAgLyoqXG4gICAgICogUmVuZGVyXG4gICAgICovXG4gICAgcmV0dXJuIChcbiAgICAgICAgPEFwaEFjY29yZGlvblxuICAgICAgICAgICAgc3R5bGVzPXtzdHlsZXN9XG4gICAgICAgICAgICBjbGFzc05hbWU9e2BhcGgtYWNjb3JkaW9uICR7Y2xhc3NOYW1lfWB9PlxuICAgICAgICAgICAgPExpc3RJdGVtXG4gICAgICAgICAgICAgICAgey4uLmhlYWRlclByb3BzfVxuICAgICAgICAgICAgICAgIGhlYWRlcj17aGVhZGVyRGFyayA/IHRydWUgOiBmYWxzZX1cbiAgICAgICAgICAgICAgICBzdHlsZXM9e3sgY3Vyc29yOiAncG9pbnRlcicsIHBhZGRpbmdSaWdodDogJzE1cHgnLCBwYWRkaW5nTGVmdDogJzE1cHgnLCAuLi5oZWFkZXJTdHlsZXMgfX1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXt0b2dnbGV9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYXBoLWFjY29yZGlvbl9faGVhZGVyXCI+XG4gICAgICAgICAgICAgICAge2NoaWxkcmVuID8gKFxuICAgICAgICAgICAgICAgICAgICA8SGVhZGVyIGNsYXNzTmFtZT1cImFwaC1hY2NvcmRpb25fX2hlYWRlci1yb3dcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt3aXRoSWNvbiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgPEljb25Db2x1bW4gY2xhc3NOYW1lPVwiYXBoLWFjY29yZGlvbl9faGVhZGVyX19jb2wtaWNvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJY29uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU9e2ljb25TaXplIHx8IF9pY29uU2l6ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2x1Zz17YGFycm93LSR7b3BlbmVkID8gJ3VwJyA6ICdkb3duJ30tY2lyY2xlYH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVzPXtpY29uU3R5bGVzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Li4uaWNvblByb3BzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0ljb25Db2x1bW4+fVxuICAgICAgICAgICAgICAgICAgICAgICAgPENvbnRlbnRDb2x1bW4gY2xhc3NOYW1lPVwiYXBoLWFjY29yZGlvbl9faGVhZGVyX19jb2wtY29udGVudFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtoZWFkZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0NvbnRlbnRDb2x1bW4+XG4gICAgICAgICAgICAgICAgICAgIDwvSGVhZGVyPlxuICAgICAgICAgICAgICAgICkgOiBoZWFkZXJ9XG4gICAgICAgICAgICA8L0xpc3RJdGVtPlxuICAgICAgICAgICAge29wZW5lZCAmJiBjaGlsZHJlbn1cbiAgICAgICAgPC9BcGhBY2NvcmRpb24+XG4gICAgKTtcbn07XG5cbi8qIERlZmF1bHQgUHJvcHMgKi9cbkFjY29yZGlvbi5kZWZhdWx0UHJvcHMgPSB7XG4gICAgb3BlbmVkICAgOiBmYWxzZSxcbiAgICBoZWFkZXIgICA6ICcnLFxuICAgIGNsYXNzTmFtZTogJycsXG5cbiAgICB3aXRoSWNvbiA6IHRydWUsXG59O1xuXG4vKiBQcm9wZXJ0aWVzIFR5cGVzICovXG5BY2NvcmRpb24ucHJvcFR5cGVzID0ge1xuICAgIG9wZW5lZCAgICAgICAgOiBwcm9wVHlwZXMuYm9vbCxcbiAgICBvcGVuZWRDYWxsYmFjazogcHJvcFR5cGVzLmZ1bmMsXG5cbiAgICBoZWFkZXIgICAgICA6IHByb3BUeXBlcy5hbnksXG4gICAgaGVhZGVyRGFyayAgOiBwcm9wVHlwZXMuYm9vbCxcbiAgICBoZWFkZXJTdHlsZXM6IHByb3BUeXBlcy5vYmplY3QsXG5cbiAgICBjaGlsZHJlbiA6IHByb3BUeXBlcy5hbnksXG4gICAgY2xhc3NOYW1lOiBwcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgc3R5bGVzICAgIDogcHJvcFR5cGVzLm9iamVjdCxcblxuICAgIHdpdGhJY29uICA6IHByb3BUeXBlcy5ib29sLFxuICAgIGljb25TaXplICA6IHByb3BUeXBlcy5udW1iZXIsXG4gICAgaWNvblN0eWxlczogcHJvcFR5cGVzLm9iamVjdCxcblxuICAgIHRvZ2dsZUNhbGxiYWNrOiBwcm9wVHlwZXMuZnVuYyxcbn07XG5cbi8qIEV4cG9ydGluZyAqL1xuZXhwb3J0IGRlZmF1bHQgQWNjb3JkaW9uO1xuIl19 */");
/* Component Header Content Column Styles */

var ContentColumn = (
/*#__PURE__*/
0, _styledBase.default)('div', {
  target: "e869uf3"
})(function (props) {
  return _objectSpread({}, columnStyles, {
    width: "calc(100% - " + iconColumn + ")",
    lineHeight: '20px'
  });
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0FjY29yZGlvbi9BY2NvcmRpb24uanN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFEc0IiLCJmaWxlIjoiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvQWNjb3JkaW9uL0FjY29yZGlvbi5qc3giLCJzb3VyY2VzQ29udGVudCI6WyIvKiBQYWNrYWdlcyAqL1xuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgcHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuXG4vKiBIZWxwZXIgQ29uc3RhbnRzICovXG5pbXBvcnQgeyBHUklELCBNRURJQV9RVUVSSUVTLCBTQ1JFRU5fU0laRVMsIFNJWkVTIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzJztcblxuLyogSGVscGVyIENvbXBvbmVudHMgKi9cbmltcG9ydCB7IExpc3RJdGVtLCBJY29uIH0gZnJvbSAnLi4vJztcblxuLyogQ29tcG9uZW50IFN0eWxlcyAqL1xuY29uc3QgX2ljb25TaXplICAgPSAod2luZG93LmlubmVyV2lkdGggPiBTQ1JFRU5fU0laRVMuU00gPyAyMiA6IDMwKTtcbmNvbnN0IGljb25Db2x1bW4gID0gKF9pY29uU2l6ZSArIChHUklELkNPTlRBSU5FUl9QQURESU5HICAvIDIpICsgR1JJRC5VTklUKTtcblxuLyogQ29tcG9uZW50IFN0eWxlcyAqL1xuY29uc3QgQXBoQWNjb3JkaW9uID0gc3R5bGVkKCdkaXYnKShwcm9wcyA9PiAoe1xuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgIGRpc3BsYXkgIDogJ2Jsb2NrJyxcblxuICAgIGZvbnRTaXplICA6IFNJWkVTLk1ELkZPTlRfU0laRSxcbiAgICBsaW5lSGVpZ2h0OiBTSVpFUy5NRC5MSU5FX0hFSUdIVCxcblxuICAgIC4uLnByb3BzLnN0eWxlcyxcbn0pKTtcblxuLyogQ29tcG9uZW50IEhlYWRlciBTdHlsZXMgKi9cbmNvbnN0IEhlYWRlciA9IHN0eWxlZCgnZGl2JykocHJvcHMgPT4gKHtcbiAgICBib3hTaXppbmcgOiAnYm9yZGVyLWJveCcsXG4gICAgZGlzcGxheSAgIDogJ2Jsb2NrJyxcbiAgICBsaW5lSGVpZ2h0OiAwLFxufSkpO1xuXG4vKiBDb21wb25lbnQgSGVhZGVyIENvbHVtbiBTdHlsZXMgKi9cbmNvbnN0IGNvbHVtblN0eWxlcyA9IHtcbiAgICBib3hTaXppbmcgICAgOiAnYm9yZGVyLWJveCcsXG4gICAgZGlzcGxheSAgICAgIDogJ2lubGluZS1ibG9jaycsXG4gICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG59O1xuXG4vKiBDb21wb25lbnQgSGVhZGVyIEljb24gQ29sdW1uIFN0eWxlcyAqL1xuY29uc3QgSWNvbkNvbHVtbiA9IHN0eWxlZCgnZGl2JykocHJvcHMgPT4gKHtcbiAgICAuLi5jb2x1bW5TdHlsZXMsXG4gICAgd2lkdGg6IGljb25Db2x1bW4sXG4gICAgbGluZUhlaWdodDogMCxcbiAgICBtYXJnaW46ICctMnB4IDAnLFxuXG4gICAgW01FRElBX1FVRVJJRVMuTFQuU01dOiB7XG4gICAgICAgIG1hcmdpbjogMCxcbiAgICB9LFxufSkpO1xuXG4vKiBDb21wb25lbnQgSGVhZGVyIENvbnRlbnQgQ29sdW1uIFN0eWxlcyAqL1xuY29uc3QgQ29udGVudENvbHVtbiA9IHN0eWxlZCgnZGl2JykocHJvcHMgPT4gKHtcbiAgICAuLi5jb2x1bW5TdHlsZXMsXG4gICAgd2lkdGg6IGBjYWxjKDEwMCUgLSAke2ljb25Db2x1bW59KWAsXG4gICAgbGluZUhlaWdodDogJzIwcHgnLFxufSkpO1xuXG4vKiBDb21wb25lbnQgSXRzZWxmICovXG5mdW5jdGlvbiBBY2NvcmRpb24ocHJvcHMpIHtcbiAgICAvKipcbiAgICAgKiBJbmhlcml0IHByb3BzXG4gICAgICovXG4gICAgY29uc3Qge1xuICAgICAgICBoZWFkZXIsXG4gICAgICAgIGhlYWRlckRhcmssXG4gICAgICAgIGhlYWRlclByb3BzLFxuICAgICAgICBoZWFkZXJTdHlsZXMsXG5cbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGVzLFxuXG4gICAgICAgIHdpdGhJY29uLFxuICAgICAgICBpY29uU2l6ZSxcbiAgICAgICAgaWNvblByb3BzLFxuICAgICAgICBpY29uU3R5bGVzLFxuICAgIH0gPSBwcm9wcztcblxuICAgIC8qKlxuICAgICAqIExvY2FsIHZhbHVlc1xuICAgICAqL1xuICAgIGNvbnN0IFsgb3BlbmVkLCBzZXRPcGVuZWQgXSA9IHVzZVN0YXRlKHByb3BzLm9wZW5lZCB8fCBmYWxzZSk7XG5cbiAgICAvKipcbiAgICAgKiBUb2dnbGUgY2hpbGRyZW5zIHZpc2liaWxpdHlcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b2dnbGUoKSB7XG4gICAgICAgIGNvbnN0IHRvZ2dsZUNhbGxiYWNrID0gKHByb3BzLnRvZ2dsZUNhbGxiYWNrIHx8IHByb3BzLm9wZW5lZENhbGxiYWNrKTtcbiAgICAgICAgY29uc3QgaXNPcGVuZWQgICAgICAgPSAhb3BlbmVkO1xuXG4gICAgICAgIHNldE9wZW5lZChpc09wZW5lZCk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiB0b2dnbGVDYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdG9nZ2xlQ2FsbGJhY2soaXNPcGVuZWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExpc3RlbiBmb3IgY2hhbmdlc1xuICAgICAqL1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHNldE9wZW5lZChwcm9wcy5vcGVuZWQpO1xuICAgIH0sIFsgcHJvcHMub3BlbmVkIF0pO1xuXG4gICAgLyoqXG4gICAgICogUmVuZGVyXG4gICAgICovXG4gICAgcmV0dXJuIChcbiAgICAgICAgPEFwaEFjY29yZGlvblxuICAgICAgICAgICAgc3R5bGVzPXtzdHlsZXN9XG4gICAgICAgICAgICBjbGFzc05hbWU9e2BhcGgtYWNjb3JkaW9uICR7Y2xhc3NOYW1lfWB9PlxuICAgICAgICAgICAgPExpc3RJdGVtXG4gICAgICAgICAgICAgICAgey4uLmhlYWRlclByb3BzfVxuICAgICAgICAgICAgICAgIGhlYWRlcj17aGVhZGVyRGFyayA/IHRydWUgOiBmYWxzZX1cbiAgICAgICAgICAgICAgICBzdHlsZXM9e3sgY3Vyc29yOiAncG9pbnRlcicsIHBhZGRpbmdSaWdodDogJzE1cHgnLCBwYWRkaW5nTGVmdDogJzE1cHgnLCAuLi5oZWFkZXJTdHlsZXMgfX1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXt0b2dnbGV9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYXBoLWFjY29yZGlvbl9faGVhZGVyXCI+XG4gICAgICAgICAgICAgICAge2NoaWxkcmVuID8gKFxuICAgICAgICAgICAgICAgICAgICA8SGVhZGVyIGNsYXNzTmFtZT1cImFwaC1hY2NvcmRpb25fX2hlYWRlci1yb3dcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt3aXRoSWNvbiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgPEljb25Db2x1bW4gY2xhc3NOYW1lPVwiYXBoLWFjY29yZGlvbl9faGVhZGVyX19jb2wtaWNvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJY29uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU9e2ljb25TaXplIHx8IF9pY29uU2l6ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2x1Zz17YGFycm93LSR7b3BlbmVkID8gJ3VwJyA6ICdkb3duJ30tY2lyY2xlYH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVzPXtpY29uU3R5bGVzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Li4uaWNvblByb3BzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0ljb25Db2x1bW4+fVxuICAgICAgICAgICAgICAgICAgICAgICAgPENvbnRlbnRDb2x1bW4gY2xhc3NOYW1lPVwiYXBoLWFjY29yZGlvbl9faGVhZGVyX19jb2wtY29udGVudFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtoZWFkZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0NvbnRlbnRDb2x1bW4+XG4gICAgICAgICAgICAgICAgICAgIDwvSGVhZGVyPlxuICAgICAgICAgICAgICAgICkgOiBoZWFkZXJ9XG4gICAgICAgICAgICA8L0xpc3RJdGVtPlxuICAgICAgICAgICAge29wZW5lZCAmJiBjaGlsZHJlbn1cbiAgICAgICAgPC9BcGhBY2NvcmRpb24+XG4gICAgKTtcbn07XG5cbi8qIERlZmF1bHQgUHJvcHMgKi9cbkFjY29yZGlvbi5kZWZhdWx0UHJvcHMgPSB7XG4gICAgb3BlbmVkICAgOiBmYWxzZSxcbiAgICBoZWFkZXIgICA6ICcnLFxuICAgIGNsYXNzTmFtZTogJycsXG5cbiAgICB3aXRoSWNvbiA6IHRydWUsXG59O1xuXG4vKiBQcm9wZXJ0aWVzIFR5cGVzICovXG5BY2NvcmRpb24ucHJvcFR5cGVzID0ge1xuICAgIG9wZW5lZCAgICAgICAgOiBwcm9wVHlwZXMuYm9vbCxcbiAgICBvcGVuZWRDYWxsYmFjazogcHJvcFR5cGVzLmZ1bmMsXG5cbiAgICBoZWFkZXIgICAgICA6IHByb3BUeXBlcy5hbnksXG4gICAgaGVhZGVyRGFyayAgOiBwcm9wVHlwZXMuYm9vbCxcbiAgICBoZWFkZXJTdHlsZXM6IHByb3BUeXBlcy5vYmplY3QsXG5cbiAgICBjaGlsZHJlbiA6IHByb3BUeXBlcy5hbnksXG4gICAgY2xhc3NOYW1lOiBwcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgc3R5bGVzICAgIDogcHJvcFR5cGVzLm9iamVjdCxcblxuICAgIHdpdGhJY29uICA6IHByb3BUeXBlcy5ib29sLFxuICAgIGljb25TaXplICA6IHByb3BUeXBlcy5udW1iZXIsXG4gICAgaWNvblN0eWxlczogcHJvcFR5cGVzLm9iamVjdCxcblxuICAgIHRvZ2dsZUNhbGxiYWNrOiBwcm9wVHlwZXMuZnVuYyxcbn07XG5cbi8qIEV4cG9ydGluZyAqL1xuZXhwb3J0IGRlZmF1bHQgQWNjb3JkaW9uO1xuIl19 */");
/* Component Itself */

function Accordion(props) {
  /**
   * Inherit props
   */
  var header = props.header,
      headerDark = props.headerDark,
      headerProps = props.headerProps,
      headerStyles = props.headerStyles,
      children = props.children,
      className = props.className,
      styles = props.styles,
      withIcon = props.withIcon,
      iconSize = props.iconSize,
      iconProps = props.iconProps,
      iconStyles = props.iconStyles;
  /**
   * Local values
   */

  var _useState = (0, _react.useState)(props.opened || false),
      opened = _useState[0],
      setOpened = _useState[1];
  /**
   * Toggle childrens visibility
   */


  function toggle() {
    var toggleCallback = props.toggleCallback || props.openedCallback;
    var isOpened = !opened;
    setOpened(isOpened);

    if (typeof toggleCallback !== 'function') {
      return;
    }

    toggleCallback(isOpened);
  }
  /**
   * Listen for changes
   */


  (0, _react.useEffect)(function () {
    setOpened(props.opened);
  }, [props.opened]);
  /**
   * Render
   */

  return _react.default.createElement(AphAccordion, {
    styles: styles,
    className: "aph-accordion " + className
  }, _react.default.createElement(_.ListItem, _extends({}, headerProps, {
    header: headerDark ? true : false,
    styles: _objectSpread({
      cursor: 'pointer',
      paddingRight: '15px',
      paddingLeft: '15px'
    }, headerStyles),
    onClick: toggle,
    className: "aph-accordion__header"
  }), children ? _react.default.createElement(Header, {
    className: "aph-accordion__header-row"
  }, withIcon && _react.default.createElement(IconColumn, {
    className: "aph-accordion__header__col-icon"
  }, _react.default.createElement(_.Icon, _extends({
    size: iconSize || _iconSize,
    slug: "arrow-" + (opened ? 'up' : 'down') + "-circle",
    styles: iconStyles
  }, iconProps))), _react.default.createElement(ContentColumn, {
    className: "aph-accordion__header__col-content"
  }, header)) : header), opened && children);
}

;
/* Default Props */

Accordion.defaultProps = {
  opened: false,
  header: '',
  className: '',
  withIcon: true
};
/* Properties Types */

Accordion.propTypes = {
  opened: _propTypes.default.bool,
  openedCallback: _propTypes.default.func,
  header: _propTypes.default.any,
  headerDark: _propTypes.default.bool,
  headerStyles: _propTypes.default.object,
  children: _propTypes.default.any,
  className: _propTypes.default.string,
  styles: _propTypes.default.object,
  withIcon: _propTypes.default.bool,
  iconSize: _propTypes.default.number,
  iconStyles: _propTypes.default.object,
  toggleCallback: _propTypes.default.func
};
/* Exporting */

var _default = Accordion;
exports.default = _default;
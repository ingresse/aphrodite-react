"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _constants = require("../../../constants");

var _utils = require("../../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* Framework Definitions */
var aphFormSwitchCommonStyles = "\n    box-sizing: border-box;\n    cursor    : pointer;\n";
/* Component Wrapper Styles */

var AphFormSwitchWrapper = (0, _styledBase.default)("label", {
  target: "e64k3mr0"
})(aphFormSwitchCommonStyles, ";position:relative;display:flex;min-width:50px;min-height:30px;-webkit-box-align:center;-ms-flex-align:center;align-items:center;font-size:", function (props) {
  return props.textSmall ? _constants.SIZES.SM.FONT_SIZE : null;
}, ";text-align:", function (props) {
  return props.textAlign || 'left';
}, ";", function (props) {
  return props.toggleAlign !== 'right' ? {
    paddingLeft: '50px',
    '.aph-form-switch__wrapper': {
      left: 0
    }
  } : {
    paddingRight: '50px',
    '.aph-form-switch__wrapper': {
      right: 0
    }
  };
}, ";", function (props) {
  return props.styles;
}, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0Zvcm0vU3dpdGNoL0Zvcm1Db250cm9sU3dpdGNoU3R5bGVzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWF5QyIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Gb3JtL1N3aXRjaC9Gb3JtQ29udHJvbFN3aXRjaFN0eWxlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIFBhY2thZ2VzICovXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5cbi8qIEZyYW1ld29yayBEZWZpbml0aW9ucyAqL1xuaW1wb3J0IHsgU0laRVMgfSBmcm9tICcuLi8uLi8uLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgY29sb3JzIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMnO1xuXG5jb25zdCBhcGhGb3JtU3dpdGNoQ29tbW9uU3R5bGVzID0gYFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgY3Vyc29yICAgIDogcG9pbnRlcjtcbmA7XG5cbi8qIENvbXBvbmVudCBXcmFwcGVyIFN0eWxlcyAqL1xuY29uc3QgQXBoRm9ybVN3aXRjaFdyYXBwZXIgPSBzdHlsZWQubGFiZWxgXG4gICAgJHthcGhGb3JtU3dpdGNoQ29tbW9uU3R5bGVzfTtcblxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBkaXNwbGF5IDogZmxleDtcblxuICAgIG1pbi13aWR0aCA6IDUwcHg7XG4gICAgbWluLWhlaWdodDogMzBweDtcblxuICAgIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XG4gICAgLW1zLWZsZXgtYWxpZ24gICA6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtcyAgICAgIDogY2VudGVyO1xuXG4gICAgZm9udC1zaXplIDogJHtwcm9wcyA9PiBwcm9wcy50ZXh0U21hbGwgPyAoU0laRVMuU00uRk9OVF9TSVpFKSA6IG51bGx9O1xuICAgIHRleHQtYWxpZ246ICR7cHJvcHMgPT4gcHJvcHMudGV4dEFsaWduIHx8ICdsZWZ0J307XG5cbiAgICAkeyhwcm9wcyA9PiAocHJvcHMudG9nZ2xlQWxpZ24gIT09ICdyaWdodCcpID8ge1xuICAgICAgICBwYWRkaW5nTGVmdDogJzUwcHgnLFxuXG4gICAgICAgICcuYXBoLWZvcm0tc3dpdGNoX193cmFwcGVyJzoge1xuICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgfSxcbiAgICB9IDoge1xuICAgICAgICBwYWRkaW5nUmlnaHQ6ICc1MHB4JyxcblxuICAgICAgICAnLmFwaC1mb3JtLXN3aXRjaF9fd3JhcHBlcic6IHtcbiAgICAgICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICB9LFxuICAgIH0pfTtcblxuICAgICR7cHJvcHMgPT4gcHJvcHMuc3R5bGVzfTtcbmA7XG5cbi8qIENvbXBvbmVudCBUb2dnbGUgV3JhcHBlciBTdHlsZXMgKi9cbmNvbnN0IEFwaEZvcm1Td2l0Y2hUb2dnbGVXcmFwcGVyID0gc3R5bGVkLmxhYmVsYFxuICAgICR7YXBoRm9ybVN3aXRjaENvbW1vblN0eWxlc307XG5cbiAgICBwb3NpdGlvbiA6IGFic29sdXRlO1xuICAgIGRpc3BsYXkgIDogYmxvY2s7XG4gICAgdG9wICAgICAgOiA1MCU7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xuXG4gICAgbGluZS1oZWlnaHQ6IDA7XG5gO1xuXG4vKiBDb21wb25lbnQgVG9nZ2xlIFN0eWxlcyAqL1xuY29uc3QgQXBoRm9ybVN3aXRjaFRvZ2dsZSA9IHN0eWxlZC5sYWJlbGBcbiAgICAke2FwaEZvcm1Td2l0Y2hDb21tb25TdHlsZXN9O1xuXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcCAgICAgOiAwO1xuXG4gICAgd2lkdGggOiAzMHB4O1xuICAgIGhlaWdodDogMzBweDtcblxuICAgIHRyYW5zaXRpb24tcHJvcGVydHkgICAgICAgOiByaWdodCwgbGVmdDtcbiAgICB0cmFuc2l0aW9uLWR1cmF0aW9uICAgICAgIDogMC4yNXM7XG4gICAgdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2U7XG5cbiAgICBib3JkZXItcmFkaXVzICAgOiA1MCU7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuZ2V0KCd3aGl0ZScpfTtcbiAgICBib3gtc2hhZG93ICAgICAgOiAwIDAgNXB4IDAgJHtjb2xvcnMuZ2V0KCdibGFjaycsICdvcmlnaW5hbCcsIDAuMjUpfTtcbmA7XG5cbi8qIENvbXBvbmVudCBJbnB1dCBTdHlsZXMgKi9cbmNvbnN0IEFwaEZvcm1Td2l0Y2hJbnB1dCA9IHN0eWxlZC5pbnB1dGBcbiAgICAke2FwaEZvcm1Td2l0Y2hDb21tb25TdHlsZXN9O1xuXG4gICAgcGFkZGluZzogMDtcbiAgICBtYXJnaW4gOiA1cHggMDtcblxuICAgIHdpZHRoICAgICAgICA6IDUwcHg7XG4gICAgaGVpZ2h0ICAgICAgIDogMjBweDtcbiAgICBib3JkZXItcmFkaXVzOiAxNXB4O1xuXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuZ2V0KCdtZXJjdXJ5JywgJ2xpZ2h0Jyl9O1xuXG4gICAgYm9yZGVyIDogMDtcbiAgICBvdXRsaW5lOiAwO1xuXG4gICAgdHJhbnNpdGlvbi1wcm9wZXJ0eSAgICAgICA6IGJhY2tncm91bmQtY29sb3I7XG4gICAgdHJhbnNpdGlvbi1kdXJhdGlvbiAgICAgICA6IDAuMjVzO1xuICAgIHRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlO1xuXG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlICAgICAgICAgOiBub25lO1xuICAgIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogdHJhbnNwYXJlbnQ7XG5cbiAgICAmLmRpc2FibGVkLFxuICAgICY6ZGlzYWJsZWQge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5nZXQoJ21lcmN1cnknLCAnbGlnaHQnLCAwLjUpfTtcbiAgICB9XG5cbiAgICAmOmNoZWNrZWQge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5nZXQoJ2JhbWJvbycpfTtcblxuICAgICAgICArIC5hcGgtZm9ybS1zd2l0Y2gge1xuICAgICAgICAgICAgJl9fdG9nZ2xlIHtcbiAgICAgICAgICAgICAgICBsZWZ0OiAyMHB4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgJjpkaXNhYmxlZCB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5nZXQoJ2JhbWJvbycsICdsaWdodCcsIDAuNSl9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgKyAuYXBoLWZvcm0tc3dpdGNoIHtcbiAgICAgICAgJl9fdG9nZ2xlIHtcbiAgICAgICAgICAgIGxlZnQ6IDA7XG4gICAgICAgIH1cbiAgICB9XG5gO1xuXG4vKiBDb21wb25lbnQgQ29udGVudCBTdHlsZXMgKi9cbmNvbnN0IEFwaEZvcm1Td2l0Y2hDb250ZW50ID0gc3R5bGVkLmxhYmVsYFxuICAgICR7YXBoRm9ybVN3aXRjaENvbW1vblN0eWxlc307XG5cbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICB3aWR0aCAgOiAxMDAlO1xuXG4gICAgd29yZC1icmVhazogYnJlYWstYWxsO1xuXG4gICAgJHtwcm9wcyA9PiAoIXByb3BzLmhhc0NoaWxkcmVuKSA/IG51bGwgOiAoKHByb3BzLnRvZ2dsZUFsaWduICE9PSAncmlnaHQnKSA/IHtcbiAgICAgICAgcGFkZGluZ0xlZnQ6ICcxMHB4JyxcbiAgICB9IDoge1xuICAgICAgICBwYWRkaW5nUmlnaHQ6ICcxMHB4JyxcbiAgICB9KX07XG5gO1xuXG4vKiBDb21wb25lbnQgU3R5bGVzICovXG5jb25zdCBBcGhGb3JtU3dpdGNoID0ge1xuICAgIFdyYXBwZXIgICAgICA6IEFwaEZvcm1Td2l0Y2hXcmFwcGVyLFxuICAgIFRvZ2dsZVdyYXBwZXI6IEFwaEZvcm1Td2l0Y2hUb2dnbGVXcmFwcGVyLFxuICAgIFRvZ2dsZSAgICAgICA6IEFwaEZvcm1Td2l0Y2hUb2dnbGUsXG4gICAgSW5wdXQgICAgICAgIDogQXBoRm9ybVN3aXRjaElucHV0LFxuICAgIENvbnRlbnQgICAgICA6IEFwaEZvcm1Td2l0Y2hDb250ZW50LFxufTtcblxuLyogRXhwb3J0aW5nICovXG5leHBvcnQgZGVmYXVsdCBBcGhGb3JtU3dpdGNoO1xuIl19 */"));
/* Component Toggle Wrapper Styles */

var AphFormSwitchToggleWrapper = (0, _styledBase.default)("label", {
  target: "e64k3mr1"
})(aphFormSwitchCommonStyles, ";position:absolute;display:block;top:50%;transform:translateY(-50%);line-height:0;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0Zvcm0vU3dpdGNoL0Zvcm1Db250cm9sU3dpdGNoU3R5bGVzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStDK0MiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRm9ybS9Td2l0Y2gvRm9ybUNvbnRyb2xTd2l0Y2hTdHlsZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBQYWNrYWdlcyAqL1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuXG4vKiBGcmFtZXdvcmsgRGVmaW5pdGlvbnMgKi9cbmltcG9ydCB7IFNJWkVTIH0gZnJvbSAnLi4vLi4vLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzJztcblxuY29uc3QgYXBoRm9ybVN3aXRjaENvbW1vblN0eWxlcyA9IGBcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIGN1cnNvciAgICA6IHBvaW50ZXI7XG5gO1xuXG4vKiBDb21wb25lbnQgV3JhcHBlciBTdHlsZXMgKi9cbmNvbnN0IEFwaEZvcm1Td2l0Y2hXcmFwcGVyID0gc3R5bGVkLmxhYmVsYFxuICAgICR7YXBoRm9ybVN3aXRjaENvbW1vblN0eWxlc307XG5cbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgZGlzcGxheSA6IGZsZXg7XG5cbiAgICBtaW4td2lkdGggOiA1MHB4O1xuICAgIG1pbi1oZWlnaHQ6IDMwcHg7XG5cbiAgICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xuICAgIC1tcy1mbGV4LWFsaWduICAgOiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXMgICAgICA6IGNlbnRlcjtcblxuICAgIGZvbnQtc2l6ZSA6ICR7cHJvcHMgPT4gcHJvcHMudGV4dFNtYWxsID8gKFNJWkVTLlNNLkZPTlRfU0laRSkgOiBudWxsfTtcbiAgICB0ZXh0LWFsaWduOiAke3Byb3BzID0+IHByb3BzLnRleHRBbGlnbiB8fCAnbGVmdCd9O1xuXG4gICAgJHsocHJvcHMgPT4gKHByb3BzLnRvZ2dsZUFsaWduICE9PSAncmlnaHQnKSA/IHtcbiAgICAgICAgcGFkZGluZ0xlZnQ6ICc1MHB4JyxcblxuICAgICAgICAnLmFwaC1mb3JtLXN3aXRjaF9fd3JhcHBlcic6IHtcbiAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIH0sXG4gICAgfSA6IHtcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiAnNTBweCcsXG5cbiAgICAgICAgJy5hcGgtZm9ybS1zd2l0Y2hfX3dyYXBwZXInOiB7XG4gICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgfSxcbiAgICB9KX07XG5cbiAgICAke3Byb3BzID0+IHByb3BzLnN0eWxlc307XG5gO1xuXG4vKiBDb21wb25lbnQgVG9nZ2xlIFdyYXBwZXIgU3R5bGVzICovXG5jb25zdCBBcGhGb3JtU3dpdGNoVG9nZ2xlV3JhcHBlciA9IHN0eWxlZC5sYWJlbGBcbiAgICAke2FwaEZvcm1Td2l0Y2hDb21tb25TdHlsZXN9O1xuXG4gICAgcG9zaXRpb24gOiBhYnNvbHV0ZTtcbiAgICBkaXNwbGF5ICA6IGJsb2NrO1xuICAgIHRvcCAgICAgIDogNTAlO1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcblxuICAgIGxpbmUtaGVpZ2h0OiAwO1xuYDtcblxuLyogQ29tcG9uZW50IFRvZ2dsZSBTdHlsZXMgKi9cbmNvbnN0IEFwaEZvcm1Td2l0Y2hUb2dnbGUgPSBzdHlsZWQubGFiZWxgXG4gICAgJHthcGhGb3JtU3dpdGNoQ29tbW9uU3R5bGVzfTtcblxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3AgICAgIDogMDtcblxuICAgIHdpZHRoIDogMzBweDtcbiAgICBoZWlnaHQ6IDMwcHg7XG5cbiAgICB0cmFuc2l0aW9uLXByb3BlcnR5ICAgICAgIDogcmlnaHQsIGxlZnQ7XG4gICAgdHJhbnNpdGlvbi1kdXJhdGlvbiAgICAgICA6IDAuMjVzO1xuICAgIHRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlO1xuXG4gICAgYm9yZGVyLXJhZGl1cyAgIDogNTAlO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmdldCgnd2hpdGUnKX07XG4gICAgYm94LXNoYWRvdyAgICAgIDogMCAwIDVweCAwICR7Y29sb3JzLmdldCgnYmxhY2snLCAnb3JpZ2luYWwnLCAwLjI1KX07XG5gO1xuXG4vKiBDb21wb25lbnQgSW5wdXQgU3R5bGVzICovXG5jb25zdCBBcGhGb3JtU3dpdGNoSW5wdXQgPSBzdHlsZWQuaW5wdXRgXG4gICAgJHthcGhGb3JtU3dpdGNoQ29tbW9uU3R5bGVzfTtcblxuICAgIHBhZGRpbmc6IDA7XG4gICAgbWFyZ2luIDogNXB4IDA7XG5cbiAgICB3aWR0aCAgICAgICAgOiA1MHB4O1xuICAgIGhlaWdodCAgICAgICA6IDIwcHg7XG4gICAgYm9yZGVyLXJhZGl1czogMTVweDtcblxuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmdldCgnbWVyY3VyeScsICdsaWdodCcpfTtcblxuICAgIGJvcmRlciA6IDA7XG4gICAgb3V0bGluZTogMDtcblxuICAgIHRyYW5zaXRpb24tcHJvcGVydHkgICAgICAgOiBiYWNrZ3JvdW5kLWNvbG9yO1xuICAgIHRyYW5zaXRpb24tZHVyYXRpb24gICAgICAgOiAwLjI1cztcbiAgICB0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZTtcblxuICAgIC13ZWJraXQtYXBwZWFyYW5jZSAgICAgICAgIDogbm9uZTtcbiAgICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHRyYW5zcGFyZW50O1xuXG4gICAgJi5kaXNhYmxlZCxcbiAgICAmOmRpc2FibGVkIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuZ2V0KCdtZXJjdXJ5JywgJ2xpZ2h0JywgMC41KX07XG4gICAgfVxuXG4gICAgJjpjaGVja2VkIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuZ2V0KCdiYW1ib28nKX07XG5cbiAgICAgICAgKyAuYXBoLWZvcm0tc3dpdGNoIHtcbiAgICAgICAgICAgICZfX3RvZ2dsZSB7XG4gICAgICAgICAgICAgICAgbGVmdDogMjBweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgICY6ZGlzYWJsZWQge1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuZ2V0KCdiYW1ib28nLCAnbGlnaHQnLCAwLjUpfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgICsgLmFwaC1mb3JtLXN3aXRjaCB7XG4gICAgICAgICZfX3RvZ2dsZSB7XG4gICAgICAgICAgICBsZWZ0OiAwO1xuICAgICAgICB9XG4gICAgfVxuYDtcblxuLyogQ29tcG9uZW50IENvbnRlbnQgU3R5bGVzICovXG5jb25zdCBBcGhGb3JtU3dpdGNoQ29udGVudCA9IHN0eWxlZC5sYWJlbGBcbiAgICAke2FwaEZvcm1Td2l0Y2hDb21tb25TdHlsZXN9O1xuXG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgd2lkdGggIDogMTAwJTtcblxuICAgIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcblxuICAgICR7cHJvcHMgPT4gKCFwcm9wcy5oYXNDaGlsZHJlbikgPyBudWxsIDogKChwcm9wcy50b2dnbGVBbGlnbiAhPT0gJ3JpZ2h0JykgPyB7XG4gICAgICAgIHBhZGRpbmdMZWZ0OiAnMTBweCcsXG4gICAgfSA6IHtcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiAnMTBweCcsXG4gICAgfSl9O1xuYDtcblxuLyogQ29tcG9uZW50IFN0eWxlcyAqL1xuY29uc3QgQXBoRm9ybVN3aXRjaCA9IHtcbiAgICBXcmFwcGVyICAgICAgOiBBcGhGb3JtU3dpdGNoV3JhcHBlcixcbiAgICBUb2dnbGVXcmFwcGVyOiBBcGhGb3JtU3dpdGNoVG9nZ2xlV3JhcHBlcixcbiAgICBUb2dnbGUgICAgICAgOiBBcGhGb3JtU3dpdGNoVG9nZ2xlLFxuICAgIElucHV0ICAgICAgICA6IEFwaEZvcm1Td2l0Y2hJbnB1dCxcbiAgICBDb250ZW50ICAgICAgOiBBcGhGb3JtU3dpdGNoQ29udGVudCxcbn07XG5cbi8qIEV4cG9ydGluZyAqL1xuZXhwb3J0IGRlZmF1bHQgQXBoRm9ybVN3aXRjaDtcbiJdfQ== */"));
/* Component Toggle Styles */

var AphFormSwitchToggle = (0, _styledBase.default)("label", {
  target: "e64k3mr2"
})(aphFormSwitchCommonStyles, ";position:absolute;top:0;width:30px;height:30px;transition-property:right,left;transition-duration:0.25s;transition-timing-function:ease;border-radius:50%;background-color:", _utils.colors.get('white'), ";box-shadow:0 0 5px 0 ", _utils.colors.get('black', 'original', 0.25), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0Zvcm0vU3dpdGNoL0Zvcm1Db250cm9sU3dpdGNoU3R5bGVzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJEd0MiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRm9ybS9Td2l0Y2gvRm9ybUNvbnRyb2xTd2l0Y2hTdHlsZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBQYWNrYWdlcyAqL1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuXG4vKiBGcmFtZXdvcmsgRGVmaW5pdGlvbnMgKi9cbmltcG9ydCB7IFNJWkVTIH0gZnJvbSAnLi4vLi4vLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzJztcblxuY29uc3QgYXBoRm9ybVN3aXRjaENvbW1vblN0eWxlcyA9IGBcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIGN1cnNvciAgICA6IHBvaW50ZXI7XG5gO1xuXG4vKiBDb21wb25lbnQgV3JhcHBlciBTdHlsZXMgKi9cbmNvbnN0IEFwaEZvcm1Td2l0Y2hXcmFwcGVyID0gc3R5bGVkLmxhYmVsYFxuICAgICR7YXBoRm9ybVN3aXRjaENvbW1vblN0eWxlc307XG5cbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgZGlzcGxheSA6IGZsZXg7XG5cbiAgICBtaW4td2lkdGggOiA1MHB4O1xuICAgIG1pbi1oZWlnaHQ6IDMwcHg7XG5cbiAgICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xuICAgIC1tcy1mbGV4LWFsaWduICAgOiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXMgICAgICA6IGNlbnRlcjtcblxuICAgIGZvbnQtc2l6ZSA6ICR7cHJvcHMgPT4gcHJvcHMudGV4dFNtYWxsID8gKFNJWkVTLlNNLkZPTlRfU0laRSkgOiBudWxsfTtcbiAgICB0ZXh0LWFsaWduOiAke3Byb3BzID0+IHByb3BzLnRleHRBbGlnbiB8fCAnbGVmdCd9O1xuXG4gICAgJHsocHJvcHMgPT4gKHByb3BzLnRvZ2dsZUFsaWduICE9PSAncmlnaHQnKSA/IHtcbiAgICAgICAgcGFkZGluZ0xlZnQ6ICc1MHB4JyxcblxuICAgICAgICAnLmFwaC1mb3JtLXN3aXRjaF9fd3JhcHBlcic6IHtcbiAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIH0sXG4gICAgfSA6IHtcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiAnNTBweCcsXG5cbiAgICAgICAgJy5hcGgtZm9ybS1zd2l0Y2hfX3dyYXBwZXInOiB7XG4gICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgfSxcbiAgICB9KX07XG5cbiAgICAke3Byb3BzID0+IHByb3BzLnN0eWxlc307XG5gO1xuXG4vKiBDb21wb25lbnQgVG9nZ2xlIFdyYXBwZXIgU3R5bGVzICovXG5jb25zdCBBcGhGb3JtU3dpdGNoVG9nZ2xlV3JhcHBlciA9IHN0eWxlZC5sYWJlbGBcbiAgICAke2FwaEZvcm1Td2l0Y2hDb21tb25TdHlsZXN9O1xuXG4gICAgcG9zaXRpb24gOiBhYnNvbHV0ZTtcbiAgICBkaXNwbGF5ICA6IGJsb2NrO1xuICAgIHRvcCAgICAgIDogNTAlO1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcblxuICAgIGxpbmUtaGVpZ2h0OiAwO1xuYDtcblxuLyogQ29tcG9uZW50IFRvZ2dsZSBTdHlsZXMgKi9cbmNvbnN0IEFwaEZvcm1Td2l0Y2hUb2dnbGUgPSBzdHlsZWQubGFiZWxgXG4gICAgJHthcGhGb3JtU3dpdGNoQ29tbW9uU3R5bGVzfTtcblxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3AgICAgIDogMDtcblxuICAgIHdpZHRoIDogMzBweDtcbiAgICBoZWlnaHQ6IDMwcHg7XG5cbiAgICB0cmFuc2l0aW9uLXByb3BlcnR5ICAgICAgIDogcmlnaHQsIGxlZnQ7XG4gICAgdHJhbnNpdGlvbi1kdXJhdGlvbiAgICAgICA6IDAuMjVzO1xuICAgIHRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlO1xuXG4gICAgYm9yZGVyLXJhZGl1cyAgIDogNTAlO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmdldCgnd2hpdGUnKX07XG4gICAgYm94LXNoYWRvdyAgICAgIDogMCAwIDVweCAwICR7Y29sb3JzLmdldCgnYmxhY2snLCAnb3JpZ2luYWwnLCAwLjI1KX07XG5gO1xuXG4vKiBDb21wb25lbnQgSW5wdXQgU3R5bGVzICovXG5jb25zdCBBcGhGb3JtU3dpdGNoSW5wdXQgPSBzdHlsZWQuaW5wdXRgXG4gICAgJHthcGhGb3JtU3dpdGNoQ29tbW9uU3R5bGVzfTtcblxuICAgIHBhZGRpbmc6IDA7XG4gICAgbWFyZ2luIDogNXB4IDA7XG5cbiAgICB3aWR0aCAgICAgICAgOiA1MHB4O1xuICAgIGhlaWdodCAgICAgICA6IDIwcHg7XG4gICAgYm9yZGVyLXJhZGl1czogMTVweDtcblxuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmdldCgnbWVyY3VyeScsICdsaWdodCcpfTtcblxuICAgIGJvcmRlciA6IDA7XG4gICAgb3V0bGluZTogMDtcblxuICAgIHRyYW5zaXRpb24tcHJvcGVydHkgICAgICAgOiBiYWNrZ3JvdW5kLWNvbG9yO1xuICAgIHRyYW5zaXRpb24tZHVyYXRpb24gICAgICAgOiAwLjI1cztcbiAgICB0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZTtcblxuICAgIC13ZWJraXQtYXBwZWFyYW5jZSAgICAgICAgIDogbm9uZTtcbiAgICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHRyYW5zcGFyZW50O1xuXG4gICAgJi5kaXNhYmxlZCxcbiAgICAmOmRpc2FibGVkIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuZ2V0KCdtZXJjdXJ5JywgJ2xpZ2h0JywgMC41KX07XG4gICAgfVxuXG4gICAgJjpjaGVja2VkIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuZ2V0KCdiYW1ib28nKX07XG5cbiAgICAgICAgKyAuYXBoLWZvcm0tc3dpdGNoIHtcbiAgICAgICAgICAgICZfX3RvZ2dsZSB7XG4gICAgICAgICAgICAgICAgbGVmdDogMjBweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgICY6ZGlzYWJsZWQge1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuZ2V0KCdiYW1ib28nLCAnbGlnaHQnLCAwLjUpfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgICsgLmFwaC1mb3JtLXN3aXRjaCB7XG4gICAgICAgICZfX3RvZ2dsZSB7XG4gICAgICAgICAgICBsZWZ0OiAwO1xuICAgICAgICB9XG4gICAgfVxuYDtcblxuLyogQ29tcG9uZW50IENvbnRlbnQgU3R5bGVzICovXG5jb25zdCBBcGhGb3JtU3dpdGNoQ29udGVudCA9IHN0eWxlZC5sYWJlbGBcbiAgICAke2FwaEZvcm1Td2l0Y2hDb21tb25TdHlsZXN9O1xuXG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgd2lkdGggIDogMTAwJTtcblxuICAgIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcblxuICAgICR7cHJvcHMgPT4gKCFwcm9wcy5oYXNDaGlsZHJlbikgPyBudWxsIDogKChwcm9wcy50b2dnbGVBbGlnbiAhPT0gJ3JpZ2h0JykgPyB7XG4gICAgICAgIHBhZGRpbmdMZWZ0OiAnMTBweCcsXG4gICAgfSA6IHtcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiAnMTBweCcsXG4gICAgfSl9O1xuYDtcblxuLyogQ29tcG9uZW50IFN0eWxlcyAqL1xuY29uc3QgQXBoRm9ybVN3aXRjaCA9IHtcbiAgICBXcmFwcGVyICAgICAgOiBBcGhGb3JtU3dpdGNoV3JhcHBlcixcbiAgICBUb2dnbGVXcmFwcGVyOiBBcGhGb3JtU3dpdGNoVG9nZ2xlV3JhcHBlcixcbiAgICBUb2dnbGUgICAgICAgOiBBcGhGb3JtU3dpdGNoVG9nZ2xlLFxuICAgIElucHV0ICAgICAgICA6IEFwaEZvcm1Td2l0Y2hJbnB1dCxcbiAgICBDb250ZW50ICAgICAgOiBBcGhGb3JtU3dpdGNoQ29udGVudCxcbn07XG5cbi8qIEV4cG9ydGluZyAqL1xuZXhwb3J0IGRlZmF1bHQgQXBoRm9ybVN3aXRjaDtcbiJdfQ== */"));
/* Component Input Styles */

var AphFormSwitchInput = (0, _styledBase.default)("input", {
  target: "e64k3mr3"
})(aphFormSwitchCommonStyles, ";padding:0;margin:5px 0;width:50px;height:20px;border-radius:15px;background-color:", _utils.colors.get('mercury', 'light'), ";border:0;outline:0;transition-property:background-color;transition-duration:0.25s;transition-timing-function:ease;-webkit-appearance:none;-webkit-tap-highlight-color:transparent;&.disabled,&:disabled{background-color:", _utils.colors.get('mercury', 'light', 0.5), ";}&:checked{background-color:", _utils.colors.get('bamboo'), ";+ .aph-form-switch{&__toggle{left:20px;}}&:disabled{background-color:", _utils.colors.get('bamboo', 'light', 0.5), ";}}+ .aph-form-switch{&__toggle{left:0;}}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0Zvcm0vU3dpdGNoL0Zvcm1Db250cm9sU3dpdGNoU3R5bGVzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQThFdUMiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRm9ybS9Td2l0Y2gvRm9ybUNvbnRyb2xTd2l0Y2hTdHlsZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBQYWNrYWdlcyAqL1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuXG4vKiBGcmFtZXdvcmsgRGVmaW5pdGlvbnMgKi9cbmltcG9ydCB7IFNJWkVTIH0gZnJvbSAnLi4vLi4vLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzJztcblxuY29uc3QgYXBoRm9ybVN3aXRjaENvbW1vblN0eWxlcyA9IGBcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIGN1cnNvciAgICA6IHBvaW50ZXI7XG5gO1xuXG4vKiBDb21wb25lbnQgV3JhcHBlciBTdHlsZXMgKi9cbmNvbnN0IEFwaEZvcm1Td2l0Y2hXcmFwcGVyID0gc3R5bGVkLmxhYmVsYFxuICAgICR7YXBoRm9ybVN3aXRjaENvbW1vblN0eWxlc307XG5cbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgZGlzcGxheSA6IGZsZXg7XG5cbiAgICBtaW4td2lkdGggOiA1MHB4O1xuICAgIG1pbi1oZWlnaHQ6IDMwcHg7XG5cbiAgICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xuICAgIC1tcy1mbGV4LWFsaWduICAgOiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXMgICAgICA6IGNlbnRlcjtcblxuICAgIGZvbnQtc2l6ZSA6ICR7cHJvcHMgPT4gcHJvcHMudGV4dFNtYWxsID8gKFNJWkVTLlNNLkZPTlRfU0laRSkgOiBudWxsfTtcbiAgICB0ZXh0LWFsaWduOiAke3Byb3BzID0+IHByb3BzLnRleHRBbGlnbiB8fCAnbGVmdCd9O1xuXG4gICAgJHsocHJvcHMgPT4gKHByb3BzLnRvZ2dsZUFsaWduICE9PSAncmlnaHQnKSA/IHtcbiAgICAgICAgcGFkZGluZ0xlZnQ6ICc1MHB4JyxcblxuICAgICAgICAnLmFwaC1mb3JtLXN3aXRjaF9fd3JhcHBlcic6IHtcbiAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIH0sXG4gICAgfSA6IHtcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiAnNTBweCcsXG5cbiAgICAgICAgJy5hcGgtZm9ybS1zd2l0Y2hfX3dyYXBwZXInOiB7XG4gICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgfSxcbiAgICB9KX07XG5cbiAgICAke3Byb3BzID0+IHByb3BzLnN0eWxlc307XG5gO1xuXG4vKiBDb21wb25lbnQgVG9nZ2xlIFdyYXBwZXIgU3R5bGVzICovXG5jb25zdCBBcGhGb3JtU3dpdGNoVG9nZ2xlV3JhcHBlciA9IHN0eWxlZC5sYWJlbGBcbiAgICAke2FwaEZvcm1Td2l0Y2hDb21tb25TdHlsZXN9O1xuXG4gICAgcG9zaXRpb24gOiBhYnNvbHV0ZTtcbiAgICBkaXNwbGF5ICA6IGJsb2NrO1xuICAgIHRvcCAgICAgIDogNTAlO1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcblxuICAgIGxpbmUtaGVpZ2h0OiAwO1xuYDtcblxuLyogQ29tcG9uZW50IFRvZ2dsZSBTdHlsZXMgKi9cbmNvbnN0IEFwaEZvcm1Td2l0Y2hUb2dnbGUgPSBzdHlsZWQubGFiZWxgXG4gICAgJHthcGhGb3JtU3dpdGNoQ29tbW9uU3R5bGVzfTtcblxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3AgICAgIDogMDtcblxuICAgIHdpZHRoIDogMzBweDtcbiAgICBoZWlnaHQ6IDMwcHg7XG5cbiAgICB0cmFuc2l0aW9uLXByb3BlcnR5ICAgICAgIDogcmlnaHQsIGxlZnQ7XG4gICAgdHJhbnNpdGlvbi1kdXJhdGlvbiAgICAgICA6IDAuMjVzO1xuICAgIHRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlO1xuXG4gICAgYm9yZGVyLXJhZGl1cyAgIDogNTAlO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmdldCgnd2hpdGUnKX07XG4gICAgYm94LXNoYWRvdyAgICAgIDogMCAwIDVweCAwICR7Y29sb3JzLmdldCgnYmxhY2snLCAnb3JpZ2luYWwnLCAwLjI1KX07XG5gO1xuXG4vKiBDb21wb25lbnQgSW5wdXQgU3R5bGVzICovXG5jb25zdCBBcGhGb3JtU3dpdGNoSW5wdXQgPSBzdHlsZWQuaW5wdXRgXG4gICAgJHthcGhGb3JtU3dpdGNoQ29tbW9uU3R5bGVzfTtcblxuICAgIHBhZGRpbmc6IDA7XG4gICAgbWFyZ2luIDogNXB4IDA7XG5cbiAgICB3aWR0aCAgICAgICAgOiA1MHB4O1xuICAgIGhlaWdodCAgICAgICA6IDIwcHg7XG4gICAgYm9yZGVyLXJhZGl1czogMTVweDtcblxuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmdldCgnbWVyY3VyeScsICdsaWdodCcpfTtcblxuICAgIGJvcmRlciA6IDA7XG4gICAgb3V0bGluZTogMDtcblxuICAgIHRyYW5zaXRpb24tcHJvcGVydHkgICAgICAgOiBiYWNrZ3JvdW5kLWNvbG9yO1xuICAgIHRyYW5zaXRpb24tZHVyYXRpb24gICAgICAgOiAwLjI1cztcbiAgICB0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZTtcblxuICAgIC13ZWJraXQtYXBwZWFyYW5jZSAgICAgICAgIDogbm9uZTtcbiAgICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHRyYW5zcGFyZW50O1xuXG4gICAgJi5kaXNhYmxlZCxcbiAgICAmOmRpc2FibGVkIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuZ2V0KCdtZXJjdXJ5JywgJ2xpZ2h0JywgMC41KX07XG4gICAgfVxuXG4gICAgJjpjaGVja2VkIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuZ2V0KCdiYW1ib28nKX07XG5cbiAgICAgICAgKyAuYXBoLWZvcm0tc3dpdGNoIHtcbiAgICAgICAgICAgICZfX3RvZ2dsZSB7XG4gICAgICAgICAgICAgICAgbGVmdDogMjBweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgICY6ZGlzYWJsZWQge1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuZ2V0KCdiYW1ib28nLCAnbGlnaHQnLCAwLjUpfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgICsgLmFwaC1mb3JtLXN3aXRjaCB7XG4gICAgICAgICZfX3RvZ2dsZSB7XG4gICAgICAgICAgICBsZWZ0OiAwO1xuICAgICAgICB9XG4gICAgfVxuYDtcblxuLyogQ29tcG9uZW50IENvbnRlbnQgU3R5bGVzICovXG5jb25zdCBBcGhGb3JtU3dpdGNoQ29udGVudCA9IHN0eWxlZC5sYWJlbGBcbiAgICAke2FwaEZvcm1Td2l0Y2hDb21tb25TdHlsZXN9O1xuXG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgd2lkdGggIDogMTAwJTtcblxuICAgIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcblxuICAgICR7cHJvcHMgPT4gKCFwcm9wcy5oYXNDaGlsZHJlbikgPyBudWxsIDogKChwcm9wcy50b2dnbGVBbGlnbiAhPT0gJ3JpZ2h0JykgPyB7XG4gICAgICAgIHBhZGRpbmdMZWZ0OiAnMTBweCcsXG4gICAgfSA6IHtcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiAnMTBweCcsXG4gICAgfSl9O1xuYDtcblxuLyogQ29tcG9uZW50IFN0eWxlcyAqL1xuY29uc3QgQXBoRm9ybVN3aXRjaCA9IHtcbiAgICBXcmFwcGVyICAgICAgOiBBcGhGb3JtU3dpdGNoV3JhcHBlcixcbiAgICBUb2dnbGVXcmFwcGVyOiBBcGhGb3JtU3dpdGNoVG9nZ2xlV3JhcHBlcixcbiAgICBUb2dnbGUgICAgICAgOiBBcGhGb3JtU3dpdGNoVG9nZ2xlLFxuICAgIElucHV0ICAgICAgICA6IEFwaEZvcm1Td2l0Y2hJbnB1dCxcbiAgICBDb250ZW50ICAgICAgOiBBcGhGb3JtU3dpdGNoQ29udGVudCxcbn07XG5cbi8qIEV4cG9ydGluZyAqL1xuZXhwb3J0IGRlZmF1bHQgQXBoRm9ybVN3aXRjaDtcbiJdfQ== */"));
/* Component Content Styles */

var AphFormSwitchContent = (0, _styledBase.default)("label", {
  target: "e64k3mr4"
})(aphFormSwitchCommonStyles, ";display:block;width:100%;word-break:break-all;", function (props) {
  return !props.hasChildren ? null : props.toggleAlign !== 'right' ? {
    paddingLeft: '10px'
  } : {
    paddingRight: '10px'
  };
}, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0Zvcm0vU3dpdGNoL0Zvcm1Db250cm9sU3dpdGNoU3R5bGVzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStIeUMiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRm9ybS9Td2l0Y2gvRm9ybUNvbnRyb2xTd2l0Y2hTdHlsZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBQYWNrYWdlcyAqL1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuXG4vKiBGcmFtZXdvcmsgRGVmaW5pdGlvbnMgKi9cbmltcG9ydCB7IFNJWkVTIH0gZnJvbSAnLi4vLi4vLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzJztcblxuY29uc3QgYXBoRm9ybVN3aXRjaENvbW1vblN0eWxlcyA9IGBcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIGN1cnNvciAgICA6IHBvaW50ZXI7XG5gO1xuXG4vKiBDb21wb25lbnQgV3JhcHBlciBTdHlsZXMgKi9cbmNvbnN0IEFwaEZvcm1Td2l0Y2hXcmFwcGVyID0gc3R5bGVkLmxhYmVsYFxuICAgICR7YXBoRm9ybVN3aXRjaENvbW1vblN0eWxlc307XG5cbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgZGlzcGxheSA6IGZsZXg7XG5cbiAgICBtaW4td2lkdGggOiA1MHB4O1xuICAgIG1pbi1oZWlnaHQ6IDMwcHg7XG5cbiAgICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xuICAgIC1tcy1mbGV4LWFsaWduICAgOiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXMgICAgICA6IGNlbnRlcjtcblxuICAgIGZvbnQtc2l6ZSA6ICR7cHJvcHMgPT4gcHJvcHMudGV4dFNtYWxsID8gKFNJWkVTLlNNLkZPTlRfU0laRSkgOiBudWxsfTtcbiAgICB0ZXh0LWFsaWduOiAke3Byb3BzID0+IHByb3BzLnRleHRBbGlnbiB8fCAnbGVmdCd9O1xuXG4gICAgJHsocHJvcHMgPT4gKHByb3BzLnRvZ2dsZUFsaWduICE9PSAncmlnaHQnKSA/IHtcbiAgICAgICAgcGFkZGluZ0xlZnQ6ICc1MHB4JyxcblxuICAgICAgICAnLmFwaC1mb3JtLXN3aXRjaF9fd3JhcHBlcic6IHtcbiAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIH0sXG4gICAgfSA6IHtcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiAnNTBweCcsXG5cbiAgICAgICAgJy5hcGgtZm9ybS1zd2l0Y2hfX3dyYXBwZXInOiB7XG4gICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgfSxcbiAgICB9KX07XG5cbiAgICAke3Byb3BzID0+IHByb3BzLnN0eWxlc307XG5gO1xuXG4vKiBDb21wb25lbnQgVG9nZ2xlIFdyYXBwZXIgU3R5bGVzICovXG5jb25zdCBBcGhGb3JtU3dpdGNoVG9nZ2xlV3JhcHBlciA9IHN0eWxlZC5sYWJlbGBcbiAgICAke2FwaEZvcm1Td2l0Y2hDb21tb25TdHlsZXN9O1xuXG4gICAgcG9zaXRpb24gOiBhYnNvbHV0ZTtcbiAgICBkaXNwbGF5ICA6IGJsb2NrO1xuICAgIHRvcCAgICAgIDogNTAlO1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcblxuICAgIGxpbmUtaGVpZ2h0OiAwO1xuYDtcblxuLyogQ29tcG9uZW50IFRvZ2dsZSBTdHlsZXMgKi9cbmNvbnN0IEFwaEZvcm1Td2l0Y2hUb2dnbGUgPSBzdHlsZWQubGFiZWxgXG4gICAgJHthcGhGb3JtU3dpdGNoQ29tbW9uU3R5bGVzfTtcblxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3AgICAgIDogMDtcblxuICAgIHdpZHRoIDogMzBweDtcbiAgICBoZWlnaHQ6IDMwcHg7XG5cbiAgICB0cmFuc2l0aW9uLXByb3BlcnR5ICAgICAgIDogcmlnaHQsIGxlZnQ7XG4gICAgdHJhbnNpdGlvbi1kdXJhdGlvbiAgICAgICA6IDAuMjVzO1xuICAgIHRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlO1xuXG4gICAgYm9yZGVyLXJhZGl1cyAgIDogNTAlO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmdldCgnd2hpdGUnKX07XG4gICAgYm94LXNoYWRvdyAgICAgIDogMCAwIDVweCAwICR7Y29sb3JzLmdldCgnYmxhY2snLCAnb3JpZ2luYWwnLCAwLjI1KX07XG5gO1xuXG4vKiBDb21wb25lbnQgSW5wdXQgU3R5bGVzICovXG5jb25zdCBBcGhGb3JtU3dpdGNoSW5wdXQgPSBzdHlsZWQuaW5wdXRgXG4gICAgJHthcGhGb3JtU3dpdGNoQ29tbW9uU3R5bGVzfTtcblxuICAgIHBhZGRpbmc6IDA7XG4gICAgbWFyZ2luIDogNXB4IDA7XG5cbiAgICB3aWR0aCAgICAgICAgOiA1MHB4O1xuICAgIGhlaWdodCAgICAgICA6IDIwcHg7XG4gICAgYm9yZGVyLXJhZGl1czogMTVweDtcblxuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmdldCgnbWVyY3VyeScsICdsaWdodCcpfTtcblxuICAgIGJvcmRlciA6IDA7XG4gICAgb3V0bGluZTogMDtcblxuICAgIHRyYW5zaXRpb24tcHJvcGVydHkgICAgICAgOiBiYWNrZ3JvdW5kLWNvbG9yO1xuICAgIHRyYW5zaXRpb24tZHVyYXRpb24gICAgICAgOiAwLjI1cztcbiAgICB0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZTtcblxuICAgIC13ZWJraXQtYXBwZWFyYW5jZSAgICAgICAgIDogbm9uZTtcbiAgICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHRyYW5zcGFyZW50O1xuXG4gICAgJi5kaXNhYmxlZCxcbiAgICAmOmRpc2FibGVkIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuZ2V0KCdtZXJjdXJ5JywgJ2xpZ2h0JywgMC41KX07XG4gICAgfVxuXG4gICAgJjpjaGVja2VkIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuZ2V0KCdiYW1ib28nKX07XG5cbiAgICAgICAgKyAuYXBoLWZvcm0tc3dpdGNoIHtcbiAgICAgICAgICAgICZfX3RvZ2dsZSB7XG4gICAgICAgICAgICAgICAgbGVmdDogMjBweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgICY6ZGlzYWJsZWQge1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuZ2V0KCdiYW1ib28nLCAnbGlnaHQnLCAwLjUpfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgICsgLmFwaC1mb3JtLXN3aXRjaCB7XG4gICAgICAgICZfX3RvZ2dsZSB7XG4gICAgICAgICAgICBsZWZ0OiAwO1xuICAgICAgICB9XG4gICAgfVxuYDtcblxuLyogQ29tcG9uZW50IENvbnRlbnQgU3R5bGVzICovXG5jb25zdCBBcGhGb3JtU3dpdGNoQ29udGVudCA9IHN0eWxlZC5sYWJlbGBcbiAgICAke2FwaEZvcm1Td2l0Y2hDb21tb25TdHlsZXN9O1xuXG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgd2lkdGggIDogMTAwJTtcblxuICAgIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcblxuICAgICR7cHJvcHMgPT4gKCFwcm9wcy5oYXNDaGlsZHJlbikgPyBudWxsIDogKChwcm9wcy50b2dnbGVBbGlnbiAhPT0gJ3JpZ2h0JykgPyB7XG4gICAgICAgIHBhZGRpbmdMZWZ0OiAnMTBweCcsXG4gICAgfSA6IHtcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiAnMTBweCcsXG4gICAgfSl9O1xuYDtcblxuLyogQ29tcG9uZW50IFN0eWxlcyAqL1xuY29uc3QgQXBoRm9ybVN3aXRjaCA9IHtcbiAgICBXcmFwcGVyICAgICAgOiBBcGhGb3JtU3dpdGNoV3JhcHBlcixcbiAgICBUb2dnbGVXcmFwcGVyOiBBcGhGb3JtU3dpdGNoVG9nZ2xlV3JhcHBlcixcbiAgICBUb2dnbGUgICAgICAgOiBBcGhGb3JtU3dpdGNoVG9nZ2xlLFxuICAgIElucHV0ICAgICAgICA6IEFwaEZvcm1Td2l0Y2hJbnB1dCxcbiAgICBDb250ZW50ICAgICAgOiBBcGhGb3JtU3dpdGNoQ29udGVudCxcbn07XG5cbi8qIEV4cG9ydGluZyAqL1xuZXhwb3J0IGRlZmF1bHQgQXBoRm9ybVN3aXRjaDtcbiJdfQ== */"));
/* Component Styles */

var AphFormSwitch = {
  Wrapper: AphFormSwitchWrapper,
  ToggleWrapper: AphFormSwitchToggleWrapper,
  Toggle: AphFormSwitchToggle,
  Input: AphFormSwitchInput,
  Content: AphFormSwitchContent
};
/* Exporting */

var _default = AphFormSwitch;
exports.default = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _constants = require("../../constants");

var _Checkbox = _interopRequireDefault(require("./Checkbox"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/* Component Wrapper */
var AphInputWrapperStyled = (0, _styledBase.default)("div", {
  target: "eaa7cbg0"
})(process.env.NODE_ENV === "production" ? {
  name: "8zz7ay",
  styles: "box-sizing:border-box;position:relative;display:block;"
} : {
  name: "8zz7ay",
  styles: "box-sizing:border-box;position:relative;display:block;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0Zvcm0vSW5wdXQuanN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVl3QyIsImZpbGUiOiIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Gb3JtL0lucHV0LmpzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qIFBhY2thZ2VzICovXG5pbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBwcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5cbi8qIEZyYW1ld29yayBEZWZpbml0aW9ucyAqL1xuaW1wb3J0IHsgQ09MT1JTLCBSQURJVVMsIFNJWkVTIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzJztcblxuLyogQ29tcG9uZW50IFZhcmlhdGlvbnMgKi9cbmltcG9ydCBDaGVja2JveCBmcm9tICcuL0NoZWNrYm94JztcblxuLyogQ29tcG9uZW50IFdyYXBwZXIgKi9cbmNvbnN0IEFwaElucHV0V3JhcHBlclN0eWxlZCA9IHN0eWxlZC5kaXZgXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgZGlzcGxheSA6IGJsb2NrO1xuYDtcblxuLyogQ29tcG9uZW50IExhYmVsICovXG5jb25zdCBBcGhJbnB1dExhYmVsU3R5bGVkID0gc3R5bGVkLmxhYmVsYFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcCAgICAgOiBjYWxjKDUwJSAtIDEwcHgpO1xuICAgIGxlZnQgICAgOiAxMHB4O1xuICAgIGRpc3BsYXkgOiBpbmxpbmUtYmxvY2s7XG4gICAgdG9wICAgICA6IDIuNXB4O1xuXG4gICAgY29sb3I6ICR7Q09MT1JTLkRBUktfR1JFWX07XG5cbiAgICBmb250LXNpemUgIDogJHtTSVpFUy5TTS5GT05UX1NJWkV9O1xuICAgIGxpbmUtaGVpZ2h0OiAke1NJWkVTLlNNLkxJTkVfSEVJR0hUfTtcblxuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG5cbiAgICB0cmFuc2l0aW9uIDogY29sb3IgMC4yNXMgbGluZWFyO1xuICAgIHdpbGwtY2hhbmdlOiBjb2xvcjtcbmA7XG5cbi8qIENvbXBvbmVudCBTdHlsZXMgKi9cbmNvbnN0IEFwaElucHV0U3R5bGVkID0gc3R5bGVkLmlucHV0YFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgd2lkdGggIDogMTAwJTtcbiAgICBwYWRkaW5nOiAxNy41cHggMTBweCAyLjVweDtcbiAgICBtYXJnaW4gOiAwO1xuICAgIG1pbi1oZWlnaHQ6IDUwcHg7XG5cbiAgICBmb250LXNpemUgIDogJHtTSVpFUy5NRC5GT05UX1NJWkV9O1xuICAgIGxpbmUtaGVpZ2h0OiAke1NJWkVTLk1ELkxJTkVfSEVJR0hUfTtcblxuICAgIGNvbG9yICAgICAgICAgICA6ICR7Q09MT1JTLkJMQUNLfTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke0NPTE9SUy5TTU9LRX07XG4gICAgYm9yZGVyLXJhZGl1cyAgIDogJHtSQURJVVMuWFN9cHg7XG5cbiAgICBib3JkZXIgOiAwO1xuICAgIG91dGxpbmU6IDA7XG5cbiAgICB0cmFuc2l0aW9uIDogYmFja2dyb3VuZC1jb2xvciAwLjI1cyBsaW5lYXIsIHBhZGRpbmcgMC4yNXMgbGluZWFyO1xuICAgIHdpbGwtY2hhbmdlOiBiYWNrZ3JvdW5kLWNvbG9yLCBwYWRkaW5nO1xuXG4gICAgJjo6cGxhY2Vob2xkZXIge1xuICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgICBjb2xvciAgOiAke0NPTE9SUy5HUkVZfTtcblxuICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGxpbmVhcjtcbiAgICB9XG5cbiAgICAmOmFjdGl2ZSxcbiAgICAmOmZvY3VzIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtDT0xPUlMuR0VUKCdQUklNQVJZJywgMC4xKX07XG5cbiAgICAgICAgJjo6cGxhY2Vob2xkZXIge1xuICAgICAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgICY6aG92ZXIsXG4gICAgJjphY3RpdmUsXG4gICAgJjpmb2N1cyB7XG4gICAgICAgIGJvcmRlciA6IDA7XG4gICAgICAgIG91dGxpbmU6IDA7XG5cbiAgICAgICAgKyAuYXBoLWZvcm0tbGFiZWwge1xuICAgICAgICAgICAgY29sb3I6ICR7Q09MT1JTLlBSSU1BUll9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgJHtwcm9wcyA9PiBwcm9wcy5zdHlsZXN9O1xuYDtcblxuLyogQ29tcG9uZW50IEl0c2VsZiAqL1xuY29uc3QgSW5wdXQgPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICAgIGlkLFxuICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgIGxhYmVsLFxuICAgICAgICBsYWJlbFByb3BzLFxuICAgICAgICBwbGFjZWhvbGRlcixcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIG9uQ2hhbmdlLFxuICAgICAgICB0eXBlLFxuICAgIH0gPSBwcm9wcztcblxuICAgIGNvbnN0IGlucHV0SWQgPSBgQXBoRm9ybUZpZWxkJHtpZCB8fCBNYXRoLnJhbmRvbSgpfWA7XG4gICAgY29uc3QgW2hhc1ZhbHVlLCBzZXRIYXNWYWx1ZV0gPSB1c2VTdGF0ZSh2YWx1ZSA/IHRydWUgOiBmYWxzZSk7XG5cbiAgICBpZiAodHlwZSA9PT0gJ2NoZWNrYm94Jykge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPENoZWNrYm94XG4gICAgICAgICAgICAgICAgey4uLnByb3BzfVxuICAgICAgICAgICAgICAgIGlkPXtpZH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGV2dCkge1xuICAgICAgICBjb25zdCB7IHRhcmdldCB9ID0gZXZ0O1xuICAgICAgICBjb25zdCBpbnB1dFZhbHVlID0gdGFyZ2V0LnZhbHVlO1xuXG4gICAgICAgIHNldEhhc1ZhbHVlKGlucHV0VmFsdWUgPyB0cnVlIDogZmFsc2UpO1xuXG4gICAgICAgIGlmICh0eXBlb2Ygb25DaGFuZ2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIG9uQ2hhbmdlKE9iamVjdC5hc3NpZ24oe30sIGV2dCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPEFwaElucHV0V3JhcHBlclN0eWxlZD5cbiAgICAgICAgICAgIDxBcGhJbnB1dFN0eWxlZFxuICAgICAgICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgICAgICAgICBpZD17aW5wdXRJZH1cbiAgICAgICAgICAgICAgICB2YWx1ZT17dmFsdWV9XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17KCFsYWJlbCkgPyAnJyA6IChwbGFjZWhvbGRlciB8fCAnJyl9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgYXBoLWZvcm0tY29udHJvbCAke2NsYXNzTmFtZSB8fCAnJ30gJHsocGxhY2Vob2xkZXIgfHwgaGFzVmFsdWUpID8gJ2FwaC1mb3JtLWNvbnRyb2wtLWZpbGxlZCcgOiAnJ31gfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIHsoIWxhYmVsICYmICFwbGFjZWhvbGRlcikgPyAobnVsbCkgOiAoXG4gICAgICAgICAgICAgICAgPEFwaElucHV0TGFiZWxTdHlsZWRcbiAgICAgICAgICAgICAgICAgICAgey4uLmxhYmVsUHJvcHN9XG4gICAgICAgICAgICAgICAgICAgIGh0bWxGb3I9e2lucHV0SWR9XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImFwaC1mb3JtLWxhYmVsXCI+XG4gICAgICAgICAgICAgICAgICAgIHtsYWJlbCB8fCBwbGFjZWhvbGRlcn1cbiAgICAgICAgICAgICAgICA8L0FwaElucHV0TGFiZWxTdHlsZWQ+XG4gICAgICAgICAgICApfVxuICAgICAgICA8L0FwaElucHV0V3JhcHBlclN0eWxlZD5cbiAgICApO1xufTtcblxuLyogRGVmYXVsdCBQcm9wZXJ0aWVzICovXG5JbnB1dC5kZWZhdWx0UHJvcHMgPSB7XG4gICAgaWQgICAgICAgIDogJycsXG4gICAgbGFiZWxQcm9wczoge30sXG4gICAgbGFiZWxSaWdodDogZmFsc2UsXG4gICAgcmlnaHQgICAgIDogZmFsc2UsXG4gICAgc3R5bGVzICAgIDoge30sXG59XG5cbi8qIFByb3BlcnRpZXMgVHlwZXMgKi9cbklucHV0LnByb3BUeXBlcyA9IHtcbiAgICBpZCAgICAgICAgOiBwcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgbGFiZWxQcm9wczogcHJvcFR5cGVzLm9iamVjdCxcbiAgICBsYWJlbFJpZ2h0OiBwcm9wVHlwZXMuYm9vbCxcbiAgICByaWdodCAgICAgOiBwcm9wVHlwZXMuYm9vbCxcbiAgICBzdHlsZXMgICAgOiBwcm9wVHlwZXMub2JqZWN0LFxufTtcblxuLyogRXhwb3J0aW5nICovXG5leHBvcnQgZGVmYXVsdCBJbnB1dDtcbiJdfQ== */"
});
/* Component Label */

var AphInputLabelStyled = (0, _styledBase.default)("label", {
  target: "eaa7cbg1"
})("box-sizing:border-box;position:absolute;top:calc(50% - 10px);left:10px;display:inline-block;top:2.5px;color:", _constants.COLORS.DARK_GREY, ";font-size:", _constants.SIZES.SM.FONT_SIZE, ";line-height:", _constants.SIZES.SM.LINE_HEIGHT, ";text-transform:uppercase;transition:color 0.25s linear;will-change:color;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0Zvcm0vSW5wdXQuanN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW1Cd0MiLCJmaWxlIjoiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRm9ybS9JbnB1dC5qc3giLCJzb3VyY2VzQ29udGVudCI6WyIvKiBQYWNrYWdlcyAqL1xuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgcHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuXG4vKiBGcmFtZXdvcmsgRGVmaW5pdGlvbnMgKi9cbmltcG9ydCB7IENPTE9SUywgUkFESVVTLCBTSVpFUyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cyc7XG5cbi8qIENvbXBvbmVudCBWYXJpYXRpb25zICovXG5pbXBvcnQgQ2hlY2tib3ggZnJvbSAnLi9DaGVja2JveCc7XG5cbi8qIENvbXBvbmVudCBXcmFwcGVyICovXG5jb25zdCBBcGhJbnB1dFdyYXBwZXJTdHlsZWQgPSBzdHlsZWQuZGl2YFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGRpc3BsYXkgOiBibG9jaztcbmA7XG5cbi8qIENvbXBvbmVudCBMYWJlbCAqL1xuY29uc3QgQXBoSW5wdXRMYWJlbFN0eWxlZCA9IHN0eWxlZC5sYWJlbGBcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3AgICAgIDogY2FsYyg1MCUgLSAxMHB4KTtcbiAgICBsZWZ0ICAgIDogMTBweDtcbiAgICBkaXNwbGF5IDogaW5saW5lLWJsb2NrO1xuICAgIHRvcCAgICAgOiAyLjVweDtcblxuICAgIGNvbG9yOiAke0NPTE9SUy5EQVJLX0dSRVl9O1xuXG4gICAgZm9udC1zaXplICA6ICR7U0laRVMuU00uRk9OVF9TSVpFfTtcbiAgICBsaW5lLWhlaWdodDogJHtTSVpFUy5TTS5MSU5FX0hFSUdIVH07XG5cbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuXG4gICAgdHJhbnNpdGlvbiA6IGNvbG9yIDAuMjVzIGxpbmVhcjtcbiAgICB3aWxsLWNoYW5nZTogY29sb3I7XG5gO1xuXG4vKiBDb21wb25lbnQgU3R5bGVzICovXG5jb25zdCBBcGhJbnB1dFN0eWxlZCA9IHN0eWxlZC5pbnB1dGBcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHdpZHRoICA6IDEwMCU7XG4gICAgcGFkZGluZzogMTcuNXB4IDEwcHggMi41cHg7XG4gICAgbWFyZ2luIDogMDtcbiAgICBtaW4taGVpZ2h0OiA1MHB4O1xuXG4gICAgZm9udC1zaXplICA6ICR7U0laRVMuTUQuRk9OVF9TSVpFfTtcbiAgICBsaW5lLWhlaWdodDogJHtTSVpFUy5NRC5MSU5FX0hFSUdIVH07XG5cbiAgICBjb2xvciAgICAgICAgICAgOiAke0NPTE9SUy5CTEFDS307XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtDT0xPUlMuU01PS0V9O1xuICAgIGJvcmRlci1yYWRpdXMgICA6ICR7UkFESVVTLlhTfXB4O1xuXG4gICAgYm9yZGVyIDogMDtcbiAgICBvdXRsaW5lOiAwO1xuXG4gICAgdHJhbnNpdGlvbiA6IGJhY2tncm91bmQtY29sb3IgMC4yNXMgbGluZWFyLCBwYWRkaW5nIDAuMjVzIGxpbmVhcjtcbiAgICB3aWxsLWNoYW5nZTogYmFja2dyb3VuZC1jb2xvciwgcGFkZGluZztcblxuICAgICY6OnBsYWNlaG9sZGVyIHtcbiAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgY29sb3IgIDogJHtDT0xPUlMuR1JFWX07XG5cbiAgICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cyBsaW5lYXI7XG4gICAgfVxuXG4gICAgJjphY3RpdmUsXG4gICAgJjpmb2N1cyB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7Q09MT1JTLkdFVCgnUFJJTUFSWScsIDAuMSl9O1xuXG4gICAgICAgICY6OnBsYWNlaG9sZGVyIHtcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAmOmhvdmVyLFxuICAgICY6YWN0aXZlLFxuICAgICY6Zm9jdXMge1xuICAgICAgICBib3JkZXIgOiAwO1xuICAgICAgICBvdXRsaW5lOiAwO1xuXG4gICAgICAgICsgLmFwaC1mb3JtLWxhYmVsIHtcbiAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5QUklNQVJZfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgICR7cHJvcHMgPT4gcHJvcHMuc3R5bGVzfTtcbmA7XG5cbi8qIENvbXBvbmVudCBJdHNlbGYgKi9cbmNvbnN0IElucHV0ID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgICBpZCxcbiAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICBsYWJlbCxcbiAgICAgICAgbGFiZWxQcm9wcyxcbiAgICAgICAgcGxhY2Vob2xkZXIsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBvbkNoYW5nZSxcbiAgICAgICAgdHlwZSxcbiAgICB9ID0gcHJvcHM7XG5cbiAgICBjb25zdCBpbnB1dElkID0gYEFwaEZvcm1GaWVsZCR7aWQgfHwgTWF0aC5yYW5kb20oKX1gO1xuICAgIGNvbnN0IFtoYXNWYWx1ZSwgc2V0SGFzVmFsdWVdID0gdXNlU3RhdGUodmFsdWUgPyB0cnVlIDogZmFsc2UpO1xuXG4gICAgaWYgKHR5cGUgPT09ICdjaGVja2JveCcpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxDaGVja2JveFxuICAgICAgICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgICAgICAgICBpZD17aWR9XG4gICAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShldnQpIHtcbiAgICAgICAgY29uc3QgeyB0YXJnZXQgfSA9IGV2dDtcbiAgICAgICAgY29uc3QgaW5wdXRWYWx1ZSA9IHRhcmdldC52YWx1ZTtcblxuICAgICAgICBzZXRIYXNWYWx1ZShpbnB1dFZhbHVlID8gdHJ1ZSA6IGZhbHNlKTtcblxuICAgICAgICBpZiAodHlwZW9mIG9uQ2hhbmdlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBvbkNoYW5nZShPYmplY3QuYXNzaWduKHt9LCBldnQpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAgIDxBcGhJbnB1dFdyYXBwZXJTdHlsZWQ+XG4gICAgICAgICAgICA8QXBoSW5wdXRTdHlsZWRcbiAgICAgICAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgICAgICAgICAgaWQ9e2lucHV0SWR9XG4gICAgICAgICAgICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9eyghbGFiZWwpID8gJycgOiAocGxhY2Vob2xkZXIgfHwgJycpfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YGFwaC1mb3JtLWNvbnRyb2wgJHtjbGFzc05hbWUgfHwgJyd9ICR7KHBsYWNlaG9sZGVyIHx8IGhhc1ZhbHVlKSA/ICdhcGgtZm9ybS1jb250cm9sLS1maWxsZWQnIDogJyd9YH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7KCFsYWJlbCAmJiAhcGxhY2Vob2xkZXIpID8gKG51bGwpIDogKFxuICAgICAgICAgICAgICAgIDxBcGhJbnB1dExhYmVsU3R5bGVkXG4gICAgICAgICAgICAgICAgICAgIHsuLi5sYWJlbFByb3BzfVxuICAgICAgICAgICAgICAgICAgICBodG1sRm9yPXtpbnB1dElkfVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJhcGgtZm9ybS1sYWJlbFwiPlxuICAgICAgICAgICAgICAgICAgICB7bGFiZWwgfHwgcGxhY2Vob2xkZXJ9XG4gICAgICAgICAgICAgICAgPC9BcGhJbnB1dExhYmVsU3R5bGVkPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgPC9BcGhJbnB1dFdyYXBwZXJTdHlsZWQ+XG4gICAgKTtcbn07XG5cbi8qIERlZmF1bHQgUHJvcGVydGllcyAqL1xuSW5wdXQuZGVmYXVsdFByb3BzID0ge1xuICAgIGlkICAgICAgICA6ICcnLFxuICAgIGxhYmVsUHJvcHM6IHt9LFxuICAgIGxhYmVsUmlnaHQ6IGZhbHNlLFxuICAgIHJpZ2h0ICAgICA6IGZhbHNlLFxuICAgIHN0eWxlcyAgICA6IHt9LFxufVxuXG4vKiBQcm9wZXJ0aWVzIFR5cGVzICovXG5JbnB1dC5wcm9wVHlwZXMgPSB7XG4gICAgaWQgICAgICAgIDogcHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIGxhYmVsUHJvcHM6IHByb3BUeXBlcy5vYmplY3QsXG4gICAgbGFiZWxSaWdodDogcHJvcFR5cGVzLmJvb2wsXG4gICAgcmlnaHQgICAgIDogcHJvcFR5cGVzLmJvb2wsXG4gICAgc3R5bGVzICAgIDogcHJvcFR5cGVzLm9iamVjdCxcbn07XG5cbi8qIEV4cG9ydGluZyAqL1xuZXhwb3J0IGRlZmF1bHQgSW5wdXQ7XG4iXX0= */"));
/* Component Styles */

var AphInputStyled = (0, _styledBase.default)("input", {
  target: "eaa7cbg2"
})("box-sizing:border-box;display:block;width:100%;padding:17.5px 10px 2.5px;margin:0;min-height:50px;font-size:", _constants.SIZES.MD.FONT_SIZE, ";line-height:", _constants.SIZES.MD.LINE_HEIGHT, ";color:", _constants.COLORS.BLACK, ";background-color:", _constants.COLORS.SMOKE, ";border-radius:", _constants.RADIUS.XS, "px;border:0;outline:0;transition:background-color 0.25s linear,padding 0.25s linear;will-change:background-color,padding;&::placeholder{opacity:0;color:", _constants.COLORS.GREY, ";transition:opacity 0.25s linear;}&:active,&:focus{background-color:", _constants.COLORS.GET('PRIMARY', 0.1), ";&::placeholder{opacity:1;}}&:hover,&:active,&:focus{border:0;outline:0;+ .aph-form-label{color:", _constants.COLORS.PRIMARY, ";}}", function (props) {
  return props.styles;
}, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0Zvcm0vSW5wdXQuanN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXVDbUMiLCJmaWxlIjoiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRm9ybS9JbnB1dC5qc3giLCJzb3VyY2VzQ29udGVudCI6WyIvKiBQYWNrYWdlcyAqL1xuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgcHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuXG4vKiBGcmFtZXdvcmsgRGVmaW5pdGlvbnMgKi9cbmltcG9ydCB7IENPTE9SUywgUkFESVVTLCBTSVpFUyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cyc7XG5cbi8qIENvbXBvbmVudCBWYXJpYXRpb25zICovXG5pbXBvcnQgQ2hlY2tib3ggZnJvbSAnLi9DaGVja2JveCc7XG5cbi8qIENvbXBvbmVudCBXcmFwcGVyICovXG5jb25zdCBBcGhJbnB1dFdyYXBwZXJTdHlsZWQgPSBzdHlsZWQuZGl2YFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGRpc3BsYXkgOiBibG9jaztcbmA7XG5cbi8qIENvbXBvbmVudCBMYWJlbCAqL1xuY29uc3QgQXBoSW5wdXRMYWJlbFN0eWxlZCA9IHN0eWxlZC5sYWJlbGBcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3AgICAgIDogY2FsYyg1MCUgLSAxMHB4KTtcbiAgICBsZWZ0ICAgIDogMTBweDtcbiAgICBkaXNwbGF5IDogaW5saW5lLWJsb2NrO1xuICAgIHRvcCAgICAgOiAyLjVweDtcblxuICAgIGNvbG9yOiAke0NPTE9SUy5EQVJLX0dSRVl9O1xuXG4gICAgZm9udC1zaXplICA6ICR7U0laRVMuU00uRk9OVF9TSVpFfTtcbiAgICBsaW5lLWhlaWdodDogJHtTSVpFUy5TTS5MSU5FX0hFSUdIVH07XG5cbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuXG4gICAgdHJhbnNpdGlvbiA6IGNvbG9yIDAuMjVzIGxpbmVhcjtcbiAgICB3aWxsLWNoYW5nZTogY29sb3I7XG5gO1xuXG4vKiBDb21wb25lbnQgU3R5bGVzICovXG5jb25zdCBBcGhJbnB1dFN0eWxlZCA9IHN0eWxlZC5pbnB1dGBcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHdpZHRoICA6IDEwMCU7XG4gICAgcGFkZGluZzogMTcuNXB4IDEwcHggMi41cHg7XG4gICAgbWFyZ2luIDogMDtcbiAgICBtaW4taGVpZ2h0OiA1MHB4O1xuXG4gICAgZm9udC1zaXplICA6ICR7U0laRVMuTUQuRk9OVF9TSVpFfTtcbiAgICBsaW5lLWhlaWdodDogJHtTSVpFUy5NRC5MSU5FX0hFSUdIVH07XG5cbiAgICBjb2xvciAgICAgICAgICAgOiAke0NPTE9SUy5CTEFDS307XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtDT0xPUlMuU01PS0V9O1xuICAgIGJvcmRlci1yYWRpdXMgICA6ICR7UkFESVVTLlhTfXB4O1xuXG4gICAgYm9yZGVyIDogMDtcbiAgICBvdXRsaW5lOiAwO1xuXG4gICAgdHJhbnNpdGlvbiA6IGJhY2tncm91bmQtY29sb3IgMC4yNXMgbGluZWFyLCBwYWRkaW5nIDAuMjVzIGxpbmVhcjtcbiAgICB3aWxsLWNoYW5nZTogYmFja2dyb3VuZC1jb2xvciwgcGFkZGluZztcblxuICAgICY6OnBsYWNlaG9sZGVyIHtcbiAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgY29sb3IgIDogJHtDT0xPUlMuR1JFWX07XG5cbiAgICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cyBsaW5lYXI7XG4gICAgfVxuXG4gICAgJjphY3RpdmUsXG4gICAgJjpmb2N1cyB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7Q09MT1JTLkdFVCgnUFJJTUFSWScsIDAuMSl9O1xuXG4gICAgICAgICY6OnBsYWNlaG9sZGVyIHtcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAmOmhvdmVyLFxuICAgICY6YWN0aXZlLFxuICAgICY6Zm9jdXMge1xuICAgICAgICBib3JkZXIgOiAwO1xuICAgICAgICBvdXRsaW5lOiAwO1xuXG4gICAgICAgICsgLmFwaC1mb3JtLWxhYmVsIHtcbiAgICAgICAgICAgIGNvbG9yOiAke0NPTE9SUy5QUklNQVJZfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgICR7cHJvcHMgPT4gcHJvcHMuc3R5bGVzfTtcbmA7XG5cbi8qIENvbXBvbmVudCBJdHNlbGYgKi9cbmNvbnN0IElucHV0ID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgICBpZCxcbiAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICBsYWJlbCxcbiAgICAgICAgbGFiZWxQcm9wcyxcbiAgICAgICAgcGxhY2Vob2xkZXIsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBvbkNoYW5nZSxcbiAgICAgICAgdHlwZSxcbiAgICB9ID0gcHJvcHM7XG5cbiAgICBjb25zdCBpbnB1dElkID0gYEFwaEZvcm1GaWVsZCR7aWQgfHwgTWF0aC5yYW5kb20oKX1gO1xuICAgIGNvbnN0IFtoYXNWYWx1ZSwgc2V0SGFzVmFsdWVdID0gdXNlU3RhdGUodmFsdWUgPyB0cnVlIDogZmFsc2UpO1xuXG4gICAgaWYgKHR5cGUgPT09ICdjaGVja2JveCcpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxDaGVja2JveFxuICAgICAgICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgICAgICAgICBpZD17aWR9XG4gICAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShldnQpIHtcbiAgICAgICAgY29uc3QgeyB0YXJnZXQgfSA9IGV2dDtcbiAgICAgICAgY29uc3QgaW5wdXRWYWx1ZSA9IHRhcmdldC52YWx1ZTtcblxuICAgICAgICBzZXRIYXNWYWx1ZShpbnB1dFZhbHVlID8gdHJ1ZSA6IGZhbHNlKTtcblxuICAgICAgICBpZiAodHlwZW9mIG9uQ2hhbmdlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBvbkNoYW5nZShPYmplY3QuYXNzaWduKHt9LCBldnQpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAgIDxBcGhJbnB1dFdyYXBwZXJTdHlsZWQ+XG4gICAgICAgICAgICA8QXBoSW5wdXRTdHlsZWRcbiAgICAgICAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgICAgICAgICAgaWQ9e2lucHV0SWR9XG4gICAgICAgICAgICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9eyghbGFiZWwpID8gJycgOiAocGxhY2Vob2xkZXIgfHwgJycpfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YGFwaC1mb3JtLWNvbnRyb2wgJHtjbGFzc05hbWUgfHwgJyd9ICR7KHBsYWNlaG9sZGVyIHx8IGhhc1ZhbHVlKSA/ICdhcGgtZm9ybS1jb250cm9sLS1maWxsZWQnIDogJyd9YH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7KCFsYWJlbCAmJiAhcGxhY2Vob2xkZXIpID8gKG51bGwpIDogKFxuICAgICAgICAgICAgICAgIDxBcGhJbnB1dExhYmVsU3R5bGVkXG4gICAgICAgICAgICAgICAgICAgIHsuLi5sYWJlbFByb3BzfVxuICAgICAgICAgICAgICAgICAgICBodG1sRm9yPXtpbnB1dElkfVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJhcGgtZm9ybS1sYWJlbFwiPlxuICAgICAgICAgICAgICAgICAgICB7bGFiZWwgfHwgcGxhY2Vob2xkZXJ9XG4gICAgICAgICAgICAgICAgPC9BcGhJbnB1dExhYmVsU3R5bGVkPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgPC9BcGhJbnB1dFdyYXBwZXJTdHlsZWQ+XG4gICAgKTtcbn07XG5cbi8qIERlZmF1bHQgUHJvcGVydGllcyAqL1xuSW5wdXQuZGVmYXVsdFByb3BzID0ge1xuICAgIGlkICAgICAgICA6ICcnLFxuICAgIGxhYmVsUHJvcHM6IHt9LFxuICAgIGxhYmVsUmlnaHQ6IGZhbHNlLFxuICAgIHJpZ2h0ICAgICA6IGZhbHNlLFxuICAgIHN0eWxlcyAgICA6IHt9LFxufVxuXG4vKiBQcm9wZXJ0aWVzIFR5cGVzICovXG5JbnB1dC5wcm9wVHlwZXMgPSB7XG4gICAgaWQgICAgICAgIDogcHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIGxhYmVsUHJvcHM6IHByb3BUeXBlcy5vYmplY3QsXG4gICAgbGFiZWxSaWdodDogcHJvcFR5cGVzLmJvb2wsXG4gICAgcmlnaHQgICAgIDogcHJvcFR5cGVzLmJvb2wsXG4gICAgc3R5bGVzICAgIDogcHJvcFR5cGVzLm9iamVjdCxcbn07XG5cbi8qIEV4cG9ydGluZyAqL1xuZXhwb3J0IGRlZmF1bHQgSW5wdXQ7XG4iXX0= */"));
/* Component Itself */

var Input = function Input(props) {
  var id = props.id,
      className = props.className,
      label = props.label,
      labelProps = props.labelProps,
      placeholder = props.placeholder,
      value = props.value,
      onChange = props.onChange,
      type = props.type;
  var inputId = "AphFormField".concat(id || Math.random());

  var _useState = (0, _react.useState)(value ? true : false),
      _useState2 = _slicedToArray(_useState, 2),
      hasValue = _useState2[0],
      setHasValue = _useState2[1];

  if (type === 'checkbox') {
    return _react.default.createElement(_Checkbox.default, _extends({}, props, {
      id: id
    }));
  }

  function handleChange(evt) {
    var target = evt.target;
    var inputValue = target.value;
    setHasValue(inputValue ? true : false);

    if (typeof onChange === 'function') {
      onChange(Object.assign({}, evt));
    }
  }

  return _react.default.createElement(AphInputWrapperStyled, null, _react.default.createElement(AphInputStyled, _extends({}, props, {
    id: inputId,
    value: value,
    onChange: handleChange,
    placeholder: !label ? '' : placeholder || '',
    className: "aph-form-control ".concat(className || '', " ").concat(placeholder || hasValue ? 'aph-form-control--filled' : '')
  })), !label && !placeholder ? null : _react.default.createElement(AphInputLabelStyled, _extends({}, labelProps, {
    htmlFor: inputId,
    className: "aph-form-label"
  }), label || placeholder));
};
/* Default Properties */


Input.defaultProps = {
  id: '',
  labelProps: {},
  labelRight: false,
  right: false,
  styles: {}
  /* Properties Types */

};
Input.propTypes = {
  id: _propTypes.default.string.isRequired,
  labelProps: _propTypes.default.object,
  labelRight: _propTypes.default.bool,
  right: _propTypes.default.bool,
  styles: _propTypes.default.object
};
/* Exporting */

var _default = Input;
exports.default = _default;